snippet perlheader "insert boilerplate perl pod code" bws
################################################################################
use strict;
use warnings FATAL => 'all';
use FindBin qw(\$Bin);
BEGIN{
push(@INC, $Bin);
}
use Cwd;
use Cwd qw(abs_path);
my $dir = getcwd;
use FindBin qw(\$Script);
use Clone qw(clone);
use Term::ANSIColor qw(:constants);
use Getopt::Long qw(:config auto_version auto_help);
use Pod::Usage;
use YAML::XS;
use Data::Dumper;
use Perl::Critic;
use Carp qw(confess cluck);
use English qw(-no_match_vars);
use Data::Types qw(:all);
use namespace::autoclean;
use autodie 'open';
use MIME::Lite;
no autovivification;
use diagnostics -verbose;
use autodie;

use v5.18;

sub run_critic{
  my $file   = shift;
  my $critic = Perl::Critic->new();
  my @violations = $critic->critique($file);
  if(scalar @violations){
    print @violations;
    confess "the script modifications did not pass the Perl::Critic test\n";
  }
}

my \$debug = 0;
my \$in_file;

sub options{

# parse the arguments
my \$test = GetOptions (
        'help'          => sub{pod2usage({-exitval => 0, -msg => 'PRINTING HELP .....', -verbose => 3, -output => \*STDERR})},
        'man'          => sub{pod2usage({-exitval => 0, -msg => 'PRINTING HELP .....', -verbose => 3, -output => \*STDERR})},
        'h'           => sub{pod2usage({-exitval => 0, -msg => 'PRINTING HELP .....', -verbose => 3, -output => \*STDERR})},
        'usage|u'       => sub{pod2usage(2)},
        'name|n'        => sub{pod2usage({-exitval => 0, -msg => 'PRINTING SCRIPT DEATILS .....', -verbose => 99, -sections => [qw(NAME SYNOPSYS)], -output => \*STDERR})},
        'copyright|c'   => sub{pod2usage({-exitval => 0, -msg => 'PRINTING COPYRIGHT INFO .....', -verbose => 99, -sections => "Copyright Information", -output => \*STDERR})},
        'debug|d+'      => \\\$debug,
        'in=s{1}'       => \\\$in_file,
        '<>'            => sub{pod2usage({-msg => "Unknown Argument(s): " . join(' ', @_) ." " . join(" ", @ARGV)})},
        ) or pod2usage({-verbose => 0, -output => \*STDERR});

pod2usage({-msg => "-in is a mandatory argument\n", -verbose => 99, -sections => [qw(USAGE)], -output => \*STDERR}) if (!defined \$in_file);

}

run_critic($PROGRAM_NAME);
options();

1;
__END__

=head1 NAME

${1:`!p snip.rv = snip.fn`}

=head1 SYNOPSYS

=head2 DESCRIPTION
  
  ${2:enter short description}

 REQUIREMENTS: ---
         BUGS: ---
        NOTES: ---
       AUTHOR: ${3:`whoami`}
 ORGANIZATION: ${4:NVIDIA/AMD}
      VERSION: 1.0
      CREATED: ${5:${6:`date +%m`}.${7:`date +%d`}}.`date +%Y`
     REVISION: ---
        EMAIL: ${8:`echo $USER`}@${4/.*/\L$0\E/}.com

=head1 Copyright Information

----------------------------------------------------------------------

Copyright (c) ${8:`date +%Y`}, $4 Corp.
All Rights Reserved.

This is UNPUBLISHED PROPRIETARY SOURCE CODE of $4 Corp.;
the contents of this file may not be disclosed to third parties, copied or
duplicated in any form, in whole or in part, without the prior written
permission of $4 Corp.

RESTRICTED RIGHTS LEGEND:

Use, duplication or disclosure by the Government is subject to restrictions
as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
and Computer Software clause at DFARS 252.227-7013, and/or in similar or
successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
rights reserved under the Copyright Laws of the United States.

----------------------------------------------------------------------

=head1 USAGE

perl $1 [options]

=head2 OPTIONS

 --usage|u          : prints usage
 --name|n           : prints the name of the script
 --copyright|c      : prints the name of the script
 --version          : prints version
 --debug|d          : specify the debug level
                      -d is counted to determine the verbosity level
 --in*              : input file

=over 8

=item B<--help>

  Print a brief help message and exits.

=item B<--man>

  Prints the manual page and exits.

=back

=cut
endsnippet

