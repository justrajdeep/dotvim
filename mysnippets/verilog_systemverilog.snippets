# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

##############
# NICE BOXES #
##############
global !p
import string, vim

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            # get the flags and text of a comment part
            flags,text = i.next().split(':', 1)

            if len(flags) == 0:
                if len(text) == 1:
                    rv.append((text,text,text, ""))
            # parse 3-part comment, but ignore those with O flag
            elif flags[0] == 's' and 'O' not in flags:
                ctriple = []
                indent = ""

                if flags[-1] in string.digits:
                    indent = " " * int(flags[-1])
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'm')
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'e')
                ctriple.append(text)
                ctriple.append(indent)

                rv.append(ctriple)

            elif flags[0] == 'b':
                if len(text) == 1:
                    rv.insert(0, (text,text,text, ""))

    except StopIteration:
       return rv

def _get_comment_format():
    """ Returns a 4-element tuple (first_line, middle_lines, end_line, indent)
    representing the comment format for the current file.

    It first looks at the 'commentstring', if that ends with %s, it uses that.
    Otherwise it parses '&comments' and prefers single character comment
    markers if there are any.
    """
    commentstring = vim.eval("&commentstring")
    if commentstring.endswith("%s"):
        c = commentstring[:-2]
        return (c.rstrip(), c.rstrip(), c.rstrip(), "")
    comments = _parse_comments(vim.eval("&comments"))
    for c in comments:
        if c[0] == "SINGLE_CHAR":
            return c[1:]
    return comments[0][1:]

def foldmarker():
	"Return a tuple of (open fold marker, close fold marker)"
	return vim.eval("&foldmarker").split(",")

endglobal

################################################################################
snippet ifdef "add ifdef" bsw
${1:`}ifdef ${2:`!p snip.rv = snip.basename.upper()`}__${3:__}${4:`!p snip.rv = snip.fn.replace(snip.basename, "").replace(".", "").upper()`}
$1else
$1define $2__$3$4
$1endif ${5:`!p snip.rv = _get_comment_format()[0]`} $2__$3$4 $5
endsnippet

snippet uvm_info "add uvm_info macro" sw
\`uvm_info(get_type_name(), $sformatf("$1"), uvm_pkg::${2:UVM_FULL});
endsnippet

snippet uvm_debug "add uvm_debug macro" sw
\`uvm_info(get_type_name(), $sformatf("$1"), uvm_pkg::${2:UVM_DEBUG});
endsnippet

snippet uvm_full "add uvm_full macro" sw
\`uvm_info(get_type_name(), $sformatf("$1"), uvm_pkg::${2:UVM_FULL});
endsnippet

snippet assert "add uvm assertion macro" sw
  property ${1:assertion_name};
    @(posedge clk) disable iff(!reset || assertion_disable)
      (${2:assertion condition});
  endproperty: $1
  assert_$1: assert property($1);
endsnippet

snippet uvm_factory "not use the macro" sw
  const static string type_name = $sformatf("${1:CLASS#(%s)}"${2: , $typename(T)});
  ${3:typedef uvm_pkg::uvm_component_registry#(${4:CLASS#(PARAM1,)}, type_name) type_id;
  static function type_id get_type();
    return type_id::get();
  endfunction: get_type
  virtual function uvm_pkg::uvm_object_wrapper get_object_type();
    return type_id::get();
  endfunction: get_object_type
  virtual }function string get_type_name();
    return type_name;
  endfunction: get_type_name
endsnippet

snippet uvm_high "add uvm_high macro" sw
\`uvm_info(get_type_name(), $sformatf("$1"), uvm_pkg::${2:UVM_HIGH});
endsnippet

snippet uvm_medium "add uvm_medium macro" sw
\`uvm_info(get_type_name(), $sformatf("$1"), uvm_pkg::${2:UVM_MEDIUM});
endsnippet

snippet uvm_low "add uvm_low macro" sw
\`uvm_info(get_type_name(), $sformatf("$1"), uvm_pkg::${2:UVM_LOW});
endsnippet

snippet uvm_none "add uvm_none macro" sw
\`uvm_info(get_type_name(), $sformatf("$1"), uvm_pkg::${2:UVM_NONE});
endsnippet

snippet uvm_fatal "add uvm_fatal macro" sw
\`uvm_${1:fatal}(get_type_name(), $sformatf("$2"));
endsnippet

snippet uvm_error "add uvm_error macro" sw
\`uvm_${1:error}(get_type_name(), $sformatf("$2"));
endsnippet

snippet uvm_warn "add uvm_warning macro" sw
\`uvm_${1:warning}(get_type_name(), $sformatf("$2"));
endsnippet

snippet config_get "add cfgdb::get macro" sw
  // get ${1:field_name} from config_db, of ${2:type} type and pass it to ${3:value}
  if(!(uvm_pkg::uvm_config_db#($2)::get(.cntxt(${4:this}), .inst_name("$5"), .field_name("$1"), .value($3)))) begin
    \`uvm_${6:error}(get_type_name(), $sformatf("Unable to obtain $1 from $4->$5->$1 in config DB."));
  end
endsnippet

snippet config_set "add cfgdb::set macro" sw
  // set ${1:field_name} from config_db, of ${2:type} type and assign value = ${3:value}
  uvm_pkg::uvm_config_db#($2)::set(.cntxt(${4:uvm_root::get()}), .inst_name("$5"), .field_name("$1"), .value($3));
endsnippet

snippet comp_utils "add component utils macro" sw
  \`uvm_${1:component}_utils_begin(${2:`!p snip.rv = snip.basename.lower()`})
  \`uvm_$1_utils_end
endsnippet

snippet new "add new function" sw
  function new(string name="${1:`!p snip.rv = snip.basename.lower()`}", uvm_component parent=${2:null});
    super.new(.name(name), .parent(parent));
  endfunction:new
endsnippet

snippet function "add * function" sw
${1:`!p snip.rv = _get_comment_format()[0]`} virtual function ${2:void} ${3:name}_f($4) `!p snip.rv = foldmarker()[0]`${5:1} $1
virtual function $2 $3_f($4);
  \`uvm_info(get_type_name(), $sformatf("in $3_f"), uvm_pkg::UVM_DEBUG);
endfunction:$3_f
$1 `!p snip.rv = foldmarker()[1]`$5 $1 virtual function $2 $3_f
endsnippet

snippet task "add * function" sw
${1:`!p snip.rv = _get_comment_format()[0]`} virtual task ${2:void} ${3:name}_f($4) `!p snip.rv = foldmarker()[0]`${5:1} $1
virtual task $2 $3_f($4);
  \`uvm_info(get_type_name(), $sformatf("in $3_f"), uvm_pkg::UVM_DEBUG);
endfunction:$3_f
$1 `!p snip.rv = foldmarker()[1]`$5 $1 virtual function $2 $3_f
endsnippet

snippet phase "add * phase" sw
  virtual ${1:function} void ${2:build}_phase(uvm_pkg::uvm_phase phase);
    super.$2_phase(phase);
  endfunction:$2_phase
endsnippet

snippet create_clk "add nitro_clk" sw
  clock_rst_properties_inst.create_clock(.name("$1"), .clk_period_in_ps($2), .delay_in_ps($3), .init_val(0), .index($4));
endsnippet

snippet create_dclk "add derived nitro_clk" sw
  clock_rst_properties_inst.create_derived_clock(.name("$1"), .parent_clock_name("$2"), .init_val($3), .phase($4), .high_pulse_count($5), .low_pulse_count($6), .index($7));
endsnippet

snippet create_rst "add nitro_rst" sw
  clock_rst_properties_inst.create_reset(.name("$1"), .active_high_lowx($2), .index($3), .init_val(1'bx), .reset_time($4), .clock_name("$5"), .clock_count($6));
endsnippet
