" ************************ My own vimrc ******************************

     set t_Co=256
     set t_Sf=[3%dm
     set t_Sb=[4%dm
     set t_mr=[00;33;44m
     set encoding=utf-8
     set fileencoding=utf-8
     set fileencodings=utf-8

let use_pathogen  = 0
let use_neobundle = 0
let use_vimPlug = 0
if has('gui_running')
  let use_neobundle = 1
else
  let use_neobundle = 0
endif

if use_pathogen
  set rtp+=~/.vim/bundle/pathogen
  "PATHOGEN
  filetype off
endif
"disble individual pathogen
"let g:pathogen_disabled += ['delimitMate']
" To disable a plugin, add it's bundle name to the following list
let g:pathogen_disabled = []

" for some reason the csscolor plugin is very slow when run on the terminal
" but not in GVim, so disable it if no GUI is running
if !has('gui_running')
        call add(g:pathogen_disabled, 'vim_airline')
endif
" disabling due to vim update
call add(g:pathogen_disabled, 'yankstack')
call add(g:pathogen_disabled, 'nvbug')
" disabling nerdtree since some internal vim error
call add(g:pathogen_disabled, 'NERD_tree')
call add(g:pathogen_disabled, 'mru')
call add(g:pathogen_disabled, 'multipleHilight')
"we use neocomplete
" call add(g:pathogen_disabled, 'neocomplete')
call add(g:pathogen_disabled, 'YouCompleteMe')
call add(g:pathogen_disabled, 'checkSyntax')
call add(g:pathogen_disabled, 'savevers')
call add(g:pathogen_disabled, 'neocomplcache')
call add(g:pathogen_disabled, 'neocomplcache-ultisnips')
"call add(g:pathogen_disabled, 'ultisnips')
call add(g:pathogen_disabled, 'snippets')
call add(g:pathogen_disabled, 'vimfiler')
call add(g:pathogen_disabled, 'coVim')
call add(g:pathogen_disabled, 'easymotion_2')
call add(g:pathogen_disabled, 'neosnippet')
call add(g:pathogen_disabled, 'YankRing')
call add(g:pathogen_disabled, 'LargeFile')
call add(g:pathogen_disabled, 'cursorcross')
call add(g:pathogen_disabled, 'perforce')
call add(g:pathogen_disabled, 'p4python')
"this is the better plugin: vim_perforce
call add(g:pathogen_disabled, 'vim_perforce')
"call add(g:pathogen_disabled, 'yankstack')
call add(g:pathogen_disabled, 'diffchanges')
call add(g:pathogen_disabled, 'vim-diffchanges')
call add(g:pathogen_disabled, 'diminactive')
call add(g:pathogen_disabled, 'easytags')
call add(g:pathogen_disabled, 'minibufexpl')
call add(g:pathogen_disabled, 'vim-shell')
call add(g:pathogen_disabled, 'Command-T')
call add(g:pathogen_disabled, 'sneak')
call add(g:pathogen_disabled, 'chronos')
call add(g:pathogen_disabled, 'textabyss')
call add(g:pathogen_disabled, 'GoldenView')
call add(g:pathogen_disabled, 'vim_airline')
call add(g:pathogen_disabled, 'autocomplete')
call add(g:pathogen_disabled, 'bufexplorer')

"diabling plugins {{{1
" call add(g:pathogen_disabled, 'CSApprox')
" call add(g:pathogen_disabled, 'l9')
" call add(g:pathogen_disabled, 'FuzzyFinder')
" call add(g:pathogen_disabled, 'MultipleSearch')
" call add(g:pathogen_disabled, 'Pydiction')
" call add(g:pathogen_disabled, 'TagmaTasks')
" call add(g:pathogen_disabled, 'VisIncr')
" call add(g:pathogen_disabled, 'bluespec')
" call add(g:pathogen_disabled, 'buffergator')
" call add(g:pathogen_disabled, 'calendar')
" call add(g:pathogen_disabled, 'colorSchemeDegrade')
" call add(g:pathogen_disabled, 'color_ChasingLogic')
" call add(g:pathogen_disabled, 'color_FlatColor')
" call add(g:pathogen_disabled, 'color_badwolf')
" call add(g:pathogen_disabled, 'color_base16')
" call add(g:pathogen_disabled, 'color_bubblegum')
" call add(g:pathogen_disabled, 'color_colorschemes')
" call add(g:pathogen_disabled, 'color_distinguished')
" call add(g:pathogen_disabled, 'color_flatui')
" call add(g:pathogen_disabled, 'color_grb256')
" call add(g:pathogen_disabled, 'color_gruvbox')
" call add(g:pathogen_disabled, 'color_harlequin')
" call add(g:pathogen_disabled, 'color_hemisu')
" call add(g:pathogen_disabled, 'color_hybrid')
" call add(g:pathogen_disabled, 'color_laederon')
" call add(g:pathogen_disabled, 'color_luna')
" call add(g:pathogen_disabled, 'color_noctu')
" call add(g:pathogen_disabled, 'color_seoul256')
" call add(g:pathogen_disabled, 'color_sol')
" call add(g:pathogen_disabled, 'color_solarized')
" call add(g:pathogen_disabled, 'color_tomorrow')
" call add(g:pathogen_disabled, 'color_tomorrow_theme')
" call add(g:pathogen_disabled, 'colour_sampler_pack')
" call add(g:pathogen_disabled, 'compview')
" call add(g:pathogen_disabled, 'cscope')
" call add(g:pathogen_disabled, 'csv')
" call add(g:pathogen_disabled, 'delimitMate')
" call add(g:pathogen_disabled, 'easy_align')
" call add(g:pathogen_disabled, 'easymotion')
" call add(g:pathogen_disabled, 'smartinput-endwise')
" call add(g:pathogen_disabled, 'eunuch')
" call add(g:pathogen_disabled, 'exchange')
" call add(g:pathogen_disabled, 'gundo')
" call add(g:pathogen_disabled, 'kolor')
" call add(g:pathogen_disabled, 'linediff')
" call add(g:pathogen_disabled, 'matchTagAlways')
" call add(g:pathogen_disabled, 'matchit')
" call add(g:pathogen_disabled, 'multipleHilight')
" call add(g:pathogen_disabled, 'multiple_cursor')
" call add(g:pathogen_disabled, 'my_colors')
" call add(g:pathogen_disabled, 'narrow')
" call add(g:pathogen_disabled, 'neocomplete')
" call add(g:pathogen_disabled, 'nvidia')
" call add(g:pathogen_disabled, 'over')
" call add(g:pathogen_disabled, 'perl-support')
" call add(g:pathogen_disabled, 'perlOmni')
" call add(g:pathogen_disabled, 'perldoc')
" call add(g:pathogen_disabled, 'python')
" call add(g:pathogen_disabled, 'rainbow_parentheses')
" call add(g:pathogen_disabled, 'repeat')
" call add(g:pathogen_disabled, 'scratch')
" call add(g:pathogen_disabled, 'speeddating')
" call add(g:pathogen_disabled, 'table-mode')
" call add(g:pathogen_disabled, 'tabpagecolorscheme')
" call add(g:pathogen_disabled, 'tagbar')
" call add(g:pathogen_disabled, 'undoTree')
" call add(g:pathogen_disabled, 'verilog')
" call add(g:pathogen_disabled, 'verilog_systemverilog')
" call add(g:pathogen_disabled, 'vim-expand-region')
" call add(g:pathogen_disabled, 'vim_colors_babymate256')
" call add(g:pathogen_disabled, 'vim_monokai')
" call add(g:pathogen_disabled, 'vim_nocturne')
" call add(g:pathogen_disabled, 'vim-misc')
" call add(g:pathogen_disabled, 'vim_session')
" call add(g:pathogen_disabled, 'vimfiler')
" call add(g:pathogen_disabled, 'vimproc')
" call add(g:pathogen_disabled, 'xml')
" call add(g:pathogen_disabled, 'yankstack')
" call add(g:pathogen_disabled, 'genutils')
" call add(g:pathogen_disabled, 'targets')
" call add(g:pathogen_disabled, 'vim_indent_guides')
" call add(g:pathogen_disabled, 'selective-undo')
" call add(g:pathogen_disabled, 'commentary')
" call add(g:pathogen_disabled, 'color_lunatic')
" call add(g:pathogen_disabled, 'tbone')
" call add(g:pathogen_disabled, 'snippets')
" call add(g:pathogen_disabled, 'pyrepl')
" call add(g:pathogen_disabled, 'crunch')
" call add(g:pathogen_disabled, 'swap-parameters')
" call add(g:pathogen_disabled, 'switch')
" call add(g:pathogen_disabled, 'HelpClose')
" call add(g:pathogen_disabled, 'join')
call add(g:pathogen_disabled, 'colorv')
call add(g:pathogen_disabled, 'xterm-color-table')
" call add(g:pathogen_disabled, 'color_blayden')
" call add(g:pathogen_disabled, 'color_lavalamp')
" call add(g:pathogen_disabled, 'color_mochalatte')
" call add(g:pathogen_disabled, 'ack')
" call add(g:pathogen_disabled, 'ag')
call add(g:pathogen_disabled, 'unite')
call add(g:pathogen_disabled, 'unite_qfix')
" call add(g:pathogen_disabled, 'ctrlspace')
" call add(g:pathogen_disabled, 'QFEnter')
call add(g:pathogen_disabled, 'IndexedSearch')
call add(g:pathogen_disabled, 'notes')
" call add(g:pathogen_disabled, 'cdo')
" call add(g:pathogen_disabled, 'numbers')
" call add(g:pathogen_disabled, 'cmdline-completion')
" call add(g:pathogen_disabled, 'detectindent')
" call add(g:pathogen_disabled, 'file-line')
" call add(g:pathogen_disabled, 'grep')
" call add(g:pathogen_disabled, 'ViewOutput')
" call add(g:pathogen_disabled, 'color_atom')
" call add(g:pathogen_disabled, 'color_detailed')
" call add(g:pathogen_disabled, 'color_jellybeans')
" call add(g:pathogen_disabled, 'color_vividchalk')
" call add(g:pathogen_disabled, 'color_ingretu')
" call add(g:pathogen_disabled, 'color_molokai')
" call add(g:pathogen_disabled, 'color_tir_black')
" call add(g:pathogen_disabled, 'color_xoria256')
" call add(g:pathogen_disabled, 'color_xterm16')
" call add(g:pathogen_disabled, 'color_Zenburn')
" call add(g:pathogen_disabled, 'color_greyhouse')
" call add(g:pathogen_disabled, 'neobundle')

" call add(g:pathogen_disabled, 'ultisnips')
call add(g:pathogen_disabled, 'vim_perforce_fork')
call add(g:pathogen_disabled, 'ctrlp')
call add(g:pathogen_disabled, 'ripple')
call add(g:pathogen_disabled, 'PyScratch')

call add(g:pathogen_disabled, 'signature')
call add(g:pathogen_disabled, 'bling')
call add(g:pathogen_disabled, 'quickfixsigns')
call add(g:pathogen_disabled, 'quickhl')
call add(g:pathogen_disabled, 'wildfire')
call add(g:pathogen_disabled, 'addon-mw-utils')
call add(g:pathogen_disabled, 'addon-manager')
call add(g:pathogen_disabled, 'maximize')
call add(g:pathogen_disabled, 'hilinks')
call add(g:pathogen_disabled, 'shymenu')
call add(g:pathogen_disabled, 'golden-ratio')
call add(g:pathogen_disabled, 'python-mode')
call add(g:pathogen_disabled, 'xpath')
call add(g:pathogen_disabled, 'webapi')
call add(g:pathogen_disabled, 'virtualenv')
call add(g:pathogen_disabled, 'tap')
call add(g:pathogen_disabled, 'vdebug')
call add(g:pathogen_disabled, 'vcscommand')
call add(g:pathogen_disabled, 'ttagecho')
call add(g:pathogen_disabled, 'tracwiki')
call add(g:pathogen_disabled, 'tplugin')
call add(g:pathogen_disabled, 'tmru')
call add(g:pathogen_disabled, 'tmarks')
call add(g:pathogen_disabled, 'tinykeymap')
call add(g:pathogen_disabled, 'tmux_syntax')
call add(g:pathogen_disabled, 'SyntaxAttr')
call add(g:pathogen_disabled, 'swap')
call add(g:pathogen_disabled, 'SudoEdit')
call add(g:pathogen_disabled, 'sparkup')
call add(g:pathogen_disabled, 'smarty')
call add(g:pathogen_disabled, 'runVimTests')
call add(g:pathogen_disabled, 'ref')
call add(g:pathogen_disabled, 'Rainbow-Parenthsis-Bundle')
call add(g:pathogen_disabled, 'ragtag')
call add(g:pathogen_disabled, 'python-pep8-indent')
call add(g:pathogen_disabled, 'pytest-vim-compiler')
call add(g:pathogen_disabled, 'pytest')
call add(g:pathogen_disabled, 'pydoc')
call add(g:pathogen_disabled, 'projectroot')
call add(g:pathogen_disabled, 'projectionist')
call add(g:pathogen_disabled, 'preview')
call add(g:pathogen_disabled, 'phpcomplete')
call add(g:pathogen_disabled, 'Parameter-Text-Objects')
call add(g:pathogen_disabled, 'pac')
call add(g:pathogen_disabled, 'operator-user')
call add(g:pathogen_disabled, 'operator-replace')
call add(g:pathogen_disabled, 'open-browser')
call add(g:pathogen_disabled, 'neomru')
call add(g:pathogen_disabled, 'lusty')
call add(g:pathogen_disabled, 'gitv')
call add(g:pathogen_disabled, 'luarefvim')
call add(g:pathogen_disabled, 'lua-ftplugin')
call add(g:pathogen_disabled, 'localvimrc')
call add(g:pathogen_disabled, 'keepcase')
call add(g:pathogen_disabled, 'github-issues')
call add(g:pathogen_disabled, 'gf-python')
call add(g:pathogen_disabled, 'fontzoom')
call add(g:pathogen_disabled, 'fatrat')
call add(g:pathogen_disabled, 'extradite')
call add(g:pathogen_disabled, 'CycleColor')
call add(g:pathogen_disabled, 'Colorizer')
call add(g:pathogen_disabled, 'colorhighlight')
call add(g:pathogen_disabled, 'coffee-script')
call add(g:pathogen_disabled, 'better-whitespace')
call add(g:pathogen_disabled, 'QFixToggle')
call add(g:pathogen_disabled, 'AnsiEsc')
call add(g:pathogen_disabled, 'plug')
call add(g:pathogen_disabled, 'obsession')
call add(g:pathogen_disabled, 'tabline')
call add(g:pathogen_disabled, 'tabber')
call add(g:pathogen_disabled, 'bufferlist')
call add(g:pathogen_disabled, 'smeargle')
call add(g:pathogen_disabled, 'tmux')
call add(g:pathogen_disabled, 'visual-star-search')
call add(g:pathogen_disabled, 'anzu')
call add(g:pathogen_disabled, 'portkey')
call add(g:pathogen_disabled, 'togglecursor')
call add(g:pathogen_disabled, 'ctrlp-cmatcher')
call add(g:pathogen_disabled, 'nerdcommenter')
call add(g:pathogen_disabled, 'colorSchemeEx')
call add(g:pathogen_disabled, 'Command-T')
call add(g:pathogen_disabled, 'GoldenView')
call add(g:pathogen_disabled, 'LargeFile')
call add(g:pathogen_disabled, 'NERD_tree')
call add(g:pathogen_disabled, 'TaskList')
call add(g:pathogen_disabled, 'YankRing')
call add(g:pathogen_disabled, 'YouCompleteMe')
call add(g:pathogen_disabled, 'abolish')
call add(g:pathogen_disabled, 'autocomplete')
call add(g:pathogen_disabled, 'autohighlight')
call add(g:pathogen_disabled, 'bufexplorer')
call add(g:pathogen_disabled, 'buffergrep')
call add(g:pathogen_disabled, 'bufkill')
call add(g:pathogen_disabled, 'bufkill_fork')
call add(g:pathogen_disabled, 'checkSyntax')
call add(g:pathogen_disabled, 'chronos')
call add(g:pathogen_disabled, 'coVim')
call add(g:pathogen_disabled, 'conque')
call add(g:pathogen_disabled, 'context_filetype')
call add(g:pathogen_disabled, 'cursorcross')
call add(g:pathogen_disabled, 'diffchanges')
call add(g:pathogen_disabled, 'diminactive')
call add(g:pathogen_disabled, 'dirdiff')
call add(g:pathogen_disabled, 'dragvisuals')
call add(g:pathogen_disabled, 'easymotion_2')
call add(g:pathogen_disabled, 'easytags')
call add(g:pathogen_disabled, 'enmasse')
call add(g:pathogen_disabled, 'express')
call add(g:pathogen_disabled, 'fontmanager')
call add(g:pathogen_disabled, 'fugitive')
call add(g:pathogen_disabled, 'lose')
call add(g:pathogen_disabled, 'minibufexpl')
call add(g:pathogen_disabled, 'mru')
call add(g:pathogen_disabled, 'mw_utils')
call add(g:pathogen_disabled, 'neocomplcache')
call add(g:pathogen_disabled, 'neocomplcache-ultisnips')
call add(g:pathogen_disabled, 'neosnippet')
call add(g:pathogen_disabled, 'nvbug')
call add(g:pathogen_disabled, 'orgmode')
call add(g:pathogen_disabled, 'outline')
call add(g:pathogen_disabled, 'p4python')
call add(g:pathogen_disabled, 'pathogen')
call add(g:pathogen_disabled, 'perforce')
call add(g:pathogen_disabled, 'project')
call add(g:pathogen_disabled, 'quicktask')
call add(g:pathogen_disabled, 'savevers')
call add(g:pathogen_disabled, 'schlepp')
call add(g:pathogen_disabled, 'sleuth')
call add(g:pathogen_disabled, 'sneak')
call add(g:pathogen_disabled, 'striptease')
call add(g:pathogen_disabled, 'surround')
call add(g:pathogen_disabled, 'table')
call add(g:pathogen_disabled, 'tabular')
call add(g:pathogen_disabled, 'taglist')
call add(g:pathogen_disabled, 'textabyss')
call add(g:pathogen_disabled, 'tlib')
call add(g:pathogen_disabled, 'tmux-navigator')
call add(g:pathogen_disabled, 'tmux_complete')
call add(g:pathogen_disabled, 'utl')
call add(g:pathogen_disabled, 'vim-diffchanges')
call add(g:pathogen_disabled, 'vim-dispatch')
call add(g:pathogen_disabled, 'vim-shell')
call add(g:pathogen_disabled, 'vim-support')
call add(g:pathogen_disabled, 'vim_airline')
call add(g:pathogen_disabled, 'vim_perforce')
call add(g:pathogen_disabled, 'vimux')
call add(g:pathogen_disabled, 'vmath')
call add(g:pathogen_disabled, 'vundle')
call add(g:pathogen_disabled, 'zoomwin')
call add(g:pathogen_disabled, 'splitjoin')
call add(g:pathogen_disabled, 'sexp')
call add(g:pathogen_disabled, 'lion')
call add(g:pathogen_disabled, 'rsi')
call add(g:pathogen_disabled, 'space')
call add(g:pathogen_disabled, 'visualGuide')
call add(g:pathogen_disabled, 'vimpanel')
call add(g:pathogen_disabled, 'vinegar')
call add(g:pathogen_disabled, 'startify')
call add(g:pathogen_disabled, 'colorcode')
call add(g:pathogen_disabled, 'tcomment')
call add(g:pathogen_disabled, 'fireplace')
call add(g:pathogen_disabled, 'maktaba')
call add(g:pathogen_disabled, 'unimpaired')
call add(g:pathogen_disabled, 'textobj-user')
call add(g:pathogen_disabled, 'textobj-function')
call add(g:pathogen_disabled, 'textobj-indent')
call add(g:pathogen_disabled, 'supertab')
call add(g:pathogen_disabled, 'jedi')
call add(g:pathogen_disabled, 'easytree')
call add(g:pathogen_disabled, 'filebeagle')
call add(g:pathogen_disabled, 'snipMate')
call add(g:pathogen_disabled, 'markdown-folding')
call add(g:pathogen_disabled, 'markdown')
call add(g:pathogen_disabled, 'checksyntax')
call add(g:pathogen_disabled, 'TextObjectify')
call add(g:pathogen_disabled, 'syntastic')
call add(g:pathogen_disabled, 'sensible')
call add(g:pathogen_disabled, 'ultiSnips')
call add(g:pathogen_disabled, 'slime')
call add(g:pathogen_disabled, 'shell-executor')
call add(g:pathogen_disabled, 'endwise')
call add(g:pathogen_disabled, 'smartinput')
call add(g:pathogen_disabled, 'slimux')
call add(g:pathogen_disabled, 'vimShell')
call add(g:pathogen_disabled, 'togglelist')
call add(g:pathogen_disabled, 'promptline')
call add(g:pathogen_disabled, 'ipython')
call add(g:pathogen_disabled, 'vipy')
call add(g:pathogen_disabled, 'cellmode')
call add(g:pathogen_disabled, 'tmux-runner')
call add(g:pathogen_disabled, 'tslime')
call add(g:pathogen_disabled, 'tslime_ipython')
call add(g:pathogen_disabled, 'afterimage')
"}}}1
"diabling plugins {{{1
" call add(g:pathogen_disabled, 'CSApprox')
" call add(g:pathogen_disabled, 'Command-T')
" call add(g:pathogen_disabled, 'FuzzyFinder')
" call add(g:pathogen_disabled, 'GoldenView')
" call add(g:pathogen_disabled, 'LargeFile')
" call add(g:pathogen_disabled, 'MultipleSearch')
" call add(g:pathogen_disabled, 'NERD_tree')
" call add(g:pathogen_disabled, 'PyScratch')
" call add(g:pathogen_disabled, 'Pydiction')
" call add(g:pathogen_disabled, 'TagmaTasks')
" call add(g:pathogen_disabled, 'TaskList')
" call add(g:pathogen_disabled, 'TextObjectify')
" call add(g:pathogen_disabled, 'VisIncr')
" call add(g:pathogen_disabled, 'YankRing')
" call add(g:pathogen_disabled, 'YouCompleteMe')
" call add(g:pathogen_disabled, 'abolish')
" call add(g:pathogen_disabled, 'ack')
" call add(g:pathogen_disabled, 'autocomplete')
" call add(g:pathogen_disabled, 'autohighlight')
" call add(g:pathogen_disabled, 'bluespec')
" call add(g:pathogen_disabled, 'bufexplorer')
" call add(g:pathogen_disabled, 'buffergator')
" call add(g:pathogen_disabled, 'buffergrep')
" call add(g:pathogen_disabled, 'bufkill')
" call add(g:pathogen_disabled, 'calendar')
" call add(g:pathogen_disabled, 'checkSyntax')
" call add(g:pathogen_disabled, 'checksyntax')
" call add(g:pathogen_disabled, 'chronos')
" call add(g:pathogen_disabled, 'coVim')
" call add(g:pathogen_disabled, 'colorSchemeDegrade')
" call add(g:pathogen_disabled, 'colorSchemeEx')
" call add(g:pathogen_disabled, 'color_ChasingLogic')
" call add(g:pathogen_disabled, 'color_FlatColor')
" call add(g:pathogen_disabled, 'color_badwolf')
" call add(g:pathogen_disabled, 'color_base16')
" call add(g:pathogen_disabled, 'color_bubblegum')
" call add(g:pathogen_disabled, 'color_colorschemes')
" call add(g:pathogen_disabled, 'color_distinguished')
" call add(g:pathogen_disabled, 'color_flatui')
" call add(g:pathogen_disabled, 'color_grb256')
" call add(g:pathogen_disabled, 'color_gruvbox')
" call add(g:pathogen_disabled, 'color_harlequin')
" call add(g:pathogen_disabled, 'color_hemisu')
" call add(g:pathogen_disabled, 'color_hybrid')
" call add(g:pathogen_disabled, 'color_laederon')
" call add(g:pathogen_disabled, 'color_lizard')
" call add(g:pathogen_disabled, 'color_luna')
" call add(g:pathogen_disabled, 'color_lunatic')
" call add(g:pathogen_disabled, 'color_noctu')
" call add(g:pathogen_disabled, 'color_seoul256')
" call add(g:pathogen_disabled, 'color_sol')
" call add(g:pathogen_disabled, 'color_solarized')
" call add(g:pathogen_disabled, 'color_tomorrow')
" call add(g:pathogen_disabled, 'color_tomorrow_theme')
" call add(g:pathogen_disabled, 'colorcode')
" call add(g:pathogen_disabled, 'colour_sampler_pack')
" call add(g:pathogen_disabled, 'commentary')
" call add(g:pathogen_disabled, 'compview')
" call add(g:pathogen_disabled, 'conque')
" call add(g:pathogen_disabled, 'context_filetype')
" call add(g:pathogen_disabled, 'cscope')
" call add(g:pathogen_disabled, 'csv')
" call add(g:pathogen_disabled, 'ctrlp')
" call add(g:pathogen_disabled, 'ctrlspace')
" call add(g:pathogen_disabled, 'cursorcross')
" call add(g:pathogen_disabled, 'delimitMate')
" call add(g:pathogen_disabled, 'diffchanges')
" call add(g:pathogen_disabled, 'diminactive')
" call add(g:pathogen_disabled, 'dirdiff')
" call add(g:pathogen_disabled, 'dragvisuals')
" call add(g:pathogen_disabled, 'easy_align')
" call add(g:pathogen_disabled, 'easymotion')
" call add(g:pathogen_disabled, 'easymotion_2')
" call add(g:pathogen_disabled, 'easytags')
" call add(g:pathogen_disabled, 'easytree')
" call add(g:pathogen_disabled, 'endwise')
" call add(g:pathogen_disabled, 'enmasse')
" call add(g:pathogen_disabled, 'eunuch')
" call add(g:pathogen_disabled, 'exchange')
" call add(g:pathogen_disabled, 'express')
" call add(g:pathogen_disabled, 'filebeagle')
" call add(g:pathogen_disabled, 'fireplace')
" call add(g:pathogen_disabled, 'fontmanager')
" call add(g:pathogen_disabled, 'fugitive')
" call add(g:pathogen_disabled, 'genutils')
" call add(g:pathogen_disabled, 'gundo')
" call add(g:pathogen_disabled, 'jedi')
" call add(g:pathogen_disabled, 'kolor')
" call add(g:pathogen_disabled, 'l9')
" call add(g:pathogen_disabled, 'linediff')
" call add(g:pathogen_disabled, 'lion')
" call add(g:pathogen_disabled, 'lose')
" call add(g:pathogen_disabled, 'maktaba')
" call add(g:pathogen_disabled, 'markdown')
" call add(g:pathogen_disabled, 'markdown-folding')
" call add(g:pathogen_disabled, 'matchTagAlways')
" call add(g:pathogen_disabled, 'matchit')
" call add(g:pathogen_disabled, 'minibufexpl')
" call add(g:pathogen_disabled, 'mru')
" call add(g:pathogen_disabled, 'multipleHilight')
" call add(g:pathogen_disabled, 'multiple_cursor')
" call add(g:pathogen_disabled, 'mw_utils')
" call add(g:pathogen_disabled, 'my_colors')
" call add(g:pathogen_disabled, 'narrow')
" call add(g:pathogen_disabled, 'neocomplcache')
" call add(g:pathogen_disabled, 'neocomplcache-ultisnips')
" call add(g:pathogen_disabled, 'neocomplete')
" call add(g:pathogen_disabled, 'neosnippet')
" call add(g:pathogen_disabled, 'nvbug')
" call add(g:pathogen_disabled, 'nvidia')
" call add(g:pathogen_disabled, 'orgmode')
" call add(g:pathogen_disabled, 'outline')
" call add(g:pathogen_disabled, 'over')
" call add(g:pathogen_disabled, 'p4python')
" call add(g:pathogen_disabled, 'pathogen')
" call add(g:pathogen_disabled, 'perforce')
" call add(g:pathogen_disabled, 'perl-support')
" call add(g:pathogen_disabled, 'perlOmni')
" call add(g:pathogen_disabled, 'perldoc')
" call add(g:pathogen_disabled, 'project')
" call add(g:pathogen_disabled, 'python')
" call add(g:pathogen_disabled, 'quicktask')
" call add(g:pathogen_disabled, 'rainbow_parentheses')
" call add(g:pathogen_disabled, 'repeat')
" call add(g:pathogen_disabled, 'rsi')
" call add(g:pathogen_disabled, 'savevers')
" call add(g:pathogen_disabled, 'schlepp')
" call add(g:pathogen_disabled, 'scratch')
" call add(g:pathogen_disabled, 'selective-undo')
" call add(g:pathogen_disabled, 'sensible')
" call add(g:pathogen_disabled, 'sexp')
" call add(g:pathogen_disabled, 'shell-executor')
" call add(g:pathogen_disabled, 'sleuth')
" call add(g:pathogen_disabled, 'sneak')
" call add(g:pathogen_disabled, 'snipMate')
" call add(g:pathogen_disabled, 'snippets')
" call add(g:pathogen_disabled, 'solarized')
" call add(g:pathogen_disabled, 'space')
" call add(g:pathogen_disabled, 'speeddating')
" call add(g:pathogen_disabled, 'splitjoin')
" call add(g:pathogen_disabled, 'startify')
" call add(g:pathogen_disabled, 'striptease')
" call add(g:pathogen_disabled, 'supertab')
" call add(g:pathogen_disabled, 'surround')
" call add(g:pathogen_disabled, 'syntastic')
" call add(g:pathogen_disabled, 'table')
" call add(g:pathogen_disabled, 'table-mode')
" call add(g:pathogen_disabled, 'tabpagecolorscheme')
" call add(g:pathogen_disabled, 'tabular')
" call add(g:pathogen_disabled, 'tagbar')
" call add(g:pathogen_disabled, 'taglist')
" call add(g:pathogen_disabled, 'targets')
" call add(g:pathogen_disabled, 'tbone')
" call add(g:pathogen_disabled, 'tcomment')
" call add(g:pathogen_disabled, 'textabyss')
" call add(g:pathogen_disabled, 'textobj')
" call add(g:pathogen_disabled, 'tlib')
" call add(g:pathogen_disabled, 'tmux-navigator')
" call add(g:pathogen_disabled, 'tmux_complete')
" call add(g:pathogen_disabled, 'ultisnips')
" call add(g:pathogen_disabled, 'undoTree')
" call add(g:pathogen_disabled, 'unimpaired')
" call add(g:pathogen_disabled, 'unite')
" call add(g:pathogen_disabled, 'unite_qfix')
" call add(g:pathogen_disabled, 'utl')
" call add(g:pathogen_disabled, 'verilog')
" call add(g:pathogen_disabled, 'verilog_systemverilog')
" call add(g:pathogen_disabled, 'vim-diffchanges')
" call add(g:pathogen_disabled, 'vim-dispatch')
" call add(g:pathogen_disabled, 'vim-expand-region')
" call add(g:pathogen_disabled, 'vim-misc')
" call add(g:pathogen_disabled, 'vim-shell')
" call add(g:pathogen_disabled, 'vim-support')
" call add(g:pathogen_disabled, 'vim_airline')
" call add(g:pathogen_disabled, 'vim_colors_babymate256')
" call add(g:pathogen_disabled, 'vim_indent_guides')
" call add(g:pathogen_disabled, 'vim_monokai')
" call add(g:pathogen_disabled, 'vim_nocturne')
" call add(g:pathogen_disabled, 'vim_perforce')
" call add(g:pathogen_disabled, 'vim_perforce_fork')
" call add(g:pathogen_disabled, 'vim_session')
" call add(g:pathogen_disabled, 'vimfiler')
" call add(g:pathogen_disabled, 'vimpanel')
" call add(g:pathogen_disabled, 'vimproc')
" call add(g:pathogen_disabled, 'vimux')
" call add(g:pathogen_disabled, 'vinegar')
" call add(g:pathogen_disabled, 'visualGuide')
" call add(g:pathogen_disabled, 'vmath')
" call add(g:pathogen_disabled, 'vundle')
" call add(g:pathogen_disabled, 'xml')
" call add(g:pathogen_disabled, 'yankstack')
" call add(g:pathogen_disabled, 'zoomwin')
"}}}1

set fillchars=fold:?
let g:crease_foldtext = { 'default': '+-%{repeat("-", v:foldlevel)} %l lines: %t ' }

if use_pathogen
  call pathogen#infect()
  call pathogen#helptags()
endif

" Neobundle {{{1
if use_neobundle
  if has('vim_starting')
    set runtimepath+=~/.vim/neobundle_bundle/neobundle
    if !isdirectory(expand('~/.vim/neobundle_bundle/neobundle'))
      echo "Installing NeoBundle\n"
      silent execute '!mkdir -p ~/.vim/neobundle_bundle'
      silent execute '!git clone https://github.com/Shougo/neobundle.vim ~/.vim/neobundle_bundle/neobundle'
    endif
  endif
  call neobundle#begin(expand('~/.vim/neobundle_bundle'))
  " if neobundle#load_cache()
    " Let NeoBundle manage NeoBundle
    " Required:
    NeoBundleFetch 'Shougo/neobundle.vim',                     { 'directory' : 'neobundle'}
    " My Bundles here:
    NeoBundle 'myXYZ',                                      { 'type' : 'nosync', 'base' : '~/.vim/bundle'}
    NeoBundle 'bluespec',                                      { 'type' : 'nosync', 'base' : '~/.vim/bundle'}
    NeoBundle 'deperl',                                      { 'type' : 'nosync', 'base' : '~/.vim/bundle'}
    NeoBundle 'my_colors',                                     { 'type' : 'nosync', 'base' : '~/.vim/bundle'}
    " NeoBundle 'nvidia',                                        { 'type' : 'nosync', 'base' : '~/.vim/bundle'}
    NeoBundle 'autohighlight',                                 { 'type' : 'nosync', 'disabled' : 1, 'base' : '~/.vim/bundle'}
    " NeoBundle 'nvbug',                                         { 'type' : 'nosync', 'disabled' : 1, 'base' : '~/.vim/bundle'}
    NeoBundle 'p4python',                                      { 'type' : 'nosync', 'disabled' : 1, 'base' : '~/.vim/bundle'}
    " NeoBundle 'visualGuide',                                   { 'type' : 'nosync', 'disabled' : 1, 'base' : '~/.vim/bundle'}
    "
    execute "NeoBundle 'Shougo/vimproc.vim', " . string({
      \ 'directory' : 'vimproc',
      \ 'build' : {
      \     'unix' : 'make -f make_unix.mak ARCHS=x86_64',
      \    },
      \ })
    " " " color {{{2 "
    " NeoBundle 'reedes/vim-thematic',                           { 'directory' : 'color_thematic'}
    NeoBundle 'UncleBill/prism.vim',                           { 'directory' : 'color_prism'}
    " NeoBundle 'caglartoklu/ftcolor.vim',                       { 'directory' : 'color_ftcolor'}
    " NeoBundle 'drewtempelmeyer/palenight.vim',                 { 'directory' : 'color_palenight'}
    " NeoBundle 'heraldofsolace/nisha-vim',                      { 'directory' : 'color_nisha'}
    " NeoBundle 'chuling/equinusocio-material.vim',                      { 'directory' : 'color_equinusocio_material'}
    " NeoBundle 'josegamez82/starrynight',                               { 'directory' : 'color_starrynight'}
    " " NeoBundle 'zefei/vim-colortuner',                          { 'directory' : 'colortuner'}
    " NeoBundle 'vim-scripts/Colour-Sampler-Pack',               { 'directory' : 'colour_sampler_pack'}
    NeoBundle 'flazz/vim-colorschemes',                        { 'directory' : 'colour_Fazz'}
    " NeoBundle 'McAuleyPenney/vim-dissonance',                  { 'directory' : 'colour_dissonance'}
    NeoBundle 'embark-theme/vim',                              { 'directory' : 'colour_embark'}
    NeoBundle 'habamax/vim-psionic',                           { 'directory' : 'colour_psionic'}
    NeoBundle 'habamax/vim-alchemist',                           { 'directory' : 'colour_alchemist'}
    NeoBundle 'habamax/vim-habanight',                           { 'directory' : 'colour_habanight'}
    NeoBundle 'habamax/vim-gruvbit',                           { 'directory' : 'colour_gruvbit'}
    NeoBundle 'habamax/vim-freyeday',                          { 'directory' : 'colour_freyeday'}
    NeoBundle 'habamax/vim-saturnite',                          { 'directory' : 'colour_saturnite'}
    " NeoBundle 'katawful/kat.vim',                               { 'directory' : 'colour_kat'}
    NeoBundle 'wojciechkepka/vim-github-dark',                  { 'directory' : 'colour_github_dark'}
    NeoBundle 'wojciechkepka/bogster',                          { 'directory' : 'colour_bogster'}
    NeoBundle 'tomasiser/vim-code-dark',                        { 'directory' : 'colour_vim_code_dark'}
    NeoBundle 'sainnhe/sonokai',                                { 'directory' : 'colour_sonokai'}
    NeoBundle 'romainl/Apprentice',                            { 'directory' : 'color_apprentice'}

    " NeoBundle 'edersonferreira/dalton-vim',                    { 'directory' : 'colour_dalton'}
    " NeoBundle 'adigitoleo/vim-mellow',                         { 'directory' : 'colour_mellow'}
    NeoBundle 'jsit/toast.vim',                                { 'directory' : 'color_toast'}
    " " NeoBundle 'idanko/peachpuff256mod',                        { 'directory' : 'colour_peachpuff256mod'}
    " NeoBundle 'sonph/onehalf',                 { 'directory' : 'colour_onehalf', 'rtp': 'vim'}
    " NeoBundle 'protesilaos/tempus-themes',                 { 'directory' : 'tempus_themes', 'rtp': 'vim', 'script_type' : 'colorscheme'}
    " NeoBundle 'relastle/bluewery.vim',         { 'directory' : 'colour_bluewery'}
    " " NeoBundle 'kyoz/purify',                 { 'directory' : 'colour_purify', 'rtp': 'vim'}
    " NeoBundle 'bluz71/vim-nightfly-guicolors', {'directory' : 'color_nightfly'}
    " NeoBundle 'arzg/vim-colors-xcode',         {'directory' : 'color_xcode'}
    " NeoBundle 'wimstefan/vim-artesanal',       {'directory' : 'color_artesanal'}
    " " NeoBundle 'rafalbromirski/vim-aurora',     {'directory' : 'color_aurora'}
    " " NeoBundle 'KKPMW/sacredforest-vim',                        { 'directory' : 'colour_sacredforest'}
    " " NeoBundle 'sainnhe/vim-color-forest-night',                { 'directory' : 'colour_forest_night'}
    " " NeoBundle 'victorze/foo',                                  { 'directory' : 'colour_foo'}
    " " NeoBundle 'benburrill/potato-colors',                      { 'directory' : 'colour_potato'}
    " " NeoBundle 'pgdouyon/vim-yin-yang',                      { 'directory' : 'colour_yinYang'}
    " " NeoBundle 'wmvanvliet/vim-blackboard',                      { 'directory' : 'colour_blackboard'}
    " " NeoBundle 'tjammer/blandon.vim',                           { 'directory' : 'colour_blandon'}
    " " NeoBundle 'abnt713/vim-hashpunk',                           { 'directory' : 'colour_hashPunk'}
    " " NeoBundle 'aparaatti/redish.vim',                          { 'directory' : 'colour_redish'}
    " " NeoBundle 'george-b/zenchrome',                            { 'directory' : 'colour_zenchrome'}
    " " NeoBundle 'Nequo/vim-allomancer',                          { 'directory' : 'colour_allomancer'}
    " " NeoBundle 'agudulin/vim-colors-alabaster',                 { 'directory' : 'colour_alabaster'}
    " NeoBundle 'tjammer/blayu.vim',                             { 'directory' : 'colour_blayu'}
    " " NeoBundle 'koirand/tokyo-metro.vim',                       { 'directory' : 'colour_tokyo'}
    " " NeoBundle 'DrXVII/vim_colors',                             { 'directory' : 'colour_edar_elit'}
    " " NeoBundle 'qqwaszxxx/vim-battlestation',                   { 'directory' : 'colour_battlestation'}
    " " NeoBundle 'whzup/greent.vim',                       { 'directory' : 'colour_greent'}
    " " NeoBundle 'julien/vim-colors-green',                { 'directory' : 'colour_green'}
    " " NeoBundle 'KimNorgaard/vim-frign',                { 'directory' : 'colour_frign'}
    " " NeoBundle 'jeffkreeftmeijer/vim-dim',                      { 'directory' : 'colour_dim'}
    " NeoBundle 'nightsense/rusticated',                         { 'directory' : 'colour_rusticated'}
    " NeoBundle 'rafi/awesome-vim-colorschemes',                 { 'directory' : 'colour_awesome'}
    " " NeoBundle 'BrainDeath0/Hypsteria',                         { 'directory' : 'colour_hypsteria'}
    " " NeoBundle 'rfunix/vim-greenisgood',                        { 'directory' : 'colour_greenIsGood'}
    " " NeoBundle 'vim-scripts/bw.vim',                            { 'directory' : 'colour_BW'}
    " " NeoBundle 'vim-scripts/Gummybears',                            { 'directory' : 'colour_GummyBears'}
    " " NeoBundle 'vim-scripts/oceanlight',                            { 'directory' : 'colour_OceanLight'}
    " NeoBundle 'hardcoreplayers/oceanic-material',                  { 'directory' : 'colour_oceanic_material'}
    " " NeoBundle 'wesgibbs/vim-irblack',                            { 'directory' : 'colour_irBlack'}
    " " NeoBundle 'vim-scripts/Ambient-Color-Scheme',                { 'directory' : 'colour_ambient'}
    " " NeoBundle 'abnt713/vim-hashpunk',                            { 'directory' : 'colour_hashpunk'}
    " " NeoBundle 'smallwat3r/vim-hashpunk-sw',                      { 'directory' : 'colour_hashpunk_sw'}
    " " NeoBundle 'srushti/my.vim',                                  { 'directory' : 'colour_my'}
    " " NeoBundle 'LuRsT/austere.vim',                               { 'directory' : 'colour_austere'}
    " " NeoBundle 'jliu2179/vim-dark-meadow',                            { 'directory' : 'colour_darkMeadow'}
    " " NeoBundle 'beikome/cosme.vim',                            { 'directory' : 'colour_cosme'}
    " " NeoBundle 'maksimr/Lucius2',                            { 'directory' : 'colour_Lucius2'}
    " NeoBundle 'rudrab/vim-coogle',                               { 'directory' : 'colour_coogle'}
    " " NeoBundle 'google/vim-colorscheme-primary',                  { 'directory' : 'colour_colorschemePrimary'}
    " " NeoBundle 'neutaaaaan/monosvkem',                            { 'directory' : 'colour_monosvkem'}
    " " NeoBundle 'smallwat3r/vim-mono_sw',                          { 'directory' : 'colour_mono_sw'}
    " " NeoBundle 'KKPMW/distilled-vim',                             { 'directory' : 'colour_distilled'}
    " " NeoBundle 'fenetikm/falcon',                               { 'directory' : 'colour_falcon'}
    " " NeoBundle 'treycucco/vim-monotonic',                       { 'directory' : 'colour_monotonic'}
    " " NeoBundle 'vim-scripts/Fruidle',                       { 'directory' : 'colour_Fruidle'}
    " " NeoBundle 'ducktape/monotone-termnial',                { 'directory' : 'colour_monotone'}
    " " NeoBundle 'dsalychev/firesparks',                      { 'directory' : 'colour_firesparks'}
    " " NeoBundle 'sfi0zy/atlantic-dark.vim',                       { 'directory' : 'colour_atlantic'}
    " " NeoBundle 'xdefrag/vim-beelzebub',                       { 'directory' : 'colour_beelzebub'}
    " " NeoBundle 'agreco/vim-citylights',                       { 'directory' : 'colour_citylights'}
    " " NeoBundle 'julien/vim-miniml',                       { 'directory' : 'colour_miniml'}
    " " NeoBundle 'haishanh/night-owl.vim',                       { 'directory' : 'colour_nightOwl'}
    " " NeoBundle 'kirecek/vim-kxxe256',                       { 'directory' : 'colour_kxxe256'}
    " " NeoBundle 'marlun/vim-starwars',                       { 'directory' : 'colour_starwars'}
    " " NeoBundle 'sts10/vim-pink-moon',                       { 'directory' : 'colour_Moon'}
    " " NeoBundle 'skreek/skeletor.vim',                           { 'directory' : 'colour_skeletor'}
    " NeoBundle 'nightsense/snow',                               { 'directory' : 'colour_snow'}
    " NeoBundle 'nightsense/stellarized',                        { 'directory' : 'colour_stellarized'}
    " " NeoBundle 'Jimeno0/vim-chito',                           { 'directory' : 'colour_chito'}
    " " NeoBundle 'Siphalor/vim-atomified',                      { 'directory' : 'colour_atomified'}
    " " NeoBundle 'TheAtlasEngine/PastelColors',                           { 'directory' : 'colour_PastelColors'}
    " " NeoBundle 'napcs/vim-mycontrast',                           { 'directory' : 'colour_myContrast'}
    " " NeoBundle 'phanviet/Sidonia',                           { 'directory' : 'colour_Sidonia'}
    " " NeoBundle 'kaicataldo/material.vim',                           { 'directory' : 'colour_material'}
    " " NeoBundle 'HenryNewcomer/vim-theme-papaya',                           { 'directory' : 'colour_papaya'}
    " " NeoBundle 'dim13/gocode.vim',                           { 'directory' : 'colour_gocode'}
    " " NeoBundle 'wolf-dog/nighted.vim',                           { 'directory' : 'colour_nighted'}
    " " NeoBundle 'wolf-dog/sceaduhelm.vim',                           { 'directory' : 'colour_sceaduhelm'}
    " " NeoBundle 'andreypopp/vim-colors-plain',                           { 'directory' : 'colour_plain'}
    " " NeoBundle 'aradunovic/perun.vim',                           { 'directory' : 'colour_perun'}
    " " NeoBundle 'vim-scripts/Relaxed-Green',                           { 'directory' : 'colour_RelaxedGreen'}
    " " NeoBundle 'nathanlong/vim-colors-writer',                           { 'directory' : 'colour_writer'}
    " " NeoBundle 'miconda/lucariox.vim',                           { 'directory' : 'colour_lucariox'}
    " " NeoBundle 'logico-dev/typewriter',                           { 'directory' : 'colour_typeWriter'}
    " " NeoBundle 'rsidhoum/bushfire',                           { 'directory' : 'colour_bushFire'}
    " " NeoBundle 'TroyFletcher/vim-colors-synthwave',                           { 'directory' : 'colour_synthwave'}
    " " NeoBundle 'soft-aesthetic/soft-era-vim',                           { 'directory' : 'colour_softEra'}
    " " NeoBundle 'lmintmate/blue-mood-vim',                           { 'directory' : 'colour_BloodMood'}
    " " NeoBundle 'HenryNewcomer/vim-theme-mutenight-scene',                           { 'directory' : 'colour_mutenightScene'}
    " " NeoBundle 'HenryNewcomer/vim-theme-underflow',                           { 'directory' : 'colour_underflow'}
    " " NeoBundle 'wimstefan/vim-artesanal',                           { 'directory' : 'colour_artesanal'}
    " " NeoBundle 'neutaaaaan/iosvkem',                            { 'directory' : 'colour_iosvkem'}
    " " NeoBundle 'edouardp/myob-colorscheme',                     { 'directory' : 'colour_myob'}
    " " NeoBundle 'AlessandroYorba/Libertine',                     { 'directory' : 'color_Libertine'}
    " " NeoBundle 'nightsense/vimspectr',                          { 'directory' : 'color_vimspectr'}
    " " NeoBundle 'sstallion/vim-wtf',                             { 'directory' : 'color_wtf'}
    " " NeoBundle 'protesilaos/prot16-vim',                        { 'directory' : 'color_prot16'}
    " NeoBundle 'joshdick/onedark.vim',                          { 'directory' : 'color_onedark'}
    " " NeoBundle 'enanajmain/vim-fault',                          { 'directory' : 'color_fault'}
    " " NeoBundle 'dsalychev/firesparks',                          { 'directory' : 'color_firesparks'}
    " " NeoBundle 'schickele/vim',                                 { 'directory' : 'color_fruchtig'}
    " " NeoBundle 'bf4/vim-dark_eyes',                             { 'directory' : 'color_darkEyes'}
    " " NeoBundle 'rstdnull/heman',                                { 'directory' : 'color_heman'}
    " " NeoBundle 'Alvarocz/vim-fresh',                            { 'directory' : 'color_fresh'}
    " " NeoBundle 'thenewvu/vim-colors-sketching',                            { 'directory' : 'color_sketching'}
    " " NeoBundle 'theJian/vim-fethoi',                            { 'directory' : 'color_fethoi'}
    " " NeoBundle 'Alvarocz/vim-northpole',                                { 'directory' : 'color_northpole'}
    " " NeoBundle 'beigebrucewayne/min_solo',                              { 'directory' : 'color_mini_solo'}
    " " NeoBundle 'yuttie/inkstained-vim',                                 { 'directory' : 'color_inkstained'}
    " " NeoBundle 'buc0/my-vim-colors',                                { 'directory' : 'color_bdconry'}
    " " NeoBundle 'hzchirs/vim-material',                        { 'directory' : 'colour_material'}
    " " NeoBundle 'emhaye/ceudah.vim',                           { 'directory' : 'colour_ceudah'}
    " " NeoBundle 'lowentwickler/dotfiles',                      { 'directory' : 'colour_alcheme'}
    " " NeoBundle 'jalvesaq/southernlights',                      { 'directory' : 'colour_southernlights'}
    " " NeoBundle 'Yggdroot/duoduo',                      { 'directory' : 'colour_duoduo'}
    " " NeoBundle 'thenewvu/vim-colors-blueprint',                      { 'directory' : 'colour_blueprint'}
    " " NeoBundle 'vim-scripts/DuoTones-Dark',                           { 'directory' : 'colour_DuoTonesDark'}
    " " NeoBundle 'hauleth/blame.vim',                           { 'directory' : 'colour_blame'}
    " " NeoBundle 'Heorhiy/VisualStudioDark.vim',                           { 'directory' : 'colour_VisualStudioDark'}
    " " NeoBundle 'Renxiuhu/vim-colorscheme-tatami',                           { 'directory' : 'colour_tatami'}
    " " NeoBundle 'felipesousa/rupza',                                         { 'directory' : 'colour_rupza'}
    " " NeoBundle 'dennougorilla/azuki.vim',                                   { 'directory' : 'colour_azuki'}
    " " NeoBundle 'ajmwagar/vim-deus',                                         { 'directory' : 'colour_deus'}
    " " NeoBundle 'archSeer/colibri.vim',                        { 'directory' : 'colour_colibri'}
    " " NeoBundle 'vim-scripts/tomatosoup.vim',                    { 'directory' : 'colour_tomatosoup'}
    " " NeoBundle 'vim-scripts/dante.vim',                    { 'directory' : 'colour_dante'}
    " " NeoBundle 'Badacadabra/vim-archery',                  { 'directory' : 'colour_archery'}
    " " NeoBundle 'Dru89/vim-adventurous',                    { 'directory' : 'colour_adventurous'}
    " " NeoBundle 'fcpg/vim-farout',                    { 'directory' : 'colour_farout'}
    " " NeoBundle 'nightsense/wonka',                    { 'directory' : 'colour_wonka'}
    " " NeoBundle 'nightsense/plumber',                    { 'directory' : 'colour_plumber'}
    " " NeoBundle 'nightsense/forgotten',                    { 'directory' : 'colour_forgotten'}
    " " NeoBundle 'nightsense/strawberry',                    { 'directory' : 'colour_strawberry'}
    " " NeoBundle 'nightsense/vrunchbang',                    { 'directory' : 'colour_vrunchbang'}
    " " NeoBundle 'nightsense/nemo',                             { 'directory' : 'colour_nemo'}
    " " NeoBundle 'nightsense/simplifysimplify',                 { 'directory' : 'colour_simplifysimplify'}
    " " NeoBundle 'nightsense/seagrey',                             { 'directory' : 'colour_seagrey'}
    " " NeoBundle 'nightsense/office',                             { 'directory' : 'colour_office'}
    " " NeoBundle 'nightsense/stellarized',                      { 'directory' : 'colour_stellarized'}
    " " NeoBundle 'nightsense/carbonized',                       { 'directory' : 'colour_carbonized'}
    " " NeoBundle 'nightsense/willy',                            { 'directory' : 'colour_willy'}
    " " NeoBundle 'nightsense/vim-crunchbang',                                { 'directory' : 'color_crunchbang'}
    " " NeoBundle 'nightsense/seabird',                                       { 'directory' : 'color_seabird'}
    " " NeoBundle 'nightsense/monoclassica',                                  { 'directory' : 'color_monoclassica'}
    " " NeoBundle 'tudurom/bleh.vim',                            { 'directory' : 'colour_bleh'}
    " " NeoBundle 'beigebrucewayne/skull-vim',                   { 'directory' : 'colour_skull'}
    " " NeoBundle 'Drogglbecher/vim-moonscape',                  { 'directory' : 'colour_moonscape'}
    " NeoBundle 'a10y/hacked_ayu.vim',              { 'directory' : 'colour_hacked'}
    " " NeoBundle 'baines/vim-colorscheme-thaumaturge',          { 'directory' : 'colour_thaumaturge'}
    " " NeoBundle 'chr4/jellygrass.vim',                         { 'directory' : 'colour_jellygrass'}
    " " NeoBundle 'ytet5uy4/abyss.vim',                          { 'directory' : 'colour_abyss'}
    " " NeoBundle 'yuttie/hydrangea-vim',                        { 'directory' : 'colour_hydrangea'}
    " " NeoBundle 'cideM/tinydark'                               { 'directory' : 'colour_tinydark'}
    " " NeoBundle 'beigebrucewayne/Turtles',                     { 'directory' : 'colour_Turtles'}
    " " NeoBundle 'Zabanaa/neuromancer.vim',                     { 'directory' : 'colour_neuromancer'}
    " " NeoBundle 'kudabux/vim-srcery-drk',                      { 'directory' : 'colour_srcrey_drk'}
    " " NeoBundle 'cnj4/horseradish256',                         { 'directory' : 'colour_horseradish256'}
    " " NeoBundle 'iKarith/tigrana',                             { 'directory' : 'colour_tigrana'}
    " " NeoBundle 'beigebrucewayne/Turtles',                     { 'directory' : 'colour_turtles'}
    " " NeoBundle 'float168/vim-colors-cherryblossom',           { 'directory' : 'colour_cherryblossom'}
    " " NeoBundle 'ajmwagar/vim-dues',                           { 'directory' : 'colour_dues'}
    " " NeoBundle 'bluz71/vim-moonfly-colors',                   { 'directory' : 'colour_moonfly'}
    " " NeoBundle 'NewProggie/NewProggie-Color-Scheme',                       { 'directory' : 'color_newProggie'}
    " " NeoBundle 'jakwings/vim-colors',                                       { 'directory' : 'color_jakwings'}
    " " NeoBundle 'prognostic/plasticine',                                     { 'directory' : 'color_plasticine'}
    " " NeoBundle 'preocanin/greenwint',                                       { 'directory' : 'color_greenwint'}
    " " NeoBundle 'dim13/xedit.vim',                                       { 'directory' : 'color_xedit'}
    " " NeoBundle 'dim13/smyck.vim',                                       { 'directory' : 'color_smyck'}
    " " NeoBundle 'sts10/vim-mustard',                                        { 'directory' : 'color_mustard'}
    " " NeoBundle 'sonjapeterson/1989.vim',                                   { 'directory' : 'color_1989'}
    " " NeoBundle 'jsit/disco.vim',                                           { 'directory' : 'color_disco'}
    " " NeoBundle 'AlessandroYorba/Absolute',                                 { 'directory' : 'Absolute'}
    " " NeoBundle 'sonobre/briofita_vim',                                     { 'directory' : 'briofita_vim'}
    " " NeoBundle 'saalaa/ancient-colors.vim',                                { 'directory' : 'color_ancient_colors'}
    " " NeoBundle 'lu-ren/SerialExperimentsLain',                             { 'directory' : 'color_SerialExperimentsLain'}
    " " NeoBundle 'google/vim-colorscheme-primary',                           { 'directory' : 'color_googleVimColor'}
    " " NeoBundle 'zakj/vim-mourning',                                { 'directory' : 'color_mourning'}
    " " NeoBundle 'aunsira/macvim-light',                             { 'directory' : 'color_MacVimLight'}
    " " NeoBundle 'exitface/synthwave.vim',                                { 'directory' : 'color_synthwave'}
    " " NeoBundle 'loshjawrence/magicka.vim',                              { 'directory' : 'color_magica'}
    " " NeoBundle 'semibran/vim-colors-synthetic',                              { 'directory' : 'color_synthetic'}
    " " NeoBundle 'schickele/vim-nachtleben',                                   { 'directory' : 'color_nachtleben'}
    " " NeoBundle 'fcpg/vim-orbital',                                         { 'directory' : 'color_orbital'}
    " " NeoBundle 'tokers/Magellan',                                          { 'directory' : 'color_magellan'}
    " " NeoBundle 'sirakij/macvim-light',                                     { 'directory' : 'color_macvimLight'}
    " " NeoBundle 'LanFly/vim-colors',                                        { 'directory' : 'color_lanFly'}
    " " NeoBundle 'carakan/new-railscasts-theme',                             { 'directory' : 'color_newRailcasts'}
    " NeoBundle 'ayu-theme/ayu-vim',                                        { 'directory' : 'color_ayu'}
    " " NeoBundle 'zcodes/vim-colors-basic',                                  { 'directory' : 'color_basic'}
    " " NeoBundle 'Elle518/Duna',                                           { 'directory' : 'color_duna'}
    " " NeoBundle 'caksoylar/vim-mysticaltutor',                            { 'directory' : 'color_mysticaktutor'}
    " " NeoBundle 'nightsense/cosmic_latte',                                { 'directory' : 'color_cosmic'}
    " " NeoBundle 'slugbyte/yuejiu',                                        { 'directory' : 'color_yuejiu'}
    " " NeoBundle 'dylanaraps/wal.vim',                            { 'directory' : 'color_wal'}
    " " NeoBundle 'danilo-augusto/vim-afterglow',                           { 'directory' : 'color_afterglow'}
    " " NeoBundle 'shattered/vimcolors',                                    { 'directory' : 'color_more'}
    " " NeoBundle 'tomasiser/vim-code-dark',                                { 'directory' : 'color_codeDark'}
    " " NeoBundle 'raggi/vim-color-raggi',                                  { 'directory' : 'color_raggi'}
    " " NeoBundle 'clinstid/eink.vim',                                      { 'directory' : 'color_eink'}
    " " NeoBundle 'smurfd/winterd',                                         { 'directory' : 'color_winterd'}
    " " NeoBundle 'ltlollo/diokai',                                         { 'directory' : 'color_diokai'}
    " " NeoBundle 'colepeters/spacemacs-theme.vim',                         { 'directory' : 'color_spacemacs_theme'}
    " " NeoBundle 'larsbs/vimterial',                                       { 'directory' : 'color_vimterial'}
    " " NeoBundle 'fneu/breezy',                                            { 'directory' : 'color_breezy'}
    " " NeoBundle 'stannous/vim-claritybeauty',                             { 'directory' : 'color_claritybeauty'}
    " " NeoBundle 'AlessandroYorba/Monrovia',                               { 'directory' : 'color_monrovia'}
    " " NeoBundle 'AlessandroYorba/Sidonia',                                { 'directory' : 'color_Sidonia'}
    " " NeoBundle 'vim-scripts/PapayaWhip',                                 { 'directory' : 'color_PapayaWhip'}
    " " NeoBundle 'davidklsn/vim-sialoquent',                               { 'directory' : 'color_sailoquent'}
    " " NeoBundle 'vim-scripts/ChocolateLiquor',                            { 'directory' : 'color_ChocolateLiquor'}
    " " NeoBundle 'smancill/darkglass',                                     { 'directory' : 'color_darkglass'}
    " " NeoBundle 'AlessandroYorba/Despacio',                               { 'directory' : 'color_despaco'}
    " " NeoBundle 'agude/vim-eldar',                                        { 'directory' : 'color_eldar'}
    " " NeoBundle 'monkoose/boa.vim',                                       { 'directory' : 'color_boa'}
    " " NeoBundle 'turly/vimstuff',                                         { 'directory' : 'color_stuff'}
    " " NeoBundle 'broduo/broduo-color-scheme',                             { 'directory' : 'color_broduo'}
    " " NeoBundle 'jansenfuller/crayon',                                    { 'directory' : 'color_crayon'}
    " " NeoBundle 'bruth/vim-newsprint-theme',                              { 'directory' : 'color_newsPrint'}
    " " NeoBundle 'crater2150/vim-theme-chroma',                            { 'directory' : 'color_chroma'}
    " " NeoBundle 'zanglg/nova.vim',                                        { 'directory' : 'color_nova'}
    " " NeoBundle 'davb5/wombat256dave',                                        { 'directory' : 'color_wombat256dave'}
    " " NeoBundle 'dikiaap/minimalist',                             { 'directory' : 'color_minimalist'}
    " " NeoBundle 'wolverian/minimal',                              { 'directory' : 'color_minimal'}
    " " NeoBundle 'zacanger/angr.vim',                              { 'directory' : 'color_angr'}
    " " NeoBundle 'encody/nvim',                                    { 'directory' : 'color_nvim'}
    " " NeoBundle 'zaki/zazen',                              { 'directory' : 'color_zazen'}
    " " NeoBundle 'KeitaNakamura/neodark.vim',                              { 'directory' : 'color_neodark'}
    " " NeoBundle 'rmnv/vim-simple-colors',                                 { 'directory' : 'color_simpleColors'}
    " " NeoBundle 'Blevs/vim-dzo',                                          { 'directory' : 'color_dzo'}
    " " NeoBundle 'rhysd/vim-color-shiny-white',                                          { 'directory' : 'color_shinyWhite'}
    " NeoBundle 'rhysd/vim-color-spring-night',                                         { 'directory' : 'color_springNight'}
    " " NeoBundle 'juanpabloaj/vim-pixelmuerto',                                          { 'directory' : 'color_pixelmuerto'}
    " " NeoBundle 'acoustichero/goldenrod.vim',                                          { 'directory' : 'color_goldenrod'}
    " " NeoBundle 'vim-scripts/calmar256-lightdark.vim',                                          { 'directory' : 'color_calmar'}
    " " NeoBundle 'arcticicestudio/nord-vim',                       { 'directory' : 'color_nord'}
    " " NeoBundle 'kamwitsta/nordisk',                              { 'directory' : 'color_nordisk'}
    " " NeoBundle 'kamwitsta/mythos',                              { 'directory' : 'color_mythos'}
    " " NeoBundle 'shawncplus/skittles_berry',                     { 'directory' : 'color_skittles_berry'}
    " " NeoBundle 'vim-scripts/habiLight',                         { 'directory' : 'color_shabiLight'}
    " " NeoBundle 'liuchengxu/space-vim-dark',                              { 'directory' : 'color_spaceVimDark'}
" NeoBundle 'liuchengxu/space-vim-theme',                             { 'directory' : 'color_spaceVimTheme'}
    " " NeoBundle 'yous/vim-open-color',                                    { 'directory' : 'color_OpenColor'}
    " " NeoBundle 'a-nikolaev/vim-boltzmann',                               { 'directory' : 'color_boltzmann'}
    " " NeoBundle 'tyrannicaltoucan/vim-quantum',                           { 'directory' : 'color_quantum'}
    " " NeoBundle 'taecilla/fairyfloss.vim',                                { 'directory' : 'color_fairyfloss'}
    " " NeoBundle 'albertocg/contrastneed-theme',                           { 'directory' : 'color_contrastneed'}
    " " NeoBundle 'bitterjug/vim-colors-bitterjug',                         { 'directory' : 'color_bitterjug'}
    " " NeoBundle 'AlessandroYorba/Despacio',                               { 'directory' : 'color_despacio'}
    " " NeoBundle 'muellan/am-colors',                                      { 'directory' : 'color_am'}
    " " NeoBundle 'hericks/vimicks',                                        { 'directory' : 'color_vimicks'}
    " " NeoBundle 'vim-scripts/kate.vim',                                   { 'directory' : 'color_kate'}
    " " NeoBundle 'vim-scripts/borland.vim',                                { 'directory' : 'color_borland'}
    " " NeoBundle 'ianremmler/frood',                                       { 'directory' : 'color_frood'}
    " " NeoBundle 'akutschi/vim-colokschi',                                 { 'directory' : 'color_colokschi'}
    " " NeoBundle 'andbar-ru/vim-unicon',                                   { 'directory' : 'color_unicorn'}
    " " NeoBundle 'philpl/vim-adventurous',                                 { 'directory' : 'color_adventurous'}
    " " NeoBundle 'justb3a/vim-smarties',                                   { 'directory' : 'color_smarties'}
    " " NeoBundle 'muellan/am-colors',                                      { 'directory' : 'color_am'}
    " " NeoBundle 'mbbill/vim-seattle',                                     { 'directory' : 'color_seattle'}
    " " NeoBundle 'acoustichero/simple_dark',                                { 'directory' : 'color_simple_dark'}
    " " NeoBundle 'RussellBradley/vim-lakers-away',                         { 'directory' : 'color_lakers_away'}
    " " NeoBundle 'RussellBradley/vim-spurs-away',                          { 'directory' : 'color_spurs_away'}
    " " NeoBundle 'RussellBradley/vim-nets-away',                           { 'directory' : 'color_nets_away'}
    " " NeoBundle 'RussellBradley/vim-rockets-away',                        { 'directory' : 'color_rockets_away'}
    " " NeoBundle 'lifepillar/vim-wwdc16-theme',                            { 'directory' : 'color_wwdc_16'}
    " " NeoBundle 'lifepillar/vim-wwdc17-theme',                            { 'directory' : 'color_wwdc_17'}
    " " NeoBundle 'shaond/vim-guru',                                        { 'directory' : 'color_guru'}
    " NeoBundle 'jacoborus/tender.vim',                                   { 'directory' : 'color_tender'}
    " " NeoBundle 'xero/blaquemagick.vim',                                  { 'directory' : 'color_blaquemagick'}
    " " NeoBundle 'ryanpcmcquen/true-monochrome_vim',                       { 'directory' : 'color_TrueMonochrome'}
    " " NeoBundle 'owickstrom/vim-colors-paramount',                        { 'directory' : 'color_paramount'}
    " " NeoBundle 'sherifkandeel/vim-colors',                               { 'directory' : 'color_vimBrains'}
    " " NeoBundle 'vim345/vim',                                             { 'directory' : 'color_mohammad'}
    " " NeoBundle 'tstelzer/welpe.vim',                                     { 'directory' : 'color_welpe'}
    " " NeoBundle 'Marfisc/vorange',                                        { 'directory' : 'color_vorange'}
    " " NeoBundle 'vim-scripts/sift',                                       { 'directory' : 'color_sift'}
    " " NeoBundle 'amadeus/vim-evokai',                                     { 'directory' : 'color_evokai'}
    " " NeoBundle 'limadm/vim-blues',                                       { 'directory' : 'color_blues'}
    " " NeoBundle 'dfrunza/vim',                                            { 'directory' : 'color_BlueSmoke'}
    " " NeoBundle 'tristanheaven/vim-colorscheme-aquamarine',               { 'directory' : 'color_aquamarine'}
    " " NeoBundle 'lanox/lanox-vim-theme',                                  { 'directory' : 'color_lanox'}
    " " NeoBundle 'drzaal/vert-laiton',                                     { 'directory' : 'color_laiton'}
    " " NeoBundle 'RussellBradley/vim-celtics-away'                         { 'directory' : 'color_celtics'}
    " " NeoBundle 'bounceme/base.vim',                                      { 'directory' : 'color_base'}
    " " NeoBundle 'pbrisbin/vim-colors-off',                                { 'directory' : 'color_off'}
    " " NeoBundle 'zandrmartin/vim-distill',                                { 'directory' : 'color_distill'}
    " " NeoBundle 'robertmeta/nofrils',                                      { 'directory' : 'color_nofrils'}
    " " NeoBundle 'marciomazza/vim-brogrammer-theme',                        { 'directory' : 'color_brogrammer'}
    " " NeoBundle 'vim-scripts/tidy',                                        { 'directory' : 'color_tidy'}
    " " NeoBundle 'GertjanReynaert/cobalt2-vim-theme',                      { 'directory' : 'color_cobalt2'}
    " " NeoBundle 'herrbischoff/cobalt2.vim',                               { 'directory' : 'color_cobalt22'}
    " " NeoBundle 'gkjgh/cobalt',                                           { 'directory' : 'color_cobalt'}
    " " NeoBundle 'AlessandroYorba/Alduin',                                 { 'directory' : 'color_alduin'}
    " " NeoBundle 'easysid/mod8.vim',                                       { 'directory' : 'color_mod8'}
    " " NeoBundle 'AlessandroYorba/Sierra',                                 { 'directory' : 'color_sierra'}
    " " NeoBundle 'pkukulak/idle',                                          { 'directory' : 'color_idle'}
    " " NeoBundle 'mhinz/vim-janah',                                        { 'directory' : 'color_janah'}
    " " NeoBundle 'ninja/sky',                                              { 'directory' : 'color_sky'}
    " " NeoBundle 'GGalizzi/cake-vim',                                      { 'directory' : 'color_cake'}
    " " NeoBundle 'Konstruktionist/vim',                                    { 'directory' : 'color_kafka'}
    " " NeoBundle 'cseelus/vim-colors-tone',                                { 'directory' : 'color_tone'}
    " " NeoBundle 'AlessandroYorba/Alduin',                                 { 'directory' : 'color_alduin'}
    " " NeoBundle 'marcopaganini/mojave-vim-theme',                         { 'directory' : 'color_mojave'}
    " NeoBundle 'mswift42/vim-themes',                                    { 'directory' : 'color_vim_themes'}
    " " NeoBundle 'emacsfodder/emacs-theme-darktooth',                      { 'directory' : 'color_darktooth'}
    " " NeoBundle 'Valloric/vim-valloric-colorscheme',                      { 'directory' : 'color_valloric'}
    " " NeoBundle 'trevorrjohn/vim-obsidian',                               { 'directory' : 'color_obsidian'}
    " " NeoBundle 'vim-scripts/obsidian2.vim',                              { 'directory' : 'color_obsidian2'}
    " " NeoBundle 'changyuheng/color-scheme-holokai-for-vim',               { 'dictctory' : 'color_holokai'}
    " " NeoBundle 'atelierbram/vim-colors_duotones',                        { 'dictctory' : 'color_duotones'}
    " " NeoBundle 'michalbachowski/vim-wombat256mod',                       { 'dictctory' : 'color_wombat256mod'}
    " " NeoBundle 'the31k/vim-colors-tayra',                                { 'dictctory' : 'color_tyra'}
    " " NeoBundle 'deepanchor/enigma.vim',                                  { 'dictctory' : 'color_enigma'}
    " " NeoBundle 'rakr/vim-rakr-light',                           { 'directory' : 'color_rakr_light'}
    " " NeoBundle 'rakr/vim-colors-rakr',                          { 'directory' : 'color_vim_rakr'}
    " " NeoBundle 'adampasz/vim-stonewashed',                      { 'directory' : 'color_stonewashed'}
    " " NeoBundle 'andreasvc/vim-256noir',                         { 'directory' : 'color_256noir'}
    " " NeoBundle 'wellsjo/wellsokai.vim',                         { 'directory' : 'color_wellsokai'}
    " " NeoBundle 'petelewis/vim-evolution',                       { 'directory' : 'color_evolution'}
    " " NeoBundle 'endel/vim-github-colorscheme',                  { 'directory' : 'color_github'}
    " " NeoBundle 'albertorestifo/github.vim',                     { 'directory' : 'color_github2'}
    " " NeoBundle 'jyota/vimColors',                               { 'directory' : 'color_vimColors'}
    " " NeoBundle 'pojo/magicwb.vim',                              { 'directory' : 'color_magicwb'}
    " " NeoBundle 'ikaros/smpl-vim',                               { 'directory' : 'color_smpl'}
    " " NeoBundle 'josuegaleas/jay',                                        { 'directory' : 'color_jay'}
    " " NeoBundle 'jdsimcoe/abstract.vim',                                  { 'directory' : 'color_abstract'}
    " " NeoBundle 'szorfein/fromthehell.vim',                                  { 'directory' : 'color_fromthehell'}
    " " NeoBundle 'szorfein/fantasy.vim',                                  { 'directory' : 'color_fantasy'}
    " " NeoBundle 'szorfein/darkest-space',                      { 'directory' : 'colour_darkest'}
    " NeoBundle 'tomasr/molokai',                                { 'directory' : 'color_molokai'}
    " NeoBundle 'protesilaos/tempus-themes-vim',                 { 'directory' : 'color_tempus'}
    " NeoBundle 'fcevado/molokai_dark',                          { 'directory' : 'color_molokaiDark'}
    " " NeoBundle 'ErichDonGubler/vim-sublime-monokai',            { 'directory' : 'color_sublimeMonokai'}
    NeoBundle 'phanviet/vim-monokai-pro',                           { 'directory' : 'colour_MonokaiPro'}
    " " NeoBundle 'patstockwell/vim-monokai-tasty',                     { 'directory' : 'colour_MonokaiTasty'}
    " " NeoBundle 'vim-scripts/molokai',                           { 'directory' : 'color_molokai'}
    " " NeoBundle 'alirezabashyri/molokai-italic',                 { 'directory' : 'color_molokai_italic'}
    " NeoBundle 'joedicastro/vim-molokai256',                    { 'directory' : 'color_molokai256'}
    " NeoBundle 'dunckr/vim-monokai-soda',                                { 'directory' : 'color_molokaiSoda'}
    " NeoBundle 'skielbasa/vim-material-monokai',                           { 'directory' : 'colour_materialMonokai'}
    " NeoBundle 'reewr/vim-monokai-phoenix',                              { 'directory' : 'color_molokaiPhoenix'}
    " " NeoBundle 'sickill/vim-monokai',                     { 'directory' : 'color_Sublimemonokai'}
    " NeoBundle 'crusoexia/vim-monokai',                     { 'directory' : 'color_monokai2'}
    " " NeoBundle 'justinmk/molokai',                          { 'directory' : 'color_molokai2'}
    " " NeoBundle 'x1596357/vim',                                  { 'directory' : 'color_molokai_dark'}
    " " NeoBundle 'mkarmona/materialbox',                          { 'directory' : 'color_materialbox'}
    " " NeoBundle 'Donearm/Ubaryd',                                { 'directory' : 'color_Ubaryd'}
    " " NeoBundle 'Donearm/Laederon',                                { 'directory' : 'color_Laederon'}
    " " NeoBundle 'Haron-Prime/Antares',                           { 'directory' : 'color_Antares'}
    " " NeoBundle 'loogica/vim_themes',                            { 'directory' : 'color_loogica'}
    " " NeoBundle 'MaxSt/FlatColor',                               { 'directory' : 'color_FlatColor'}
    " " NeoBundle 'DrSpatula/vim-buddy',                           { 'directory' : 'color_buddy'}
    " " NeoBundle 'vim-scripts/BackgroundColor.vim',               { 'directory' : 'BackgroundColor'}
    " " NeoBundle 'zenorocha/dracula-theme',                       { 'directory' : 'color_dracula_theme', 'rtp' : 'vim/'}
    " NeoBundle 'dracula/vim',                                   { 'directory' : 'color_dracula'}
    " NeoBundle 'kadekillary/Turtles',                           { 'directory' : 'color_Turtles'}
    " " NeoBundle 'romainl/vim-dichromatic',                       { 'directory' : 'color_dichromatic'}
    " " NeoBundle 'christophermca/meta5',                          { 'directory' : 'color_meta5'}
    " " NeoBundle 'Wutzara/vim-materialtheme',                     { 'directory' : 'color_materialtheme'}
    " " NeoBundle 'gwutz/vim-materialtheme',                       { 'directory' : 'color_materialtheme2'}
    " " NeoBundle 'jscappini/material.vim',                        { 'directory' : 'color_material'}
    " " " NeoBundle 'dylanaraps/crayon',                             { 'directory' : 'color_crayon'}
    " " NeoBundle 'queyenth/oxeded.vim',                           { 'directory' : 'color_oxeded'}
    " " NeoBundle 'fabi1cazenave/kalahari.vim',                    { 'directory' : 'color_kalahari'}
    " " NeoBundle 'wimstefan/Lightning',                           { 'directory' : 'color_Lightning'}
    " " NeoBundle 'effkay/argonaut.vim',                           { 'directory' : 'color_argonaut'}
    " " NeoBundle 'znake/znake-vim',                               { 'directory' : 'color_termcolor'}
    " " NeoBundle 'trusktr/seti.vim',                              { 'directory' : 'color_seti'}
    " " NeoBundle 'severb/monoacc',                                { 'directory' : 'color_monacc'}
    " " " NeoBundle 'erezsh/erezvim',                                { 'directory' : 'color_erezvim'}
    " " NeoBundle 'jlesquembre/peaksea',                           { 'directory' : 'color_peaksea'}
    " " NeoBundle 'scheakur/vim-scheakur',                         { 'directory' : 'color_scheakur'}
    " " NeoBundle 'bdd/.vim',                                      { 'directory' : 'color_noclown'}
    " " NeoBundle 'gryftir/gryffin',                               { 'directory' : 'color_gryffin'}
    " " NeoBundle 'toupeira/vim-desertink',                        { 'directory' : 'color_desertink'}
    " " NeoBundle 'theWildSushii/SweetCandy.vim',                  { 'directory' : 'color_sweetCandy'}
    " " NeoBundle 'hachy/eva01.vim',                               { 'directory' : 'color_eva01'}
    " " NeoBundle 'binarypie/vim-termcolor',                       { 'directory' : 'color_termcolor'}
    " " NeoBundle 'marcopaganini/termschool-vim-theme',            { 'directory' : 'color_termschool'}
    NeoBundle 'mhartington/oceanic-next',                      { 'directory' : 'color_oceanic'} 
    " " NeoBundle 'aperezdc/vim-elrond',                           { 'directory' : 'color_elrond'}
    " " NeoBundle 'geetarista/ego.vim',                            { 'directory' : 'color_ego'}
    " " NeoBundle 'ewilazarus/preto',                              { 'directory' : 'color_preto'}
    " " NeoBundle 'kocakosm/hilal',                                { 'directory' : 'color_hilal'}
    " " NeoBundle 'andrwb/vim-lapis256',                           { 'directory' : 'color_lapis256'}
    " " NeoBundle 'yantze/pt_black',                               { 'directory' : 'color_pt_black'}
    " " NeoBundle 'ratazzi/blackboard.vim',                        { 'directory' : 'color_blackboard'}
    " " NeoBundle 'cdmedia/itg_flat_vim',                          { 'directory' : 'color_itg_flat'}
    " " NeoBundle 'stulzer/heroku-colorscheme',                    { 'directory' : 'color_heroku'}
    " " NeoBundle 'sandeepsinghmails/Dev_Delight',                 { 'directory' : 'color_DevDelight'}
    " " NeoBundle 'fmoralesc/molokayo',                            { 'directory' : 'color_molokaya'}
    " " NeoBundle 'penicolas/simplon.vim',                         { 'directory' : 'color_simplon'}
    " " NeoBundle 'ajh17/Spacegray.vim',                           { 'directory' : 'color_Spacegray'}
    " " NeoBundle 'jonathanfilip/vim-lucius',                      { 'directory' : 'color_lucius'}
    " " NeoBundle 'vim-scripts/wintersday.vim',                    { 'directory' : 'color_wintersday'}
    " " NeoBundle 'romainl/flattened',                             { 'directory' : 'color_flattened'}
    " " NeoBundle 'yantze/vt_tmux',                                { 'directory' : 'color_vt_tmux'}
    " " NeoBundle 'goirijo/vim-jgg-colorscheme',                   { 'directory' : 'color_jgg'}
    " " NeoBundle 'alexjgriffin/sprinkles',                        { 'directory' : 'color_sprinkles'}
    " " NeoBundle 'yamafaktory/lumberjack.vim',                    { 'directory' : 'color_lumberjack'}
    " " NeoBundle 'benjaminwhite/Benokai',                         { 'directory' : 'color_benokai'}
    " " NeoBundle 'CruizeMissile/Revolution.vim',                  { 'directory' : 'color_Revolution'}
    " " NeoBundle 'sonjapeterson/1989.vim',                        { 'directory' : 'color_1989'}
    " " NeoBundle 'AlexMax/.vim',                                  { 'directory' : 'color_one_sunBurst'}
    " " NeoBundle 'hhsnopek/vim-firewatch',                        { 'directory' : 'color_firewatch'}
    " " NeoBundle 'juanedi/predawn.vim',                           { 'directory' : 'color_predawn'}
    " " NeoBundle 'nice/sweater',                                  { 'directory' : 'color_sweater'}
    " " NeoBundle 'whatyouhide/vim-gotham',                        { 'directory' : 'color_gotham'}
    " " NeoBundle 'ChasingLogic/ChasingLogic-colorscheme-vim',     { 'directory' : 'color_ChasingLogic'}
    " " NeoBundle 'Donearm/Laederon',                              { 'directory' : 'color_laederon'}
    " " " NeoBundle 'IntuitiveWebSolutions/vim-colors-blayden',      { 'directory' : 'color_blayden'}
    NeoBundle 'franbach/miramare',                             { 'directory' : 'color_miramare'}
    NeoBundle 'Lokaltog/vim-distinguished',                    { 'directory' : 'color_distinguished'}
    " " NeoBundle 'MaxSt/FlatColor',                               { 'directory' : 'color_FlatColor'}
    " " NeoBundle 'notpratheek/vim-luna',                              { 'directory' : 'color_luna'}
    " " NeoBundle 'notpratheek/vim-sol',                               { 'directory' : 'color_sol'}
    " " NeoBundle 'eduardoHoefel/VimMatrixTheme',                      { 'directory' : 'color_matrix'}
    " NeoBundle 'kshenoy/vim-sol',                               { 'directory' : 'color_sol2'}
    " " NeoBundle 'altercation/vim-colors-solarized',              { 'directory' : 'color_solarized'}
    " " NeoBundle 'lifepillar/vim-solarized8',                     { 'directory' : 'color_solarized8'}
    " " NeoBundle 'ericbn/vim-solarized',                          { 'directory' : 'color_vimSolarized'}
    " " NeoBundle 'baskerville/bubblegum',                         { 'directory' : 'color_bubblegum'}
    " " NeoBundle 'baverman/vim-babymate256',                      { 'directory' : 'color_babymate256'}
    " " NeoBundle 'cabin/cabin-colorscheme',                       { 'directory' : 'color_cabin'}
    " " NeoBundle 'blueyed/xoria256.vim',                          { 'directory' : 'color_xoria256'}
    " " NeoBundle 'vim-scripts/xoria256.vim',                      { 'directory' : 'color_xoria256_2'}
    " " " NeoBundle 'jlund3/colorschemer',                           { 'directory' : 'color_colorschemer'}
    " " NeoBundle 'elmindreda/vimcolors',                          { 'directory' : 'color_elmindreda'}
    " " NeoBundle 'vim-scripts/vibrantink',                        { 'directory' : 'color_vibrantink'}
    " " NeoBundle 'orthecreedence/void.vim',                       { 'directory' : 'color_void'}
    " " NeoBundle 'thewatts/wattslandia',                          { 'directory' : 'color_wattslandia'}
    " " NeoBundle 'kreeger/benlight',                              { 'directory' : 'color_benlight'}
    " " NeoBundle 'jaimebuelta/jaime-vim-colorscheme',             { 'directory' : 'color_jaime'}
    " " NeoBundle 'reinecke/vim-cgpro',                            { 'directory' : 'color_cgpro'}
    " " NeoBundle 'fent/vim-frozen',                               { 'directory' : 'color_frozen'}
    " " NeoBundle 'blackgate/tropikos-vim-theme',                  { 'directory' : 'color_tropikos'}
    NeoBundle 'kristijanhusak/vim-hybrid-material',            { 'directory' : 'color_hybrid_material'}
    " " NeoBundle 'ivan-cukic/vim-colors-penultimate',             { 'directory' : 'color_penultimate'}
    " " NeoBundle 'bruschill/madeofcode',                          { 'directory' : 'color_madeOfCode'}
    " " NeoBundle 'AlexMax/.vim',                                  { 'directory' : 'color_Sunburst'}
    " " NeoBundle 'demorose/up.vim',                               { 'directory' : 'color_up'}
    " " NeoBundle 'h3xx/vim-late_evening',                         { 'directory' : 'color_lateEvening'}
    " " NeoBundle 'carlobaldassi/vim-colorschemedegrade',          { 'directory' : 'colorSchemeDegrade'}
    " " NeoBundle 'chreekat/vim-colors-lunatic',                   { 'directory' : 'color_lunatic'}
    " " NeoBundle 'metalelf0/base16-black-metal-scheme',           { 'directory' : 'color_base16_black_metal'}
    " " NeoBundle 'ajgrf/parchment',                             { 'directory' : 'color_parchment'}
    NeoBundle 'chriskempson/base16-vim',                       { 'directory' : 'color_base16'}
    " " NeoBundle 'chriskempson/vim-tomorrow-theme',               { 'directory' : 'color_tomorrow_theme'}
    " " NeoBundle 'csexton/tomorrow-theme.vim',                    { 'directory' : 'color_tomorrow'}
    " " NeoBundle '1995parham/tomorrow-night-vim',                 { 'directory' : 'color_tomorrow_night'}
    " " NeoBundle 'euclio/vim-nocturne',                           { 'directory' : 'color_nocturne'}
    " " NeoBundle 'gmarik/ingretu',                                { 'directory' : 'color_ingretu'}
    " " NeoBundle 'jasonlong/lavalamp',                            { 'directory' : 'color_lavalamp'}
    " " NeoBundle 'jasoncarr0/sidewalk-colorscheme',               { 'directory' : 'color_sidewalk'}
    " " NeoBundle 'plan9-for-vimspace/acme-colors',                { 'directory' : 'color_acme'}
    " " NeoBundle 'jeetsukumaran/vim-mochalatte',                  { 'directory' : 'color_mochalatte'}
    " " NeoBundle 'john2x/flatui.vim',                             { 'directory' : 'color_flatui'}
    " " NeoBundle 'junegunn/seoul256.vim',                         { 'directory' : 'color_seoul256'}
    NeoBundle 'sainnhe/gruvbox-material',                      { 'directory' : 'color_gruvboxMaterial'}
    NeoBundle 'morhetz/gruvbox',                               { 'directory' : 'color_gruvbox'}
    " " NeoBundle 'nanotech/jellybeans.vim',                       { 'directory' : 'color_jellybeans'}
    " NeoBundle 'nielsmadan/harlequin',                          { 'directory' : 'color_harlequin'}
    " " NeoBundle 'noahfrederick/vim-hemisu',                      { 'directory' : 'color_hemisu'}
    " " NeoBundle 'noahfrederick/vim-noctu',                       { 'directory' : 'color_noctu'}
    " " NeoBundle 'quanganhdo/grb256',                             { 'directory' : 'color_grb256'}
    " " NeoBundle 'rking/vim-detailed',                            { 'directory' : 'color_detailed'}
    " " NeoBundle 'RussellBradley/vim-kings-away',                 { 'directory' : 'color_kings'}
    " NeoBundle 'sjl/badwolf',                                   { 'directory' : 'color_badwolf'}
    " " NeoBundle 'tpope/vim-vividchalk',                          { 'directory' : 'color_vividchalk'}
    " " NeoBundle 'vim-scripts/Atom',                              { 'directory' : 'color_atom'}
    " " NeoBundle 'gosukiwi/vim-atom-dark',                        { 'directory' : 'color_atom_dark'}
    " " NeoBundle 'vim-scripts/Zenburn',                           { 'directory' : 'color_Zenburn'}
    " " NeoBundle 'vim-scripts/tir_black',                         { 'directory' : 'color_tir_black'}
    " " NeoBundle 'vim-scripts/xterm16.vim',                       { 'directory' : 'color_xterm16'}
    " NeoBundle 'w0ng/vim-hybrid',                               { 'directory' : 'color_hybrid'}
    " " NeoBundle 'scwood/vim-hybrid',                             { 'directory' : 'color_hybrid2'}
    " " NeoBundle 'zeis/vim-kolor',                                { 'directory' : 'color_kolor'}
    " " NeoBundle 'jeetsukumaran/vim-nefertiti',                   { 'directory' : 'color_nefertiti'}
    " " NeoBundle 'itchyny/landscape.vim',                         { 'directory' : 'color_landscape'}
    " " NeoBundle 'jaxbot/semantic-highlight.vim',                 { 'directory' : 'color_semantic-highligh', 'autoload' : {'commands' : ['SemanticHighlight']}}
    " " NeoBundle 'laserswald/chameleon.vim',                      { 'directory' : 'color_chameleon'}
    " " NeoBundle 'cohlin/vim-colorschemes',                       { 'directory' : 'color_pyDracula_xcode'}
    " " NeoBundle 'JaySandhu/xcode-vim',                           { 'directory' : 'color_xcode'}
    " " NeoBundle 'TheNicholsOfCharroth/VIM_Themes',               { 'directory' : 'color_Jeager'}
    " " NeoBundle 'jethrovt/vim-basal-colorscheme',                { 'directory' : 'color_basal'}
    " " NeoBundle 'gummesson/stereokai.vim',                       { 'directory' : 'color_stereokai'}
    " " NeoBundle 'jonstoler/werewolf.vim',                        { 'directory' : 'color_warewolf'}
    " " NeoBundle 'carlson-erik/wolfpack',                         { 'directory' : 'color_wolfpack'}
    " " " NeoBundle 'amdt/sunset',                                   { 'directory' : 'color_sunset'}
    " " NeoBundle 'luckydev/150colors',                            { 'directory' : 'color_150colors'}
    " NeoBundle 'ujihisa/tabpagecolorscheme',                    { 'directory' : 'tabpagecolorscheme'}
    " " NeoBundle 'zefei/cake16',                                  { 'directory' : 'color_cake16'}
    " " NeoBundle 'duythinht/vim-coffee',                          { 'directory' : 'color_coffee'}
    " NeoBundle 'freeo/vim-kalisi',                              { 'directory' : 'color_kalisi'}
    " " NeoBundle 'daddye/soda.vim',                               { 'directory' : 'color_soda'}
    " " NeoBundle 'vim-scripts/saturn.vim',                        { 'directory' : 'color_saturn'}
    " " NeoBundle 'romainl/Disciple',                              { 'directory' : 'color_disciple'}
    " " NeoBundle 'lucy/term.vim',                                 { 'directory' : 'color_lucy'}
    " " NeoBundle 'vim-scripts/Perfect-Dark',                      { 'directory' : 'color_PerfectDark'}
    " " " NeoBundle 'kossnocorp/perfect.vim',                        { 'directory' : 'color_perfect'}
    " " NeoBundle 'gregsexton/Gravity',                            { 'directory' : 'color_gravity'}
    " " NeoBundle 'vim-scripts/Visual-Studio',                     { 'directory' : 'color_visual_studio'}
    " " NeoBundle 'nelstrom/vim-mac-classic-theme',                { 'directory' : 'color_mac_classic'}
    " " NeoBundle 'goatslacker/mango.vim',                         { 'directory' : 'color_mango'}
    " " NeoBundle 'reedes/vim-colors-pencil',                      { 'directory' : 'color_pencil'}
    " " NeoBundle 'iissnan/tangoX',                                { 'directory' : 'color_tangox'}
    " " NeoBundle 'vim-scripts/earendel',                          { 'directory' : 'color_earendel'}
    " " NeoBundle 'vim-scripts/neutron.vim',                       { 'directory' : 'color_neutron'}
    " " NeoBundle 'vim-scripts/sonoma.vim',                        { 'directory' : 'color_sonoma'}
    " " NeoBundle 'Junza/Spink',                                   { 'directory' : 'color_spink'}
    " " NeoBundle 'vim-scripts/oh-l-l',                            { 'directory' : 'color_oh_la_la'}
    " " NeoBundle 'vim-scripts/unkiwii-color-scheme',              { 'directory' : 'color_unkiwii'}
    " " NeoBundle 'nowk/genericdc',                                { 'directory' : 'color_genericdc'}
    " " NeoBundle 'idbrii/vim-sandydune',                          { 'directory' : 'color_sandydune'}
    " " NeoBundle 'wesQ3/wombat.vim',                              { 'directory' : 'color_wombat'}
    " " NeoBundle 'MPiccinato/wombat256',                          { 'directory' : 'color_wombat256'}
    " " NeoBundle 'vim-scripts/wombat256.vim',                     { 'directory' : 'color_wombat256_vim'}
    " " NeoBundle 'rking/vim-detailed',                            { 'directory' : 'color_detailed'}
    " " NeoBundle 'wellsjo/wells-colorscheme.vim',                 { 'directory' : 'color_wells'}
    " " NeoBundle 'mtglsk/mushroom',                               { 'directory' : 'color_mushroom'}
    " " NeoBundle 'duythinht/inori',                               { 'directory' : 'color_inori'}
    " " NeoBundle 'vim-scripts/abbott.vim',                        { 'directory' : 'color_abbott'}
    " " NeoBundle 'SacredCrumb/neonwave.vim',                      { 'directory' : 'color_neonwave'}
    " " NeoBundle 'trapd00r/neverland-vim-theme',                  { 'directory' : 'color_neverland'}
    " " NeoBundle 'dinkerambe/Galactic-Ocean',                     { 'directory' : 'color_galactic_ocean'}
    " " NeoBundle 'atelierbram/vim-colors_atelier-schemes',        { 'directory' : 'color_atelier'}
    " " NeoBundle 'fxn/vim-monochrome',                            { 'directory' : 'color_monochrome'}
    " NeoBundle 'KKPMW/oldbook-vim',                             { 'directory' : 'color_oldbook'}
    " " NeoBundle 'connorholyday/vim-snazzy',                      { 'directory' : 'color_snazzy'}
    " " NeoBundle 'kamykn/skyknight',                              { 'directory' : 'color_skynight'}
    " " NeoBundle 'kamykn/skyhawk',                              { 'directory' : 'color_skyhawk'}
    " " NeoBundle 'oka-h/yozakura.vim',                              { 'directory' : 'color_yozakura'}
    " " NeoBundle 'fortes/vim-escuro',                              { 'directory' : 'color_escuro'}
    " " NeoBundle 'stephanedemotte/beekai',                        { 'directory' : 'color_beekai'}
    " " NeoBundle 'google/vim-colorscheme-primary',                { 'directory' : 'color_google_primary'}
    " " NeoBundle 'widatama/vim-phoenix',                          { 'directory' : 'color_phoenix'}
    " " NeoBundle 'yankcrime/direwolf',                            { 'directory' : 'color_direwolf'}
    " " NeoBundle 'kristiandupont/shades-of-teal',                 { 'directory' : 'color_teal'}
    " " NeoBundle 'vim-scripts/Shades-of-Amber',                   { 'directory' : 'color_amber'}
    " " NeoBundle 'vim-scripts/ibmedit.vim',                       { 'directory' : 'color_ibmedit'}
    " " NeoBundle 'jedverity/feral-vim',                           { 'directory' : 'color_feral'}
    NeoBundle 'NLKNguyen/papercolor-theme',                    { 'directory' : 'color_paparcolor'}
    " " NeoBundle 'atom/one-dark-syntax',                          { 'directory' : 'color_one-dark-syntax'}
    " " NeoBundle 'queyenth/oxeded.vim',                           { 'directory' : 'color_oxeded'}
    " " NeoBundle '0ax1/lxvc',                                     { 'directory' : 'color_lxvc'}
    " " NeoBundle 'fabi1cazenave/kalahari.vim',                    { 'directory' : 'color_kalahari'}
    " " " NeoBundle 'lyxell/pride.vim',                              { 'directory' : 'color_pride'}
    " " NeoBundle 'thomd/vim-wasabi-colorscheme',                  { 'directory' : 'color_wasabi'}
    " " NeoBundle 'woju/vim-colors-woju',                          { 'directory' : 'color_woju'}
    " " NeoBundle 'tomsik68/vim-crystallite',                      { 'directory' : 'color_crystallite'}
    " " NeoBundle 'zsoltf/vim-maui',                               { 'directory' : 'color_maui'}
    " " NeoBundle 'mhumeSF/one-dark.vim',                          { 'directory' : 'color_one_dark'}
    " " NeoBundle 'dfxyz/CandyPaper.vim',                          { 'directory' : 'color_CandyPaper'}
    " " NeoBundle 'xero/sourcerer.vim',                            { 'directory' : 'color_sourcerer'}
    " " NeoBundle 'KKPMW/moonshine-vim',                           { 'directory' : 'color_moonshine'}
    " " NeoBundle 'slugbyte/yuejiu',                               { 'directory' : 'color_yuejiu'}
    " " NeoBundle 'DankNeon/vim',                               { 'directory' : 'color_neon'}
    " " NeoBundle 'scottymoon/vim-chalkboard',                               { 'directory' : 'color_chalkboard'}
    " " NeoBundle 'fatih/molokai',                               { 'directory' : 'color_anotherMolokai'}
    " " NeoBundle 'pcostasgr/red_alert_vim_theme',                               { 'directory' : 'color_red_alert_vim_theme'}
    " " NeoBundle 'scottymoon/vim-twilight',                               { 'directory' : 'color_twilight'}
    " " NeoBundle 'xiaody/thornbird.vim',                          { 'directory' : 'color_thornbird'}
    " " NeoBundle 'ronny/birds-of-paradise.vim',                   { 'directory' : 'color_birdsOfParadise'}
    " " NeoBundle 'atweiden/vim-colors-behelit',                   { 'directory' : 'color_behelit'}
    " " NeoBundle 'gilgigilgil/anderson.vim',                      { 'directory' : 'color_anderson'}
    " " NeoBundle 'hewo/vim-colorscheme-deepsea',                  { 'directory' : 'color_deepsea'}
    " " NeoBundle 'evgenyzinoviev/vim-vendetta',                   { 'directory' : 'color_vendetta'}
    " " NeoBundle 'mkarmona/colorsbox',                            { 'directory' : 'color_colorsbox'}
    " " NeoBundle 'JarrodCTaylor/spartan',                         { 'directory' : 'color_spartan'}
    " " NeoBundle 'DrowsySaturn/VIvid.vim',                        { 'directory' : 'color_VIvid'}
    " " NeoBundle 'cesardeazevedo/Fx-ColorScheme',                 { 'directory' : 'color_FxColorScheme'}
    " " NeoBundle 'RussellBradley/vim-warriors-away',              { 'directory' : 'color_warriors_away'}
    " " NeoBundle 'visi-pivi-sivi/leerkan-vim-colors',             { 'directory' : 'color_leerkan'}
    " " NeoBundle 'mtglsk/wikipedia.vim',                          { 'directory' : 'color_wikipedia'}
    " " NeoBundle 'fcpg/vim-fahrenheit',                           { 'directory' : 'color_fahrenheit'}
    " " NeoBundle 'jethrovt/vim-basal-colorscheme',                { 'directory' : 'color_basal'}
    " " NeoBundle 'ipsod/nes.vim',                                 { 'directory' : 'color_nes'}
    " " NeoBundle 'bethebunny/dotfiles',                           { 'directory' : 'color_stefan'}
    " " NeoBundle 'tyrannicaltoucan/vim-deep-space.git',           { 'directory' : 'color_deepSpace'}
    " NeoBundle 'rakr/vim-one.git',                              { 'directory' : 'color_One'}
    " " NeoBundle 'bounceme/highwayman',                           { 'directory' : 'color_highwayman'}
    " " NeoBundle 'roosta/srcery',                                 { 'directory' : 'color_srcery'}
    " NeoBundle 'srcery-colors/srcery-vim',                      { 'directory' : 'color_srceryVim'}
    NeoBundle 'aonemd/kuroi.vim',                              { 'directory' : 'color_kuroi'}
    " NeoBundle 'ulwlu/elly.vim',                                { 'directory' : 'color_elly'}
    " " NeoBundle 'aereal/vim-colors-japanesque',                  { 'directory' : 'color_japanesque'}
    NeoBundle 'rakr/vim-two-firewatch',                          { 'directory' : 'color_twoFirewatch'}
    " " NeoBundle 'MvanDiemen/ghostbuster',                          { 'directory' : 'color_ghostbuster'}
    " " NeoBundle 'chmllr/elrodeo-vim-colorscheme',                  { 'directory' : 'color_elrodeo'}
    " " NeoBundle 'YorickPeterse/happy_hacking.vim',                 { 'directory' : 'color_happyHacking'}
    " " NeoBundle 'cseelus/vim-colors-lucid',                        { 'directory' : 'color_lucid'}
    " " NeoBundle 'MvanDiemen/brighton.vim',                         { 'directory' : 'color_lucid'}
    " " NeoBundle 'Addisonbean/Vim-Xcode-Theme',                     { 'directory' : 'color_Xcode'}
    " " NeoBundle 'aliou/moriarty.vim',                              { 'directory' : 'color_moriarty'}
    " " NeoBundle 'tweetjay/vim-tweetjay',                           { 'directory' : 'color_tweetyay'}
    " " NeoBundle '0ax1/lxvc',                                       { 'directory' : 'color_lxvc'}
    " " NeoBundle 'snowcrshd/cyberpunk.vim',                         { 'directory' : 'color_cyberpunk'}
    " " NeoBundle 'ehartc/Spink',                                    { 'directory' : 'color_Spink'}
    " " NeoBundle 'raphamorim/lucario',                              { 'directory' : 'color_lucario'}
    " " NeoBundle 'bcicen/vim-vice',                                 { 'directory' : 'color_vice'}
    NeoBundle 'humanoid-colors/vim-humanoid-colorscheme',          { 'directory' : 'color_vim-humanoid-colorscheme'}
    NeoBundle 'strange/vim-lore',                                  { 'directory' : 'color_lore'}
    " NeoBundle 'habamax/vim-gruvbit',                             { 'directory' : 'color_gruvbit'}
    " " NeoBundle 'kamwitsta/flatwhite-vim',                         { 'directory' : 'color_flatwhite'}
    " NeoBundle 'ngscheurich/dromad-vim',                          { 'directory' : 'color_dromad'}
    " " NeoBundle 'encody/vim-colors',                               { 'directory' : 'color_encody'}
    " " " }}}2 " color
    NeoBundleLazy 'sjl/clam.vim',                                  { 'directory' : 'clam', 'autoload' : {'commands' : ['ClamVisual', 'SClam']}}
    " NeoBundle 'jalvesaq/vimcmdline',                                { 'directory' : 'vimcmdline'}
    " NeoBundle 'zphere-zsh/vim-user-menu',                           { 'directory' : 'user_menu'}
    " NeoBundle 'iqxd/vim-mine-sweeping',                             { 'directory' : 'mine_sweeping'}
    " NeoBundle 'bignimbus/you-are-here.vim',                           { 'directory' : 'youAreHere'}
    " NeoBundle 'sunaku/vim-shortcut',                                  { 'directory' : 'vimShortcut'}
    " NeoBundle 'vim-scripts/confirm-quit',                             { 'directory' : 'confirm_quit'}
    NeoBundle 'fadein/vim-FIGlet',                                    { 'directory' : 'figlet'}
    NeoBundle 'JRasmusBm/vim-peculiar',                               { 'directory' : 'peculiar'}
    NeoBundle 'aonemd/fmt.vim',                                       { 'directory' : 'fmt'}
    " NeoBundle 'tyru/capture.vim',                                   { 'directory' : 'capture'}
    " NeoBundle 'abdalrahman-ali/vim-remembers',                      { 'directory' : 'remembers'}
    NeoBundle 'axvr/zepl.vim',                                 { 'directory' : 'zepl'}
    " NeoBundle 'urbainvaes/vim-macaw',                        { 'directory' : 'macaw'}
    " NeoBundle 'DanilaMihailov/beacon.nvim',                    { 'directory' : 'beacon'}
    " NeoBundle 'inside/vim-search-pulse',                       { 'directory' : 'SearchPulse'}
    " NeoBundle 'EVODelavega/vim-eazy-timer',                  { 'directory' : 'EasyTimer'}
    " NeoBundle 'l04m33/vlime',                                  { 'directory' : 'vlime', 'rtp' : 'vim/'}
    " NeoBundle 'vim-vdebug/vdebug',                             { 'directory' : 'vdebug'}
    " NeoBundle 'joereynolds/place.vim',                             { 'directory' : 'place'}
    " NeoBundle 'sickill/vim-pasta',                                 { 'directory' : 'pasta'}
    " NeoBundle 'lifepillar/vim-cheat40',                            { 'directory' : 'cheat40'}
    NeoBundle 'ntpeters/vim-better-whitespace',                    { 'directory' : 'betterWhitespace'}
    " NeoBundle 'qpkorr/vim-bufkill',                                { 'directory' : 'bufkill'}
    NeoBundle 'junegunn/vader.vim',                                { 'directory' : 'vader'} "writing tests
    " NeoBundle 'kana/vim-vspec',                                { 'directory' : 'vspec'}
    " NeoBundle 'torresjrjr/tabulae.vim',                        { 'directory' : 'tabulate'}
    " NeoBundle 'camspiers/animate.vim',                        { 'directory' : 'animate'}
    " NeoBundle 'thezeroalpha/vim-relatively-complete',         { 'directory' : 'relatively-complete'}
    " NeoBundle 'camspiers/lens.vim',                        { 'directory' : 'lens'}
    " NeoBundle 'ipod825/war.vim',                           { 'directory' : 'war'}
    NeoBundle 'potamides/painless-digraph',                { 'directory' : 'painlessDigraph'}
    NeoBundle 'dstein64/vim-startuptime',                            {'directory' : 'vim_startuptime'}
    NeoBundle 'dstein64/vim-win',                                    {'directory' : 'vim_win'}
    NeoBundle 'bfrg/vim-qf-preview',                                 {'directory' : 'qf_preview'}
    " NeoBundle 'romainl/vim-qf',                                { 'directory' : 'qf'}
    " NeoBundle 'gcavallanti/vim-noscrollbar',                         {'directory' : 'noscrollbar'}
    NeoBundle 'ojroques/vim-scrollstatus',                         {'directory' : 'scrollstatus'}
    " NeoBundle 'drzel/vim-line-no-indicator',                         {'directory' : 'line_no_indicator'}
    " NeoBundle 'pechorin/any-jump.vim',                               {'directory' : 'any_jump'}
    " NeoBundle 'tweekmonster/startuptime.vim',                            {'directory' : 'startuptime_vim'}
    " NeoBundle 'samoshkin/vim-mergetool',                         { 'directory' : 'mergetool'}
    " NeoBundle 'mattn/vim-starwars',                                { 'directory' : 'starwars'}
    " NeoBundle 'joereynolds/gq.vim',                                { 'directory' : 'gq'}
    " NeoBundle 'vim-scripts/VOoM',                                  { 'directory' : 'voom'}
    " NeoBundle 'moll/vim-bbye',                                     { 'directory' : 'bbye'}
    NeoBundle 'liuchengxu/vim-clap',                               { 'directory' : 'vimClap'}
    NeoBundle 'HerringtonDarkholme/yats.vim',                      { 'directory' : 'yats'}
    " NeoBundle 'wellle/context.vim',                                { 'directory' : 'context'}
    " NeoBundle 'romainl/vim-cool',                                  { 'directory' : 'vim_cool'}
    " NeoBundle 'KKPMW/vim-sendtowindow',                            { 'directory' : 'sendToWindow'}
    " NeoBundle 'ChausseBenjamin/todo-secretary',                    { 'directory' : 'todo_secretary'}
    " NeoBundle 'segeljakt/vim-isotope',                    { 'directory' : 'isotope'}
    " NeoBundle 'dahu/vim-lotr',                                     { 'directory' : 'lotr'}
    " NeoBundle 'thosakwe/vim-flutter',                              { 'directory' : 'flutter'}
    " NeoBundle 'lambdalisue/lista.nvim',                            { 'directory' : 'lista'}
    " NeoBundle 'vim-scripts/ReplaceWithRegister',                            { 'directory' : 'ReplaceWithRegister'}
    " NeoBundle 'vim-regedit',                                                { 'directory' : 'regEdit'}
    " NeoBundle 'dylnmc/reggie.vim',                                          { 'directory' : 'reggie'}
    NeoBundle 'rbong/vim-buffest',                                        { 'directory' : 'buffest'}
    NeoBundle 'svermeulen/vim-macrobatics',                               { 'directory' : 'macrobatics'}
    NeoBundle 'arp242/zev.vim',                                { 'directory' : 'zev'}
    " NeoBundle 'unblevable/quick-scope',                                     { 'directory' : 'QuickScope'}
    NeoBundle 'machakann/vim-highlightedyank',                            { 'directory' : 'highlightedyank'}
    " NeoBundle 'kana/vim-niceblock',                                       { 'directory' : 'niceBlock'}
    " NeoBundle 'Lenovsky/nuake',                                           { 'directory' : 'nuake'}
    " NeoBundle 'voldikss/vim-floaterm',                        { 'directory' : 'floaterm'}
    " NeoBundle 'ZhiyuanLck/vim-float-terminal',                { 'directory' : 'float-terminal'}
    " NeoBundle 'windwp/vim-floaterm-repl',                     { 'directory' : 'floaterm_repl'}
    " NeoBundle 'coot/vim-term',                                  { 'directory' : 'vimTerm'}
    " NeoBundle 'puremourning/vimspector',                        { 'directory' : 'vimspector'}
    NeoBundle 'gu-fan/simpleterm.vim',                                    { 'directory' : 'simpleterm'}
    NeoBundle 'chengzeyi/multiterm.vim',                                { 'directory' : 'multiterm'}
    " NeoBundle 'erietz/vim-terminator',                                  { 'directory' : 'terminator'}
    " NeoBundle 'ledesmablt/vim-run',                                       { 'directory' : 'vim_run'}
    NeoBundle 'habamax/vim-sendtoterm',                                   { 'directory' : 'sendtoTerm'}
    " NeoBundle 'chrisbra/vpager',                                          { 'directory' : 'vpager'}
    " NeoBundle 'manu-mannattil/vim-longlines',                             { 'directory' : 'longlines'}
    " NeoBundle 'ipod825/vim-netranger',                                    { 'directory' : 'netranger'} " does not work for me
    " NeoBundle 'philFernandez/rangerFilePicker.vim',                       { 'directory' : 'rangerFilePicker'}
    " NeoBundle 'scr1pt0r/crease.vim',                                      { 'directory' : 'crease'}
    " NeoBundle 'lambdalisue/fern.vim',                                     { 'directory' : 'fern'}
    " NeoBundle 'francoiscabrol/ranger.vim',                     { 'directory' : 'ranger'}
    " NeoBundle 'rafaqz/ranger.vim',                             { 'directory' : 'ranger2'}
    " NeoBundle 'semanser/vim-outdated-plugins',                     { 'directory' : 'OutdatedPlugins'}
    " NeoBundle     'raghavsub/vim-agate',                           { 'directory' : 'agate'}
    " NeoBundle     'ludovicchabant/vim-gutentags',                  { 'directory' : 'gutentags'}
    " NeoBundle     'yangmillstheory/vim-snipe',                     { 'directory' : 'snipe'}
    " NeoBundle     'lfilho/cosco.vim',                              { 'directory' : 'cosco'}
    " NeoBundle     'Glench/Vim-Jinja2-Syntax',                      { 'directory' : 'Jinja2'}
    NeoBundle     'thiagoalessio/rainbow_levels.vim',              { 'directory' : 'rainbow_lvls'}
    NeoBundle     'xtal8/traces.vim',                              { 'directory' : 'traces'}
    NeoBundle     'machakann/vim-sandwich',                        { 'directory' : 'sandwich'}
    " NeoBundle     'simeji/winresizer',                             { 'directory' : 'winresizer'}
    " NeoBundle     'zhamlin/tiler.vim',                             { 'directory' : 'tiler'}
    " NeoBundle     'dbmrq/vim-redacted',                            { 'directory' : 'redacted'}
    " NeoBundle     'prettier/vim-prettier',                         { 'directory' : 'prettier'}
    NeoBundle     'wellsjo/vim-save-cursor-position',            { 'directory' : 'saveCursorPosition'}
    " NeoBundle     'skywind3000/quickmenu.vim',                   { 'directory' : 'quickMenu'}
    NeoBundle     'natw/Decho',                                  { 'directory' : 'decho'}
    " NeoBundle     'salsifis/vim-transpose',                      { 'directory' : 'transpose'}
    NeoBundle     'EinfachToll/DidYouMean',                            { 'directory' : 'didUmean'}
    " NeoBundle     'zirrostig/vim-schlepp',                             { 'directory' : 'schlepp'}
    NeoBundle     't9md/vim-textmanip',                                { 'directory' : 'textmanip'}
    " NeoBundle 'matze/vim-move',                                { 'directory' : 'move'}
    " NeoBundle     'Carpetsmoker/globedit.vim',                         { 'directory' : 'globedit'}
    " NeoBundle     'lambdalisue/gina.vim',                              { 'directory' : 'gina'}
    " NeoBundle     'jeetsukumaran/vim-markology',                       { 'directory' : 'markology'}
    NeoBundleLazy 'tweekmonster/braceless.vim',                    { 'directory' : 'braceless', 'autoload' : {'commands' : ['BracelessEnable']}}
    NeoBundle 'junkblocker/patchreview-vim',                   { 'directory' : 'patchreview'}
    " NeoBundle 'AriSweedler/vim-statusline',                    { 'directory' : 'vimStatusline'}
    " NeoBundle 'itchyny/lightline.vim',                         { 'directory' : 'lightline'}
    " NeoBundle 'bling/vim-airline',                             { 'directory' : 'vim_airline'}
    " NeoBundle 'hardcoreplayers/spaceline.vim',                 { 'directory' : 'spaceline'}
    " NeoBundle 'tpope/vim-flagship',                            { 'directory' : 'flagship'}
    " NeoBundle 'liuchengxu/eleline.vim',                        { 'directory' : 'eleline'}
    " NeoBundle 'kreskij/Repeatable.vim',                        { 'directory' : 'Repeatable'}
    NeoBundle 'stefandtw/quickfix-reflector.vim',              { 'directory' : 'reflector'}
    " NeoBundle 'jceb/vim-editqf',                               { 'directory' : 'editqf'}
    " NeoBundle 'AndrewRadev/writable_search.vim',               { 'directory' : 'writable_search'}
    NeoBundle 'skywind3000/asyncrun.vim',                      { 'directory' : 'asyncrun'}
    NeoBundle 'skywind3000/asynctasks.vim',                    { 'directory' : 'asynctasks'}
    NeoBundle 'skywind3000/asyncrun.extra',                    { 'directory' : 'asyncExtra'}
    NeoBundle 'neomake/neomake',                               { 'directory' : 'neomake'}
    NeoBundle 'tracyone/neomake-multiprocess',                               { 'directory' : 'neomake_multiprocess'}
    " NeoBundle 'tpope/vim-surround',                            { 'directory' : 'surround'}
    " NeoBundle 'liuchengxu/vim-which-key',                      { 'directory' : 'whichKey'}
    NeoBundle 'kurkale6ka/vim-pairs',                          { 'directory' : 'pairs'}
    NeoBundle 'dhruvasagar/vim-pairify',                       { 'directory' : 'pairify'}
    " NeoBundleLazy 'thinca/vim-quickrun',                           { 'directory' : 'quickrun', 'autoload' : {'commands' : ['QuickRun']}}
    " NeoBundle 'gokcehan/picon',                                    { 'directory' : 'picon'}
    " NeoBundle 'vim-utils/vim-vertical-move',                      { 'directory' : 'vertical_move'}
    NeoBundle 'justinmk/vim-syntax-extra',                     { 'directory' : 'syntax-extra'}
    NeoBundleLazy 'AndrewRadev/linediff.vim',                      { 'directory' : 'linediff', 'autoload' : {'commands' : ['Linediff', 'LinediffReset']}}
    " NeoBundle 'ckarnell/history-traverse',                     { 'directory' : 'historyTraverse'}
    " NeoBundle 'andymass/vim-tradewinds',                       { 'directory' : 'tradeWinds'}
    " NeoBundle 'Lokaltog/vim-easymotion',                       { 'directory' : 'easymotion'}
    " NeoBundle 'haya14busa/vim-signjk-motion',                  { 'directory' : 'signjk_motion'}
    NeoBundle 'wsdjeg/vim-fetch',                           { 'directory' : 'fetch'}
    NeoBundle 'c9s/perlomni.vim',                          { 'directory' : 'perlOmni'}
    " NeoBundle 'zphere-zsh/shell-omni-completion',          { 'directory' : 'shell_omni_completion'}
    NeoBundle 'vim-perl/vim-perl',                          { 'directory' : 'VimPerl'}
    NeoBundleLazy 'chrisbra/NrrwRgn',                              { 'directory' : 'narrow', 'autoload' : {'commands' : ['NarrowRegion', 'WidenRegion']}}
    NeoBundle 'chrisbra/unicode.vim',                              { 'directory' : 'unicode'}
    " NeoBundle 'ferranpm/vim-isolate',                          { 'directory' : 'isolate'}
    NeoBundle 'chrisbra/csv.vim',                              { 'directory' : 'csv'}
    NeoBundleLazy 'dhruvasagar/vim-table-mode',                    { 'directory' : 'table-mode', 'autoload' : {'commands' : ['TableModeToggle', 'TableModeEnable', 'TableModeDisable', 'Tableize', 'TableModeRealign', 'TableAddFormula', 'TableEvalFormulaLine']}}
    NeoBundleLazy 'jeetsukumaran/vim-buffergator',                 { 'directory' : 'buffergator', 'autoload' : {'commands' : ['BuffergatorOpen', 'BuffergatorClose', 'BuffergatorToggle', 'BuffergatorTabsOpen', 'BuffergatorTabsClose', 'BuffergatorTabsToggle']}}
    NeoBundle 'el-iot/buffer-tree',                            { 'directory' : 'bufferTree'}
    " NeoBundle 'roblillack/vim-bufferlist',                     { 'directory' : 'bufferlist'}
    " NeoBundle 'johngrib/vim-game-code-break',                  { 'directory' : 'game_code_break'}
    " NeoBundle 'kien/tabman.vim',                               { 'directory' : 'tabman'}
    NeoBundleLazy 'junegunn/vim-easy-align',                       { 'directory' : 'easy_align', 'autoload' : {'commands' : ['EasyAlign']}}
    NeoBundle 'luochen1990/rainbow',                           { 'directory' : 'rainbow_better'}
    " NeoBundle 'junegunn/rainbow_parentheses.vim',              { 'directory' : 'rainbow_paren'}
    NeoBundle 'vim-ruby/vim-ruby',                                 { 'directory' : 'vimRuby'}
    NeoBundleLazy 'mbbill/undotree',                               { 'directory' : 'undoTree', 'autoload' : {'commands' : ['UndotreeFocus', 'UndotreeHide', 'UndotreeShow', 'UndotreeToggle']}}
    " NeoBundle 'myusuf3/numbers.vim',                           { 'directory' : 'numbers'}
    NeoBundle 'jeffkreeftmeijer/vim-numbertoggle',             { 'directory' : 'numbertoggle'}
    NeoBundle 'AndrewRadev/undoquit.vim',                      { 'directory' : 'undoQuit'}
    NeoBundle 'simnalamburt/vim-mundo',                        { 'directory' : 'mundo'}
    NeoBundle 'sukima/xmledit',                                { 'directory' : 'xml'}
    " autocmd FileType xml NeoBundleSource xmledit
    " NeoBundle 'terryma/vim-expand-region',                     { 'directory' : 'expand-region'}
    " NeoBundle 'cbbuntz/vim-autoselect',                        { 'directory' : 'autoselect'}
    " NeoBundle 'terryma/vim-multiple-cursors',                  { 'directory' : 'multiple_cursor'}
    " NeoBundle 'mg979/vim-visual-multi',                        { 'directory' : 'visual_multi_cursor'}
    " NeoBundle 'andymass/vim-visput',                           { 'directory' : 'visput'}
    " NeoBundle 'tmhedberg/matchit',                             { 'directory' : 'matchit'}
    NeoBundle 'Valloric/MatchTagAlways',                       { 'directory' : 'matchTagAlways'}
    " NeoBundle 'vimtaku/hl_matchit.vim',                        { 'directory' : 'hl_matchit'}
    NeoBundle 'andymass/vim-matchup',                          { 'directory' : 'matchup'}
    " NeoBundle 'machakann/vim-sandwich',                        { 'directory' : 'sandwich'}
    NeoBundle 'tommcdo/vim-exchange',                          { 'directory' : 'exchange'}
    NeoBundle 'tpope/vim-commentary',                          { 'directory' : 'commentary'}
    NeoBundleLazy 'tpope/vim-eunuch',                              { 'directory' : 'eunuch', 'autoload' : {'commands' : ['Delete', 'Remove', 'Move', 'Rename', 'Chmod', 'Mkdir', 'Mkdir', 'Cfind', 'Lfind', 'Clocate', 'Llocate']}}
    NeoBundle 'tpope/vim-repeat',                              { 'directory' : 'repeat'}
    NeoBundleLazy 'vim-scripts/FuzzyFinder',                       { 'directory' : 'FuzzyFinder', 'autoload' : {'commands' : ['FufBuffer', 'FufFile', 'FufCoverageFile', 'FufDir', 'FufMruFile', 'FufMruCmd', 'FufBookmarkFile', 'FufBookmarkDir', 'FufTag', 'FufBufferTag', 'FufTaggedFile', 'FufJumpList', 'FufChangeList', 'FufQuickfix', 'FufLine', 'FufHelp']}}
    NeoBundleLazy 'vim-scripts/VisIncr',                           { 'directory' : 'VisIncr', 'autoload' : {'commands' : ['I', 'II', 'IYMD', 'IMDY', 'IDMY', 'ID', 'IO', 'IIO', 'IR', 'IIR', 'IX', 'IIX']}}
    NeoBundle 'vim-scripts/cscope.vim',                        { 'directory' : 'cscope'}
    NeoBundle 'vhda/verilog_systemverilog.vim',         { 'directory' : 'verilog_systemverilog'}
    NeoBundle 'chreekat/vim-paren-crosshairs',                   { 'directory' : 'paren-crosshairs'}
    NeoBundle 'vim-scripts/L9',                                { 'directory' : 'l9'}
    NeoBundle 'xolox/vim-misc',                                { 'directory' : 'vim-misc'}
    " NeoBundleLazy 'xolox/vim-session',                             { 'directory' : 'vim_session', 'autoload' : {'commands' : ['SaveSession', 'OpenSession', 'RestartVim', 'CloseSession', 'DeleteSession', 'ViewSession', 'OpenTabSession', 'SaveTabSession', 'AppendTabSession', 'CloseTabSession']}}
    NeoBundleLazy 'romgrk/vim-session',                             { 'directory' : 'vim_session', 'autoload' : {'commands' : ['SaveSession', 'OpenSession', 'RestartVim', 'CloseSession', 'DeleteSession', 'ViewSession', 'OpenTabSession', 'SaveTabSession', 'AppendTabSession', 'CloseTabSession']}}
    " NeoBundle 'ydhamija96/uss-sessions.vim',                        { 'directory' : 'uss_sessions'}
    NeoBundle 'ColinKennedy/vim-textobj-block-party',              { 'directory' : 'textobj-block'}
    NeoBundle 'kana/vim-textobj-function',                     { 'directory' : 'textobj-function'}
    NeoBundle 'kana/vim-textobj-indent',                       { 'directory' : 'textobj-indent'}
    NeoBundle 'kana/vim-textobj-user',                         { 'directory' : 'textobj-user'}
    NeoBundle 'kana/vim-textobj-line',                         { 'directory' : 'textobj-line'}
    NeoBundle 'jceb/vim-textobj-uri',                         { 'directory' : 'textobj-uri'}
    NeoBundle 'lucapette/vim-textobj-underscore',                         { 'directory' : 'textobj-underscore'}
    NeoBundle 'thalesmello/vim-textobj-methodcall',            { 'directory' : 'textobj-methodcall'}
    NeoBundle 'wellle/targets.vim',                                { 'directory' : 'targets'}
    NeoBundle 'xolox/vim-lua-ftplugin',                            { 'directory' : 'lua_fileType'}
    " autocmd FileType lua NeoBundleSource vim-lua-ftplugin
    NeoBundle 'vim-scripts/UnconditionalPaste',                    { 'directory' : 'UnconditionalPaste'}
    NeoBundle 'tpope/vim-scriptease',                          { 'directory' : 'striptease'}
    " NeoBundle 'mhinz/vim-randomtag',                               { 'directory' : 'randomtag'}
    " NeoBundle 'gilligan/vim-textobj-haskell',                      { 'directory' : 'textobj-haskell'}
    NeoBundle 'pianohacker/vim-indented-paragraph',                { 'directory' : 'textobj-paragraph'}
    NeoBundle 'Konfekt/FastFold',                                  { 'directory' : 'fastfold'}
    " NeoBundle 'msuperdock/vim-foldout',                            { 'directory' : 'foldout'}
    NeoBundle 'Yggdroot/indentLine',                               { 'directory' : 'indentLine'}
    " NeoBundle 'nathanaelkane/vim-indent-guides',               { 'directory' : 'indent_guides'}
    NeoBundle 'yssl/QFEnter',                                  { 'directory' : 'QFEnter'}
    NeoBundle 'vim-scripts/xemacs-mouse-drag-copy',            { 'directory' : 'xemacs-mouse-drag-copy'}
    NeoBundleLazy 'majutsushi/tagbar',                             { 'directory' : 'tagbar', 'autoload' : {'commands' : ['TagbarToggle']}}
    NeoBundle 'SirVer/ultisnips',                              { 'directory' : 'ultisnips'}
    " NeoBundle 'andreyorst/SimpleSnippets.vim',                 { 'directory' : 'SimpleSnippets'}
    NeoBundle 'tpope/vim-fugitive',                            { 'directory' : 'fugitive'}
    NeoBundle 'rbong/vim-flog',                                { 'directory' : 'flog'}
    " NeoBundle 'lambdalisue/gina.vim',                          { 'directory' : 'ginia'}
    " NeoBundle 'junkblocker/git-time-lapse',                    { 'directory' : 'GitTimeLapse'}
    " NeoBundle 'tveskag/nvim-blame-line',                     { 'directory' : 'blame_line'}
    " NeoBundle 'junegunn/gv.vim',                               { 'directory' : 'gv'}
    " NeoBundle 'cohama/agit.vim',                               { 'directory' : 'agit'}
    " NeoBundleLazy 'gregsexton/gitv',                               { 'directory' : 'gitv', 'depends' : 'tpope/vim-fugitive', 'autoload' : {'commands' : ['Gitv']}}
    " NeoBundle 'rhysd/committia.vim',                           { 'directory' : 'committia'}
    NeoBundle 'justrajdeep/committia.vim',                           { 'directory' : 'committia', 'rev' : 'add_perforce_support'}
    NeoBundle 'sjl/splice.vim',                                { 'directory' : 'splice'}
    NeoBundle 'whiteinge/diffconflicts',                       { 'directory' : 'diffconflicts'}
    " NeoBundle 'christoomey/vim-conflicted',                    { 'directory' : 'conflicted'}
    NeoBundle 'idanarye/vim-merginal',                         { 'directory' : 'merginal'}
    " NeoBundle 'sheerun/vim-polyglot',                         { 'directory' : 'polyglot'}
    " NeoBundle 'wsdjeg/FlyGrep.vim',                            { 'directory' : 'FlyGrep'}
    " NeoBundle 'fboender/bexec',                                { 'directory' : 'bexec'}
    " NeoBundle 'octol/vim-cpp-enhanced-highlight',              { 'directory' : 'CppEnhanced'}
    " NeoBundle 'jeaye/color_coded',                           { 'directory' : 'colorCoded'}
    NeoBundle 'jceb/vim-orgmode',                              { 'directory' : 'orgmode'}
    NeoBundle 'tpope/vim-abolish',                             { 'directory' : 'abolish'}
    " NeoBundle 'lambdalisue/reword.vim',                        { 'directory' : 'reword'}
    " NeoBundle 'svermeulen/vim-subversive',                         { 'directory' : 'subversive'}
    " NeoBundle 'svermeulen/vim-yoink',                              { 'directory' : 'yoink'}
    " NeoBundle 'svermeulen/vim-cutlass',                              { 'directory' : 'cutlass'}
    " NeoBundle 'ctrlpvim/ctrlp.vim',                                { 'directory' : 'ctrlp'}
    " NeoBundle 'Yggdroot/LeaderF',                                  { 'directory' : 'leaderF', 'build': {'unix' : './install.sh'}}
    " NeoBundle 'skywind3000/leaderf-snippet',                       { 'directory' : 'leaderF_snippet'}
    NeoBundle 'ryanoasis/vim-devicons',                        { 'directory' : 'devicons'}
    " NeoBundle 'tamago324/LeaderF-filer',                       { 'directory' : 'leaderF_Filer'}
    NeoBundleLazy 'vim-scripts/PatternsOnText',                    { 'directory' : 'PatternsOnText', 'autoload' : {'commands' : ['DeleteExcept', 'SubstituteInSearch', 'DeleteDuplicateLinesOf', 'DeleteDuplicateLinesIgnoring', 'DeleteAllDuplicateLinesIgnoring', 'SubstituteNotInSearch', 'DeleteUniqueLinesIgnoring']}}
    NeoBundle 'vim-scripts/LogiPat',                           { 'directory' : 'logipat'}
    NeoBundle 'ramele/agrep',                                  { 'directory' : 'agrep'}
    " NeoBundle 'svermeulen/nvim-marksman',                      { 'directory' : 'marksman'}
    " NeoBundle 'EerikSaksi/vim-marks-overhaul',                 { 'directory' : 'marksOverhaul'}
    NeoBundle 'vim-scripts/GrepCommands',                      { 'directory' : 'GrepCommands'}
    " NeoBundle 'mhinz/vim-grepper',          { 'directory' : 'grepper'}
    " NeoBundle 'qalshidi/vim-bettergrep',    { 'directory' : 'betterGrep'}
    " NeoBundle   'brooth/far.vim',                           { 'directory' : 'far'}
    NeoBundle 'wincent/ferret',                                { 'directory' : 'ferret'}
    " NeoBundleLazy 'mileszs/ack.vim',                               { 'directory' : 'ack', 'autoload' : {'commands' : ['Ack', 'AckAdd', 'AckFromSearch', 'LAck', 'LAckAdd', 'AckFile', 'AckHelp', 'LAckHelp', 'AckWindow', 'LAckWindow']}}
    NeoBundle 'jremmen/vim-ripgrep',                           { 'directory' : 'ripgrep'}
    NeoBundle 'dyng/ctrlsf.vim',                               { 'directory' : 'ctrlsf'}
    " NeoBundle 'henrik/vim-indexed-search',                     { 'directory' : 'indexedsearch'}
    " NeoBundle 'osyo-manga/vim-anzu',                           { 'directory' : 'anzu'}
    " NeoBundle 'google/vim-searchindex',                        { 'directory' : 'searchindex'}
    " NeoBundle 'MattesGroeger/vim-bookmarks',                   { 'directory' : 'bookmarks'}
    " NeoBundleLazy 'kshenoy/vim-signature',                         { 'directory' : 'signature', 'autoload' : {'commands' : ['SignatureToggle']}}
    " NeoBundleLazy 'osyo-manga/vim-over',                           { 'directory' : 'over', 'autoload' : {'commands' : ['OverCommandLine', 'OverCommandLineNoremap']}}
    " NeoBundle 'Thyrum/vim-stabs',                              { 'directory' : 'stabs'}
    NeoBundle 'ervandew/supertab',                             { 'directory' : 'supertab'}
    NeoBundle 'othree/vim-autocomplpop',                       { 'directory' : 'autocomplpop'}
    NeoBundle 'j5shi/CommandlineComplete.vim',                 { 'directory' : 'CommandlineComplete'}
    " NeoBundle 'mogelbrod/vim-jsonpath',                        { 'directory' : 'jsonPath'}
    " NeoBundle 'ajh17/VimCompletesMe',                          { 'directory' : 'vimCompleteMe'}
    " NeoBundle 'lifepillar/vim-mucomplete',                     { 'directory' : 'mucomplete'}
    " NeoBundle 'vim-scripts/AutoComplPop',                      { 'directory' : 'AutoComplPop'}
    " NeoBundle 'maralla/completor.vim',                         { 'directory' : 'completor'}
    NeoBundle 'AndrewRadev/splitjoin.vim',                     { 'directory' : 'splitjoin'}
    " NeoBundle 'wincent/loupe',                               { 'directory' : 'loupe'}
    " NeoBundle 'haya14busa/is.vim',                           { 'directory' : 'is'}
    " NeoBundle 'lfv89/vim-interestingwords',               { 'directory' : 'interestingwords'} " breaks n/N
    " NeoBundleLazy 'vim-scripts/MultipleSearch',                    { 'directory' : 'MultipleSearch', 'autoload' : {'commands' : ['Search', 'SearchBuffers', 'SearchReset', 'SearchBuffersReset']}}
    " NeoBundle 'ipod825/msearch.vim',                      { 'directory' : 'msearch'}
    NeoBundle 'inkarkat/vim-ingo-library',                { 'directory' : 'ingo'}
    NeoBundle 'inkarkat/vim-mark',                        { 'directory' : 'vim_mark'}
    " NeoBundle 'junegunn/vim-slash',                       { 'directory' : 'slash'}
    " NeoBundle 'drblallo/AsyncQueue',                           { 'directory' : 'AsyncQueue'}
    " NeoBundle 'troydm/easybuffer.vim',                         { 'directory' : 'easybuffer'}
    NeoBundle 'dhruvasagar/vim-zoom',                          { 'directory' : 'zoom'}
    NeoBundle 'vim-scripts/AnsiEsc.vim',                       { 'directory' : 'AnsiEsc'}
    " NeoBundle 'scrooloose/nerdtree',                           { 'directory' : 'NERD_tree'}
    " NeoBundle 'ms-jpq/chadtree',                               { 'directory' : 'chadtree'}
    " NeoBundle 'Shougo/defx.nvim',                              { 'directory' : 'defx'}
    " NeoBundle 'roxma/nvim-yarp',                              { 'directory' : 'yarp'}
    " NeoBundle 'roxma/vim-hug-neovim-rpc',                              { 'directory' : 'hug_neovim_rpc'}
    NeoBundle 'osyo-manga/vim-brightest',                          { 'directory' : 'brightest'}
    " NeoBundle 'RRethy/vim-illuminate',                             { 'directory' : 'illuminate'}
    " NeoBundle 'maxigit/vim-xrange',                                { 'directory' : 'xrange'}
    NeoBundle 'gpanders/vim-medieval',                                { 'directory' : 'medieval'}
    " NeoBundle 'itchyny/vim-cursorword',                            { 'directory' : 'cursorword'}
    " NeoBundle 'Shougo/echodoc.vim',                            { 'directory' : 'echodoc'}
    NeoBundle 'fcpg/vim-complimentary',                        { 'directory' : 'complimentary'}
    NeoBundle 'drzel/vim-scroll-off-fraction',                 { 'directory' : 'scrollOffFraction'}
    NeoBundle 'sedm0784/vim-you-autocorrect',                  { 'directory' : 'youAutocorrect'}
    NeoBundle 'vim-pandoc/vim-pandoc-syntax',                             { 'directory' : 'pandocSyntax'}
    " NeoBundle 'vim-pandoc/vim-pandoc',                         { 'directory' : 'vimPandoc'}
    NeoBundle 'vimwiki/vimwiki.git',        { 'directory' : 'vimwiki'}
    NeoBundle 'gu-fan/riv.vim',             { 'directory' : 'riv'}
    NeoBundle 'AndrewRadev/inline_edit.vim', {'directory' : 'lnline_edit'}
    " NeoBundle 'michaelb/vim-tips',           {'directory' : 'tips'}
    " NeoBundle 'JMcKiern/vim-shoot',          {'directory' : 'shoot'}
    " NeoBundle 'gu-fan/riv.vim',             { 'directory' : 'riv'}
    " NeoBundle 'Yilin-Yang/vim-markbar',                        { 'directory' : 'Markbar'}
    NeoBundle 'ernstwi/vim-secret',                            { 'directory' : 'secret'}
    " NeoBundle 'jdhao/better-escape.vim',                       { 'directory' : 'better_escape'}
    " NeoBundle 'skamsie/vim-lineletters',                       { 'directory' : 'lineLetters'}
    " NeoBundle 'AssailantLF/vim-active-numbers',                    { 'directory' : 'active-numbers'}
    " {{{2
    NeoBundle 'justrajdeep/vim-perforce.git',                           { 'directory' : 'vim_perforce', 'rev' : 'only_ft_syn'}
    " NeoBundle 'coreyoconnor/vim-perforce',                     { 'directory' : 'vim_perforce_fork'}
    " NeoBundle 'pydave/vim-perforce',                           { 'directory' : 'vim_perforce'}
    " NeoBundle     'nfvs/vim-perforce',                           { 'directory' : 'perforce'}
    " NeoBundle     'ngemily/vim-vp4',                             { 'directory' : 'vp4'}
    " NeoBundle     'ernstwi/vim-sticky',                          { 'directory' : 'sticky'}
    " NeoBundle     'blindFS/vim-taskwarrior',                     { 'directory' : 'taskwarrior'}
    " NeoBundle     'vim-utils/vim-troll-stopper',                 { 'directory' : 'trollStopper'}
    " NeoBundle     'bluz71/vim-moonfly-statusline',               { 'directory' : 'moonfly_statusline'}
    " NeoBundle     'carakan/pmv.vim',                             { 'directory' : 'pmv'}
    " NeoBundle 'bagrat/vim-workspace',                          { 'directory' : 'workspace'}
    " NeoBundle 'bogado/file-line',                              { 'directory' : 'fileLine'}
    " NeoBundle 'dodie/vim-disapprove-deep-indentation',         { 'directory' : 'disapproveDeepIndentation'}
    " NeoBundle 'sts10/vim-zipper',                                  { 'directory' : 'zipper'}
    " NeoBundle 'zweifisch/pipe2eval',                           { 'directory' : 'pipe2eval'}
    " NeoBundle 'wesQ3/vim-windowswap',                          { 'directory' : 'windowswap'}
    " NeoBundleLazy 'scrooloose/syntastic',                          { 'directory' : 'syntastic', 'autoload' : {'commands' : ['SyntasticCheck']}}
    " NeoBundle 'airblade/vim-gitgutter',                        { 'directory' : 'gitgutter'}
    " NeoBundle 'rgarver/Kwbd.vim',                              { 'directory' : 'kwbd'}
    " NeoBundle 'pbrisbin/vim-mkdir',                                { 'directory' : 'mkdir'}
    " NeoBundle 'LucHermitte/local_vimrc',                           { 'directory' : 'local_vimrc'}
    " NeoBundle 'LucHermitte/lh-vim-lib',                           { 'directory' : 'vim-lib'}
    " NeoBundle 'LucHermitte/lh-tags',                           { 'directory' : 'vim-tags'}
    " NeoBundleLazy 'sjl/gundo.vim',                                 { 'directory' : 'gundo', 'autoload' : {'commands' : ['GundoToggle']}}
    " NeoBundle 'w0rp/ale',                                      { 'directory' : 'ale'}
    " NeoBundle 'jocap/jumpinline.vim',                          { 'directory' : 'jumpinline'}
    " NeoBundle 'Dkendal/fzy-vim',                                   { 'directory' : 'fzy'}
    " NeoBundle 'FooSoft/vim-argwrap',                           { 'directory' : 'ArgWrap'}
    " NeoBundle 'fcpg/vim-showmap',                              { 'directory' : 'showmap'}
    " NeoBundle 'roxma/vim-window-resize-easy',                  { 'directory' : 'resizeEasy'}
    " NeoBundle 'kana/vim-submode',                              { 'directory' : 'submode'}
    " http://ddrscott.github.io/blog/2016/making-a-window-submode/
    " NeoBundleLazy 'aserebryakov/filestyle',                        { 'directory' : 'filestyle', 'autoload' : {'commands' : ['FileStyleEnable', 'FileStyleDisable', 'FileStyleActivate', 'FileStyleDeactivate', 'FileStyleCheck', 'FileStyleFix']}}
    " NeoBundle 'maxbrunsfeld/vim-yankstack',                    { 'directory' : 'yankstack'}
    " NeoBundle 'coot/vim-man',                                  { 'directory' : 'vim-man'}
    " NeoBundle 'metakirby5/codi.vim',                               { 'directory' : 'codi'}
    " NeoBundle 'tpope/vim-capslock',                                { 'directory' : 'capslock'}
    " NeoBundle 't9md/vim-choosewin',                                { 'directory' : 'choosewin'}
    " NeoBundle 'jreybert/vimagit',                                  { 'directory' : 'vimagit'}
    " NeoBundle 'lambdalisue/vim-gita',                              { 'directory' : 'GitA'}
    " NeoBundle 'yuttie/comfortable-motion.vim',                     { 'directory' : 'comfortable_motion'}
    " NeoBundle     'c9s/vim-dev-plugin',                            { 'directory' : 'dev_plugin'}
    " NeoBundle 'mhinz/vim-signify',                             { 'directory' : 'signify'}
    " NeoBundle     'kshenoy/vim-origami',                           { 'directory' : 'origami'}
    " NeoBundle     'Chiel92/vim-autoformat',                            { 'directory' : 'autoformat'}
    " NeoBundleLazy 'wellle/visual-split.vim',                       { 'dictctory' : 'VSplit', 'autoload' : {'commands' : ['VSResize', 'VSSplit', 'VSSplitAbove', 'VSSplitBelow']}}
    " NeoBundle 'ronakg/quickr-preview.vim',                     { 'directory' : 'quickr'}
    " NeoBundle 'Shougo/deoplete.nvim',                          { 'directory' : 'deoplete'}
    " NeoBundle 'roxma/nvim-yarp',                          { 'directory' : 'yarp'}
    " NeoBundle 'roxma/vim-hug-neovim-rpc',                          { 'directory' : 'hug-neovim-rpc'}
    " NeoBundle 'fsharpasharp/vim-story',                      { 'directory' : 'story'}
    " NeoBundle 'kalekundert/vim-coiled-snake',                { 'directory' : 'coiled_snake'}
    " NeoBundle 'prabirshrestha/asyncomplete-necovim.vim',       { 'directory' : 'asyncomplete-necovim'}
    " NeoBundle 'prabirshrestha/asyncomplete.vim'                { 'directory' : 'asyncomplete'}
    " NeoBundle 'prabirshrestha/async.vim',                      { 'directory' : 'async'}
    " NeoBundle 'high-moctane/asyncomplete-nextword.vim' ,               { 'directory' : 'asyncomplete-nextword'}
    " NeoBundle 'maxboisvert/vim-simple-complete',               { 'directory' : 'simple_complete'}
    " NeoBundle 'Shougo/neocomplete.vim',                        { 'directory' : 'neocomplete'}
    " NeoBundle 'Shougo/neco-vim',                               { 'directory' : 'neco'}
    " NeoBundle 'neoclide/coc-neco',                               { 'directory' : 'Coc_neco'}
    " NeoBundle 'auxiliary/vim-layout',                        { 'directory' : 'layout'}
    " NeoBundle 'tenfyzhong/CompleteParameter.vim',              { 'directory' : 'CompleteParameter'}
    " NeoBundle 'fcpg/vim-flattery',                             { 'directory' : 'flattery'}
    " NeoBundleSource perlomni.vim
    " autocmd FileType perl,viva,verilog_systemverilog NeoBundleSource perlomni.vim
    " NeoBundleLazy 'rking/ag.vim',                                  { 'directory' : 'ag', 'autoload' : {'commands' : ['Ag', 'AgAdd', 'AgFromSearch', 'LAg', 'LAgAdd', 'AgFile', 'AgHelp', 'LAgHelp']}}
    " NeoBundle 'gabesoft/vim-ags',                              { 'directory' : 'ags'}
    " NeoBundleLazy 'vim-scripts/scratch.vim',                       { 'directory' : 'scratch', 'autoload' : {'commands' : ['Scratch', 'Sscratch']}}
    " NeoBundle 'vim-scripts/verilog.vim',                       { 'directory' : 'verilog'}
    " autocmd FileType verilog NeoBundleSource verilog.vim
    " NeoBundle 'andreshazard/vim-logreview',                    { 'directory' : 'logReview'}
    " NeoBundleLazy 'mtth/locate.vim',                                       { 'directory' : 'locate', 'autoload' : {'commands' : ['L', 'Lpurge']}}
    " NeoBundleLocal '~/scripts/bin/fzf'
    " NeoBundle 'neoclide/coc.nvim', 'release', { 'directory': 'coc_nvim', 'build': { 'others': 'git checkout release' } }
    NeoBundle 'junegunn/fzf',                                    { 'directory' : 'fzf', 'build': {'unix' : './install --all' }}
    NeoBundle 'junegunn/fzf.vim',                                  { 'directory' : 'fzf_vim'}
    NeoBundle 'laher/fuzzymenu.vim',                               { 'directory' : 'fuzzymenu'}
    NeoBundle 'mike-hearn/vim-combosearch',                        { 'directory' : 'fzf_combosearch'}
    NeoBundle 'stsewd/fzf-checkout.vim',                           { 'directory' : 'fzf_checkout'}
    NeoBundle 'UncleBill/vim-fzf-picker',                          { 'directory' : 'fzf_picker'}
    " NeoBundle 'antoinemadec/coc-fzf',                              { 'directory' : 'cocFZF'}
    " NeoBundle 'dstein64/vim-menu',                               { 'directory' : 'vimMenu'}
    " NeoBundle 'chengzeyi/fzf-preview.vim',                         { 'directory' : 'fzf_preview'}
    " NeoBundle 'Alok/notational-fzf-vim',                           { 'directory' : 'notational_FZF'}
    " NeoBundle 'krisajenkins/vim-pipe',                         { 'directory' : 'pipe'}
    " NeoBundle 'regedarek/ZoomWin',                             { 'directory' : 'zoomWin'}
    " NeoBundle 'rbong/galvanize.vim',                               { 'directory' : 'galvanize'}
    " NeoBundleLazy 'idbrii/AsyncCommand',                           { 'directory' : 'asyncCommand', 'autoload' : {'commands' : ['AsyncGrep', 'AsyncShell', 'AsyncCscopeFindSymbol', 'AsyncCscopeFindCalls', 'AsyncCscopeFindX', 'AsyncMake']}}
    " NeoBundle 'kopischke/vim-stay',                                { 'directory' : 'stay'}
    " NeoBundle 'osyo-manga/vim-agrep',                          { 'directory' : 'vim-agrep'}
    " NeoBundle 'ctjhoa/spacevim',                               { 'directory' : 'SpaceVim'}
    " NeoBundle 'junegunn/vim-pseudocl',      { 'directory' : 'pseudocl'}
    " NeoBundle 'junegunn/vim-fnr',           { 'directory' : 'fnr'}
    " NeoBundle     'junegunn/vim-peekaboo',                         { 'directory' : 'peekaboo'}
    " NeoBundle 'Raimondi/delimitMate',                          { 'directory' : 'delimitMate'}
    " NeoBundle 'timakro/vim-searchant',                             { 'directory' : 'searchAnt'}
    " NeoBundle 'nachumk/systemverilog.vim',              { 'directory' : 'systemverilog'}
    " autocmd FileType verilog_systemverilog NeoBundleSource verilog_systemverilog.vim
    " NeoBundle 'ironhouzi/vim-stim',                                { 'directory' : 'stim'}
    " NeoBundle 'houtsnip/vim-emacscommandline',                 { 'directory' : 'emacscommandline'}
    " NeoBundle 'davidhalter/jedi-vim',                          { 'directory' : 'jedi'}
    " NeoBundle 'Valloric/YouCompleteMe',                        { 'directory' : 'YouCompleteMe'}
    " NeoBundle 'LucHermitte/lh-brackets',                       { 'directory' : 'lhBrackets'}
    " NeoBundle 'hecal3/vim-leader-guide',                       { 'directory' : 'LeaderGuide'}
    " NeoBundle 'troydm/shellasync.vim',                         { 'directory' : 'shellasync'}
    " NeoBundleLazy 'vim-nyan-cat/vim-nyan-cat',                     { 'directory' : 'nyan_cat', 'autoload' : {'commands' : ['NyanCat']}}
    " NeoBundle 'vim-scripts/TT2-syntax',                        { 'directory' : 'tt2_syntax'}
    " NeoBundle 'tybenz/vimdeck',                                { 'directory' : 'vimdeck'}
    " NeoBundleLazy 'gangleri/vim-diffsaved',                        { 'directory' : 'diffsaved'}
    " NeoBundle 'dbakker/vim-adjustscroll',                      { 'directory' : 'adjustscroll'}
    " NeoBundle 'vim-perl/vim-perl',                          { 'directory' : 'VimPerl', 'build' : {'unix' : '/home/utils/make-4.0/bin//make clean carp dancer highlight-all-pragmas moose test-more try-tiny'}}
    " autocmd FileType perl,viva,tt2 NeoBundleSource vim-perl
    " NeoBundleLazy 'sk1418/Join',                                   { 'directory' : 'join', 'autoload' : {'commands' : ['Join']}}
    NeoBundle 'tpope/vim-speeddating',                         { 'directory' : 'speeddating'}
    " NeoBundle 'vim-scripts/cmdline-completion',                { 'directory' : 'cmdline-completion'}
    " NeoBundle 'vim-scripts/perl-support.vim',                  { 'directory' : 'perl-support'}
    " autocmd FileType perl NeoBundleSource 'perl-support.vim'
    " NeoBundle 'cazador481/vim-systemverilog',                      { 'directory' : 'vim-systemverilog'}
    " NeoBundle 'osyo-manga/vim-watchdogs',                          { 'directory' : 'watchdogs'}
    " NeoBundle 'gelguy/Cmd2.vim',                               { 'directory' : 'cmd2'}
    " NeoBundle 'mattfoster/vim-Perl-Critic',                     { 'directory' : 'perlCritic'}
    " NeoBundle 'thinca/vim-singleton',                          { 'directory' : 'singleton'}
    " NeoBundle 'ggVGc/vim-fuzzysearch',                         { 'directory' : 'fuzzysearch'}
    " NeoBundle 'jhawthorn/fzy',                                 { 'directory' : 'fzy'}
    " NeoBundle 'calebsmith/vim-lambdify',                       { 'directory' : 'lambify'}
    " NeoBundle 'sk1418/QFGrep',                                 { 'directory' : 'QFGrep'}
    " NeoBundle 'ryanoasis/vim-webdevicons',                     { 'directory' : 'webdevicons'}
    " NeoBundle 'junegunn/vim-emoji',                            { 'directory' : 'vim-emoji'}
    " Plug 'https://github.com/adelarsq/vim-devicons-emoji',                            { 'directory' : 'devicons_emoji'}
    " NeoBundle 'chrisbra/histwin.vim',                          { 'directory' : 'histwin'}
    " NeoBundle 'tpope/vim-haystack',                            { 'directory' : 'haystack'}
    " NeoBundle 'tpope/vim-dispatch',                            { 'directory' : 'vim-dispatch'}
    " NeoBundle 'vim-jp/vital.vim',                              { 'directory' : 'vital'}
    " NeoBundle 'beloglazov/vim-online-thesaurus',               { 'directory' : 'thesaurus'}
    " NeoBundle 'AndrewRadev/switch.vim',                        { 'directory' : 'switch'}
    " NeoBundle 'ipod825/taboverflow.vim',                       { 'directory' : 'taboverflow'}
    " NeoBundle 'vim-ctrlspace/vim-ctrlspace',                             { 'directory' : 'ctrlspace'}
    " NeoBundle 'chimay/wheel',                                  { 'directory' : 'wheel'}
    " NeoBundle 'christoomey/vim-sort-motion',                   { 'directory' : 'sortMotion'}
    " NeoBundle 'thinca/lexima.vim',                             { 'directory' : 'lexima'}
    " NeoBundle 'haya14busa/incsearch.vim',                          { 'directory' : 'incsearch'}
    " NeoBundle 'gelguy/snapshot.vim',                               { 'directory' : 'snapshot'}
    " NeoBundle 'Shougo/neosnippet',                             { 'directory' : 'neosnippet'}
    " NeoBundle 'Shougo/neosnippet-snippets',                    { 'directory' : 'neosnippet-snippets'}
    NeoBundle 'honza/vim-snippets',                            { 'directory' : 'snippets'}
    " NeoBundle 'tpope/vim-projectionist',                       { 'directory' : 'projectionist'}
    " NeoBundle 'kristijanhusak/vim-project-lint',               { 'directory' : 'projectLint'}
    " NeoBundle '5long/pytest-vim-compiler',                     { 'directory' : 'pytest-vim-compiler'}
    " NeoBundle 'FredKSchott/CoVim',                             { 'directory' : 'coVim'}
    " NeoBundle 'FriedSock/smeargle',                            { 'directory' : 'smeargle'}
    " NeoBundle 'JarrodCTaylor/vim-shell-executor',              { 'directory' : 'shell-executor'}
    " NeoBundle 'JazzCore/ctrlp-cmatcher',                       { 'directory' : 'ctrlp-cmatcher'}
    " NeoBundle 'JazzCore/neocomplcache-ultisnips',              { 'directory' : 'neocomplcache-ultisnips'}
    " NeoBundle 'LnL7/vim-tslime',                               { 'directory' : 'tslime'}
    " NeoBundle 'MarcWeber/vim-addon-manager',                   { 'directory' : 'addon-manager'}
    " NeoBundle 'MarcWeber/vim-addon-mw-utils',                  { 'directory' : 'mw_utils'}
    " NeoBundle 'Rykka/colorv.vim',                              { 'directory' : 'colorv'}
    " NeoBundle 'Shougo/context_filetype.vim',                   { 'directory' : 'context_filetype'}
    " NeoBundle 'Shougo/neocomplcache.vim',                      { 'directory' : 'neocomplcache'}
    " NeoBundle 'Shougo/neomru.vim',                             { 'directory' : 'neomru'}
    " NeoBundle 'Shougo/unite-outline',                          { 'directory' : 'unite_outline'}
    " NeoBundle 'kannokanno/unite-todo',                         { 'directory' : 'unite_todo'}
    " NeoBundle 'adelowo/godo',                                  { 'directory' : 'godo'}
    " NeoBundle 'rlue/vim-getting-things-down',                  { 'directory' : 'getting_things_down'}
    " NeoBundle 'Shougo/vimshell.vim',                           { 'directory' : 'vimShell'}
    " NeoBundle 'Wolfy87/vim-enmasse',                           { 'directory' : 'enmasse'}
    " NeoBundle 'vim-scripts/EnhancedJumps',                     { 'directory' : 'EnhancedJumps'}
    " NeoBundle 'dahu/Vimple',                                   { 'directory' : 'vimple'}
    " NeoBundle 'Raimondi/vim-buffalo',                          { 'directory' : 'buffalo'}
    " NeoBundle 'aaronbieber/quicktask',                         { 'directory' : 'quicktask'}
    " NeoBundle 'actionshrimp/vim-xpath',                        { 'directory' : 'xpath'}
    " NeoBundle 'alfredodeza/pytest.vim',                        { 'directory' : 'pytest'}
    " NeoBundle 'amiorin/vim-project',                           { 'directory' : 'project'}
    " NeoBundle 'atweiden/vim-dragvisuals',                      { 'directory' : 'dragvisuals'}
    " NeoBundle 'Jorengarenar/vim-MvVis',                        { 'directory' : 'mvVIS'}
    " NeoBundle 'zirrostig/vim-schlepp',                        { 'directory' : 'schlepp'}
    " NeoBundle 'Rasukarusan/vim-block-paste',                        { 'directory' : 'block-paste'}
    " NeoBundle 'atweiden/vim-vmath',                            { 'directory' : 'vmath'}
    " NeoBundle 'basepi/vim-conque',                             { 'directory' : 'conque'}
    " NeoBundle 'oplatek/Conque-Shell',                          { 'directory' : 'conque'}
    " NeoBundle 'vim-scripts/Conque-GDB',                        { 'directory' : 'conque_gdb'}
    " NeoBundle 'benmills/vimux',                                { 'directory' : 'vimux'}
    " NeoBundle 'qpkorr/vim-renamer',                            { 'directory' : 'renamer'}
    " NeoBundle 'blueyed/CycleColor',                            { 'directory' : 'CycleColor'}
    " NeoBundle 'blueyed/bufkill.vim',                           { 'directory' : 'bufkill_fork'}
    " NeoBundle 'blueyed/colorhighlight.vim',                    { 'directory' : 'colorhighlight'}
    " NeoBundle 'blueyed/smarty.vim',                            { 'directory' : 'smarty'}
    " NeoBundle 'blueyed/vim-diminactive',                       { 'directory' : 'diminactive'}
    " NeoBundle 'blueyed/vim-quickhl',                           { 'directory' : 'blueyed_quickhl'}
    " NeoBundle 't9md/vim-quickhl',                              { 'directory' : 't9md_quickhl'}
    " NeoBundle 'chrisbra/Colorizer',                            { 'directory' : 'Colorizer'}
    " NeoBundle 'chrisbra/SudoEdit.vim',                         { 'directory' : 'SudoEdit'}
    " NeoBundle 'christoomey/vim-tmux-navigator',                { 'directory' : 'tmux-navigator'}
    " NeoBundle 'christoomey/vim-tmux-runner',                   { 'directory' : 'tmux-runner'}
    " NeoBundle 'dbakker/vim-projectroot',                       { 'directory' : 'projectroot'}
    " NeoBundle 'dsawardekar/portkey',                           { 'directory' : 'portkey'}
    " NeoBundle 'edkolev/promptline.vim',                        { 'directory' : 'promptline'}
    " NeoBundle 'eldridgejm/tslime_ipython',                     { 'directory' : 'tslime_ipython'}
    " NeoBundle 'embear/vim-localvimrc',                         { 'directory' : 'localvimrc'}
    " NeoBundle 'epeli/slimux',                                  { 'directory' : 'slimux'}
    " NeoBundle 'ervandew/maximize',                             { 'directory' : 'maximize'}
    " NeoBundle 'ferranpm/vim-colorcode',                        { 'directory' : 'colorcode'}
    " NeoBundle 'fholgado/minibufexpl.vim',                      { 'directory' : 'minibufexpl'}
    " NeoBundle 'fs111/pydoc.vim',                               { 'directory' : 'pydoc'}
    " NeoBundle 'fweep/vim-tabber',                              { 'directory' : 'tabber'}
    " NeoBundle 'garbas/vim-snipmate',                           { 'directory' : 'snipMate'}
    " NeoBundle 'gcmt/wildfire.vim',                             { 'directory' : 'wildfire'}
    " NeoBundle 'gmarik/vundle',                                 { 'directory' : 'vundle'}
    " NeoBundle 'kristijanhusak/vim-packager',                   { 'directory' : 'packager'}
    " NeoBundle 'godlygeek/tabular',                             { 'directory' : 'tabular'}
    " NeoBundle 'google/maktaba',                                { 'directory' : 'maktaba'}
    " NeoBundle 'greyblake/vim-preview',                         { 'directory' : 'preview'}
    " NeoBundle 'guns/vim-sexp',                                 { 'directory' : 'sexp'}
    " NeoBundle 'guns/xterm-color-table.vim',                    { 'directory' : 'xterm-color-table'}
    " NeoBundle 'hsitz/PyScratch',                               { 'directory' : 'PyScratch'}
    " NeoBundle 'hynek/vim-python-pep8-indent',                  { 'directory' : 'python-pep8-indent'}
    " NeoBundle 'inkarkat/VimTAP',                               { 'directory' : 'tap'}
    " NeoBundle 'inkarkat/runVimTests',                          { 'directory' : 'runVimTests'}
    " NeoBundle 'int3/vim-extradite',                            { 'directory' : 'extradite'}
    " NeoBundle 'ivanov/vim-ipython',                            { 'directory' : 'ipython'}
    NeoBundle 'avakhov/vim-yaml',                              { 'directory' : 'vim_yaml'}
    NeoBundle 'elzr/vim-json',                                 { 'directory' : 'vim_json'}
    " NeoBundle 'ivyl/vim-bling',                                { 'directory' : 'bling'}
    " NeoBundle 'jaxbot/github-issues.vim',                      { 'directory' : 'github-issues'}
    " NeoBundle 'jeetsukumaran/vim-filebeagle',                  { 'directory' : 'filebeagle'}
    " NeoBundle 'jmcantrell/vim-diffchanges',                    { 'directory' : 'vim-diffchanges'}
    " NeoBundle 'jmcantrell/vim-fatrat',                         { 'directory' : 'fatrat'}
    " NeoBundle 'jmcantrell/vim-virtualenv',                     { 'directory' : 'virtualenv'}
    " NeoBundle 'johndgiese/vipy',                               { 'directory' : 'vipy'}
    " NeoBundle 'joonty/vdebug',                                 { 'directory' : 'vdebug'}
    " NeoBundle 'jpalardy/vim-slime',                            { 'directory' : 'slime'}
    " NeoBundle 'jalvesaq/vimcmdline',                           { 'directory' : 'vimcmdline'}
    " NeoBundle 'jszakmeister/vim-togglecursor',                 { 'directory' : 'togglecursor'}
    " NeoBundle 'julienr/vim-cellmode',                          { 'directory' : 'cellmode'}
    " NeoBundle 'junegunn/vim-plug',                             { 'directory' : 'plug'}
    " NeoBundle 'justinmk/vim-sneak',                            { 'directory' : 'sneak'}
    " NeoBundle 'hauleth/sad.vim',                               { 'directory' : 'sad'}
    " NeoBundle 'kana/vim-operator-replace',                     { 'directory' : 'operator-replace'}
    " NeoBundle 'kana/vim-operator-user',                        { 'directory' : 'operator-user'}
    " NeoBundle 'kana/vim-smartinput',                           { 'directory' : 'smartinput'}
    " NeoBundle 'kchmck/vim-coffee-script',                      { 'directory' : 'coffee-script'}
    " NeoBundle 'kergoth/vim-hilinks',                           { 'directory' : 'hilinks'}
    " NeoBundle 'klen/python-mode',                              { 'directory' : 'python-mode'}
    " NeoBundle 'hdima/python-syntax',                           { 'directory' : 'python-syntax'}
    " NeoBundle 'reconquest/vim-pythonx',                           { 'directory' : 'pythonx'}
    " NeoBundle 'ColinKennedy/vim-python-function-expander',                           { 'directory' : 'pythonFunctionExpander'}
    " NeoBundle 'kshenoy/vim-togglelist',                        { 'directory' : 'togglelist'}
    " NeoBundle 'kurkale6ka/vim-swap',                           { 'directory' : 'swap'}
    " NeoBundle 'liujoey/vim-easymotion',                        { 'directory' : 'easymotion_2'}
    " NeoBundle 'chaoren/vim-wordmotion',                        { 'directory' : 'wordmotion'}
    " NeoBundle 'prendradjaja/vim-vertigo',                      { 'directory' : 'vertigo'}
    " NeoBundle 'justinmk/vim-ipmotion',                         { 'directory' : 'ipmotion'}
    " NeoBundle 'marczych/vim-lose',                             { 'directory' : 'lose'}
    " NeoBundle 'mattdbridges/bufkill.vim',                      { 'directory' : 'bufkill'}
    " NeoBundle 'mattn/webapi-vim',                              { 'directory' : 'webapi'}
    " NeoBundle 'mhinz/vim-startify',                            { 'directory' : 'startify'}
    " NeoBundle 'mihaifm/vimpanel',                              { 'directory' : 'vimpanel'}
    " NeoBundle 'mipmip/panelmanager.vim',                       { 'directory' : 'panelmanager'}
    " NeoBundle 'mkitt/tabline.vim',                             { 'directory' : 'tabline'}
    " NeoBundle 'mkomitee/vim-gf-python',                        { 'directory' : 'gf-python'}
    " NeoBundle 'mtth/cursorcross.vim',                          { 'directory' : 'cursorcross'}
    " NeoBundle 'mutewinter/vim-tmux',                           { 'directory' : 'tmux'}
    " NeoBundle 'nelstrom/vim-markdown-folding',                 { 'directory' : 'markdown-folding'}
    " NeoBundle 'nelstrom/vim-visual-star-search',               { 'directory' : 'visual-star-search'}
    " NeoBundle 'ntpeters/vim-better-whitespace',                { 'directory' : 'better-whitespace'}
    " NeoBundle 'nvie/vim-rst-tables',                           { 'directory' : 'table'}
    " NeoBundle 'osyo-manga/vim-anzu',                           { 'directory' : 'anzu'}
    " NeoBundle 'paradigm/TextObjectify',                        { 'directory' : 'TextObjectify'}
    " NeoBundle 'urbainvaes/vim-ripple',                         { 'directory' : 'ripple'}
    " NeoBundle 'pydave/vim-ripple',                             { 'directory' : 'ripple'}
    " NeoBundle 'idbrii/vim-ripple',                             { 'directory' : 'vimRipple'}
    " NeoBundle 'q335r49/textabyss',                             { 'directory' : 'textabyss'}
    " NeoBundle 'roman/golden-ratio',                            { 'directory' : 'golden-ratio'}
    " NeoBundle 'rstacruz/sparkup',                              { 'directory' : 'sparkup'}
    " NeoBundle 'saevarb/chronos',                               { 'directory' : 'chronos'}
    " NeoBundle 'scrooloose/nerdcommenter',                      { 'directory' : 'nerdcommenter'}
    " NeoBundle 'Xuyuanp/nerdtree-git-plugin',                   { 'directory' : 'NERD_tree_Git'}
    " NeoBundle 'shawncplus/phpcomplete.vim',                    { 'directory' : 'phpcomplete'}
    " NeoBundle 'sjbach/lusty',                                  { 'directory' : 'lusty'}
    " NeoBundle 'yssl/twcmd.vim',                                { 'directory' : 'twcmd'}
    " NeoBundle 'spiiph/vim-space',                              { 'directory' : 'space'}
    " NeoBundle 'takac/vim-fontmanager',                         { 'directory' : 'fontmanager'}
    " NeoBundle 'thinca/vim-fontzoom',                           { 'directory' : 'fontzoom'}
    " NeoBundle 'thinca/vim-ref',                                { 'directory' : 'ref'}
    " NeoBundle 'thinca/vim-qfreplace',                          { 'directory' : 'qfreplace'}
    " NeoBundle 'jceb/vim-editqf',                               { 'directory' : 'editqf'}
    " NeoBundle 'thisivan/vim-bufexplorer',                      { 'directory' : 'bufexplorer'}
    " NeoBundle 'tommcdo/vim-express',                           { 'directory' : 'express'}
    " NeoBundle 'tommcdo/vim-lion',                              { 'directory' : 'lion'}
    " NeoBundle 'tomtom/checksyntax_vim',                        { 'directory' : 'checkSyntax'}
    " NeoBundle 'tomtom/checksyntax_vim',                        { 'directory' : 'checksyntax'}
    " NeoBundle 'tomtom/quickfixsigns_vim',                      { 'directory' : 'quickfixsigns'}
    " NeoBundle 'tomtom/shymenu_vim',                            { 'directory' : 'shymenu'}
    " NeoBundle 'tomtom/tcomment_vim',                           { 'directory' : 'tcomment'}
    " NeoBundle 'tomtom/tinykeymap_vim',                         { 'directory' : 'tinykeymap'}
    " NeoBundle 'tomtom/tlib_vim',                               { 'directory' : 'tlib'}
    " NeoBundle 'tomtom/tmarks_vim',                             { 'directory' : 'tmarks'}
    " NeoBundle 'tomtom/tmru_vim',                               { 'directory' : 'tmru'}
    " NeoBundle 'tomtom/tplugin_vim',                            { 'directory' : 'tplugin'}
    " NeoBundle 'tomtom/ttagecho_vim',                           { 'directory' : 'ttagecho'}
    " NeoBundle 'tpope/vim-afterimage',                          { 'directory' : 'afterimage'}
    " NeoBundle 'bling/vim-bufferline',                          { 'directory' : 'bufferline'}
    " NeoBundle 'tpope/vim-fireplace',                           { 'directory' : 'fireplace'}
    " NeoBundle 'tpope/vim-markdown',                            { 'directory' : 'markdown'}
    " NeoBundle 'tpope/vim-obsession',                           { 'directory' : 'obsession'}
    " NeoBundle 'tpope/vim-pathogen',                            { 'directory' : 'pathblueyed/vim-quickhlogen'}
    " NeoBundle 'tpope/vim-ragtag',                              { 'directory' : 'ragtag'}
    " NeoBundle 'tpope/vim-rsi',                                 { 'directory' : 'rsi'}
    " NeoBundle 'tpope/vim-sensible',                            { 'directory' : 'sensible'}
    " NeoBundle 'tpope/vim-sleuth',                              { 'directory' : 'sleuth'}
    " NeoBundle 'tpope/vim-unimpaired',                          { 'directory' : 'unimpaired'}
    " NeoBundle 'tpope/vim-vinegar',                             { 'directory' : 'vinegar'}
    " NeoBundle 'tupton/vim-support',                            { 'directory' : 'vim-blueyed/vim-quickhlsupport'}
    " NeoBundle 'tyru/open-browser.vim',                         { 'directory' : 'open-browser'}
    " NeoBundle 'vim-scripts/AnsiEsc.vim',                       { 'directory' : 'AnsiEsc'}
    " NeoBundle 'vim-scripts/AutoComplPop',                      { 'directory' : 'autocomplete'}
    " NeoBundle 'vim-scripts/Color-Scheme-Explorer',             { 'directory' : 'colorSchemeEx'}
    " NeoBundle 'vim-scripts/DirDiff.vim',                       { 'directory' : 'dirdiff'}
    NeoBundle 'will133/vim-dirdiff',                           { 'directory' : 'vim_dirdiff'}
    " NeoBundle 'vim-scripts/IndexedSearch',                     { 'directory' : 'IndexedSearch'}
    " NeoBundle 'vim-scripts/LargeFile',                         { 'directory' : 'LargeFile'}
    " NeoBundle 'vim-scripts/Parameter-Text-Objects',            { 'directory' : 'Parameter-Text-Objects'}
    " NeoBundle 'vim-scripts/QFixToggle',                        { 'directory' : 'QFixToggle'}
    " NeoBundle 'vim-scripts/Rainbow-Parenthsis-Bundle',         { 'directory' : 'Rainbow-Parenthsis-Bundle'}
    " NeoBundle 'vim-scripts/SyntaxAttr.vim',                    { 'directory' : 'SyntaxAttr'}
    " NeoBundle 'vim-scripts/TaskList.vim',                      { 'directory' : 'Taskblueyed/vim-quickhlList'}
    " NeoBundle 'vim-scripts/YankRing.vim',                      { 'directory' : 'YankRing'}
    " NeoBundle 'haya14busa/vim-operator-flashy',                { 'directory' : 'OperatorFlashy'}
    " NeoBundle 'vim-scripts/buffergrep',                        { 'directory' : 'buffergrep'}
    " NeoBundle 'vim-scripts/diffchanges.vim',                   { 'directory' : 'diffchanges'}
    " NeoBundle 'vim-scripts/easytree.vim',                      { 'directory' : 'easytree'}
    " NeoBundle 'vim-scripts/keepcase.vim',                      { 'directory' : 'keepcase'}
    " NeoBundle 'vim-scripts/luarefvim',                         { 'directory' : 'luarefvim'}
    " NeoBundle 'vim-scripts/mru.vim',                           { 'directory' : 'mru'}
    " NeoBundle 'vim-scripts/pac.vim',                           { 'directory' : 'pac'}
    " NeoBundle 'vim-scripts/perforce.vim',                      { 'directory' : 'perforce'}
    " NeoBundle 'vim-scripts/savevers.vim',                      { 'directory' : 'savevers'}
    " NeoBundle 'vim-scripts/taglist.vim',                       { 'directory' : 'taglist'}
    " NeoBundle 'vim-scripts/tracwiki',                          { 'directory' : 'tracwiki'}
    " NeoBundle 'vim-scripts/utl.vim',                           { 'directory' : 'utl'}
    " NeoBundle 'vim-scripts/vcscommand.vim',                    { 'directory' : 'vcscommand'}
    " NeoBundle 'wellle/tmux-complete.vim',                      { 'directory' : 'tmux_complete'}
    " NeoBundle 'wincent/Command-T',                             { 'directory' : 'Command-T'}
    " NeoBundle 'xolox/vim-easytags',                            { 'directory' : 'easytags'}
    " NeoBundle 'xolox/vim-notes',                               { 'directory' : 'notes'}
    " NeoBundle 'xolox/vim-misc',                                { 'directory' : 'Vimmisc'}
    " NeoBundle 'xolox/vim-shell',                               { 'directory' : 'vim-shell'}
    " NeoBundle 'Shougo/vimshell.vim',                           { 'directory' : 'vimshell'}
    " NeoBundle 'zaiste/tmux.vim',                               { 'directory' : 'tmux_syntax'}
    " NeoBundle 'zhaocai/GoldenView.Vim',                        { 'directory' : 'GoldenView'}
    " NeoBundle 'mattboehm/vim-accordion',                       { 'directory' : 'accordion'}
    " NeoBundle 'mattboehm/vim-unstack',                         { 'directory' : 'unstack'}
    " NeoBundle 'zirrostig/vim-schlepp',                         { 'directory' : 'schlepp'}
    " NeoBundle 'tyru/restart.vim'                               { 'directory' : 'restart'}
    " NeoBundle 'gorodinskiy/vim-coloresque'                     { 'directory' : 'coloresque'}
    " NeoBundle 'gko/vim-coloresque'                     { 'directory' : 'coloresque'}
    " NeoBundle 'lepture/vim-jinja',                     { 'directory' : 'jinja'}
    " NeoBundle 'terryma/vim-smooth-scroll',                     { 'directory' : 'smooth-scroll'}
    " NeoBundle 'joeytwiddle/sexy_scroller.vim',                 { 'directory' : 'sexy_scroller'}
    NeoBundle 'psliwka/vim-smoothie',                 { 'directory' : 'smoothie_scroller'}
    " NeoBundle 'kana/vim-smartinput',                           { 'directory' : 'smartinput'}
    " NeoBundle 'Shougo/vimfiler.vim',                           { 'directory' : 'vimfiler'}
    " NeoBundle 'justinmk/vim-dirvish',                          { 'directory' : 'dirvish'}
    " NeoBundle 'bounceme/remote-viewer',                        { 'directory' : 'remoteViewer'}
    " NeoBundle 'gregsexton/gitv',                               { 'directory' : 'gitv'}
    " NeoBundle 'tpope/vim-tbone',                               { 'directory' : 'tbone'}
    NeoBundle 'vim-scripts/genutils',                          { 'directory' : 'genutils'}
    " NeoBundle 'uxcn/vim-x2x',                                  { 'directory' : 'x2x'}
    " NeoBundle 'emilsoman/test-runner.vim',                     { 'directory' : 'test-runner'}
    " NeoBundle 'q335r49/microviche',                            { 'directory' : 'microviche'}
    " NeoBundle 'wellle/targets.vim',                            { 'directory' : 'targets'}
    " NeoBundle 'tpope/vim-endwise',                         { 'directory' : 'endwise'}
    " NeoBundle 'bruno-/vim-all',                                { 'directory' : 'all'}
    " NeoBundle 'ardagnir/united-front',                         { 'directory' : 'united_front'}
    " NeoBundle 'Shougo/unite.vim',                              { 'directory' : 'unite'}
    " NeoBundle 'soh335/unite-qflist',                           { 'directory' : 'unite_qfix'}
    " NeoBundle 'jimf/vim-async-make-green',                     { 'directory' : 'async_make_green'}
    " NeoBundle 'tpope/vim-dotenv',                                  { 'directory' : 'dotenv'}
    " NeoBundleLazy 'Bogdanp/pyrepl.vim',                            { 'directory' : 'pyrepl', 'autoload' : {'commands' : ['PyREPLToggle', 'PyREPLEvalFile']}}
    " NeoBundleLazy 'Peeja/vim-cdo',                                 { 'directory' : 'cdo', 'autoload' : {'commands' : ['Cdo', 'Ldo']}}
    " NeoBundle 'blueyed/file-line',                             { 'directory' : 'file-line'}
    " NeoBundle 'jaxbot/selective-undo.vim',                     { 'directory' : 'selective-undo'}
    " NeoBundle 'TaDaa/vimade',                                  { 'directory' : 'vimade'}
    " NeoBundle 'christoomey/vim-titlecase',                     { 'directory' : 'titlecase'}
    " NeoBundle 'kien/rainbow_parentheses.vim',                  { 'directory' : 'rainbow_parentheses'}
    " NeoBundle 'luochen1990/rainbow',                           { 'directory' : 'rainbow'}
    " NeoBundle 'vim-scripts/diffchar.vim',                      { 'directory' : 'diffchar'}
    " NeoBundle 'junegunn/vim-peekaboo',                         { 'directory' : 'peekaboo'}
    " NeoBundle 'gorkunov/smartpairs.vim',                       { 'directory' : 'smartpairs'}
    " NeoBundle 'vim-scripts/backup.vim',                        { 'directory' : 'backup'}
    " NeoBundleLazy 'vim-scripts/Perldoc.vim',                       { 'directory' : 'perldoc'}
    " autocmd FileType perl,pod NeoBundleSource 'Perldoc.vim'
    " NeoBundle 'vim-scripts/Pydiction',                         { 'directory' : 'Pydiction'}
    " autocmd FileType python NeoBundleSource 'Pydiction'
    " NeoBundle 'vim-scripts/python.vim--Vasiliev',              { 'directory' : 'python'}
    " autocmd FileType python NeoBundleSource 'python.vim--Vasiliev'
    NeoBundle 'rhysd/clever-f.vim',                                { 'directory' : 'clever-f'}
    " NeoBundle 'hrsh7th/vim-eft',                                   { 'directory' : 'eft'}
    " NeoBundle 'paradigm/skybison',                                 { 'directory' : 'skybison'}
    " NeoBundle 'idbrii/vim-searchsavvy',                            { 'directory' : 'searchsavvy'}
    " NeoBundle 'idbrii/vim-notgrep',                                { 'directory' : 'notgrep'}
    " NeoBundle 'bruno-/vim-husk',                                   { 'directory' : 'husk'}
    " NeoBundle 'justinmk/vim-matchparenalways',                     { 'directory' : 'matchparenalways'}
    " NeoBundle 'Townk/vim-autoclose',                               { 'directory' : 'autoClose'}
    " NeoBundle 'jiangmiao/auto-pairs',                          { 'directory' : 'auto-pairs'}
    " NeoBundle 'yakiang/excel.vim',                                 { 'directory' : 'excel'}
    " NeoBundle 'naddeoa/vim-visual-page-percent',                   { 'directory' : 'pagePercent'}
    " NeoBundleLazy 'JessicaKMcIntosh/TagmaTasks',                   { 'directory' : 'TagmaTasks', 'autoload' : {'commands' : ['TagmaTaskClear', 'TagmaTaskMarks', 'TagmaTaskToggle', 'TagmaTasks']}}
    " NeoBundleLazy 'arecarn/crunch',                                { 'directory' : 'crunch', 'autoload' : {'commands' : ['Crunch', 'CrunchLine', 'CrunchBlock']}}
    " NeoBundleLazy 'blueyed/grep.vim',                              { 'directory' : 'grep', 'autoload' : {'commands' : ['Grep', 'GrepAdd', 'Rgrep', 'RgrepAdd', 'GrepBuffer', 'GrepBufferAdd']}}
    " NeoBundle 'cohama/vim-smartinput-endwise',                 { 'directory' : 'smartinput-endwise'}
    NeoBundle 'el-iot/vim-wikipedia-browser',                  { 'directory' : 'wiki_browser'}
    NeoBundleLazy 'itchyny/calendar.vim',                          { 'directory' : 'calendar', 'autoload' : {'commands' : ['Calendar']}}
    " NeoBundle 'mutewinter/swap-parameters',                    { 'directory' : 'swap-parameters'}
    " NeoBundleLazy 'raymond-w-ko/detectindent',                     { 'directory' : 'detectindent', 'autoload' : {'commands' : ['DetectIndent']}}
    " NeoBundle 'vim-scripts/CSApprox',                          { 'directory' : 'CSApprox'}
    " NeoBundleLazy 'vim-scripts/HelpClose',                         { 'directory' : 'HelpClose', 'autoload' : {'commands' : ['HelpAllClose']}}
    " NeoBundle 'vim-scripts/ViewOutput',                        { 'directory' : 'ViewOutput'}
    " NeoBundleLazy 'vim-scripts/compview',                          { 'directory' : 'compview', 'autoload' : {'commands' : ['CompView']}}
    " NeoBundle 'chrisbra/DynamicSigns',                         { 'directory' : 'DynamicSigns'}
    " NeoBundle 'svermeulen/vim-easyclip',                       { 'directory' : 'easyclip'}
    " NeoBundle 'Houl/repmo-vim',                                { 'directory' : 'repmo'}
    " NeoBundle 'tommcdo/vim-lion',                              { 'directory' : 'lion'}
    " NeoBundle 'haya14busa/vim-edgemotion',                     { 'directory' : 'edgemotion'}
    " NeoBundle 'tyru/capture.vim',                              { 'directory' : 'capture'}
    " NeoBundleLazy 'junegunn/limelight.vim',                    { 'directory' : 'limelight', 'autoload' : {'commands' : ['Limelight']}}
    " NeoBundleLazy 'junegunn/goyo.vim',                         { 'directory' : 'goyo', 'autoload' : {'commands' : ['Goyo']}}
    " NeoBundle 'talek/obvious-resize',                          { 'directory' : 'obvious-resize'}
    " NeoBundle 'simeji/winresizer',                             { 'directory' : 'winresizer'}
    " NeoBundle 'junegunn/vim-oblique',                          { 'directory' : 'oblique'}
    " NeoBundle 'pgdouyon/vim-evanesco',                         { 'directory' : 'evanesco'}
    " NeoBundle 'junegunn/vim-pseudocl',                         { 'directory' : 'pseudocl'}
    " NeoBundle 'vim-scripts/Mark--Karkat',                      { 'directory' : 'mark_hilight'}
    " NeoBundle 'severin-lemaignan/vim-minimap',                 { 'directory' : 'minimap'}
    " NeoBundle 'wfxr/minimap.vim',                              { 'directory' : 'minimap_wfxr'}
    " NeoBundle 'dhruvasagar/vim-dotoo',                         { 'directory' : 'doto'}
    " NeoBundle 'takac/vim-hardtime',                                { 'directory' : 'hardtime'}
    " NeoBundle '0x0dea/vim-molasses',                               { 'directory' : 'molasses'}
    " NeoBundle 'vasconcelloslf/vim-foldfocus',                      { 'directory' : 'foldfocus'}
    " NeoBundle 'zefei/vim-wintabs',                                 { 'directory' : 'wintabs'}
    " NeoBundle 'chrisbra/changesPlugin',                            { 'directory' : 'changesPlugin'}
    " NeoBundle 'chrisbra/Replay',                                   { 'directory' : 'Replay'}
    " NeoBundle 'jalanb/viack',                                      { 'directory' : 'viack'}
    " NeoBundle 'katono/rogue.vim',                                  { 'directory' : 'rogue'}
    " NeoBundle 'panozzaj/vim-autocorrect',                          { 'directory' : 'autocorrect'}
    " NeoBundle 'whatyouhide/vim-lengthmatters',                     { 'directory' : 'lengthmatters'}
    " NeoBundle 'richsoni/vim-ecliptic',                             { 'directory' : 'ecliptic'}
    " NeoBundle 'justinmk/vim-gtfo',                                 { 'directory' : 'gtfo'}
    " NeoBundle 'dominikduda/vim_current_word',                      { 'directory' : 'current_word'}
    " NeoBundle 'gbgar/pandoc-sections',                             { 'directory' : 'pandoc-sections'}
    " NeoBundle 'nkantar/SPI.vim',                                   { 'directory' : 'SPI'}
    " NeoBundle 'tommcdo/vim-kangaroo',                              { 'directory' : 'kangaroo'}
    " NeoBundle 'sstallion/vim-whitespace',                          { 'directory' : 'whitespace'}
    " }}}2

    if neobundle#exists_not_installed_bundles()
      echomsg 'Not installed bundles : ' .
	    \ string(neobundle#get_not_installed_bundle_names())
      echomsg 'Please execute ":NeoBundleInstall" command.'
    endif

    NeoBundleCheck
    NeoBundleSaveCache

  " endif
  call neobundle#end()
endif
" }}}1

" {{{ wheel config
 " Init
  let g:wheel_config={}
  let g:wheel_config.maxim={}

  " The file where toruses and circles will be stored and read
  let g:wheel_config.file = '~/.local/share/wheel/auto.vim'
  " Auto read torus file on startup if > 0
  let g:wheel_config.autoread = 1
  " Auto write torus file on exit if > 0
  let g:wheel_config.autowrite = 1
  " Number of backups for the wheel file
  let g:wheel_config.backups = 5
  " The bigger it is, the more mappings available
  let g:wheel_config.mappings = 10
  " Prefix for mappings
  let g:wheel_config.prefix = '<M-q>'
  " Auto cd to project root if > 0
  let g:wheel_config.cd_project = 1
  " Marker of project root
  "let g:wheel_config.project_markers = '.git'
  "let g:wheel_config.project_markers = '.racine-projet'
  " List of markers
  " The project dir is found as soon as one marker is found in it
  let g:wheel_config.project_markers = ['.git', '.racine-projet']
  " Locate database ; default one if left empty
  let g:wheel_config.locate_db = '~/racine/index/locate/racine.db'

  " Maximum number of elements in history
  let g:wheel_config.maxim.history = 50
  " Maximum number of elements in input history
  let g:wheel_config.maxim.input = 100

  " Maximum number of elements in mru
  let g:wheel_config.maxim.mru = 120

  " Maximum number of elements in yank wheel
  let g:wheel_config.maxim.yanks = 300
  " Maximum size of elements in yank wheel
  let g:wheel_config.maxim.yank_size = 3000

  " Maximum number of tabs in layouts
  let g:wheel_config.maxim.tabs = 12
  " Maximum number of horizontal splits
  let g:wheel_config.maxim.horizontal = 3
  " Maximum number of vertical splits
  let g:wheel_config.maxim.vertical = 4
" }}}

" " {{{
" let g:prism_colorschemes = [
" \ '0x7A69_dark',
" \ '1989',
" \ '256-grayvim',
" \ '256-jungle',
" \ '256_adaryn',
" \ '256_asu1dark',
" \ '256_automation',
" \ '256_blackdust',
" \ '256_darkdot',
" \ '256_noir',
" \ '256_redblack',
" \ '3dglasses',
" \ 'Atelier_CaveDark',
" \ 'Atelier_CaveLight',
" \ 'Atelier_DuneDark',
" \ 'Atelier_DuneLight',
" \ 'Atelier_EstuaryDark',
" \ 'Atelier_EstuaryLight',
" \ 'Atelier_ForestDark',
" \ 'Atelier_ForestLight',
" \ 'Atelier_HeathDark',
" \ 'Atelier_HeathLight',
" \ 'Atelier_LakesideDark',
" \ 'Atelier_LakesideLight',
" \ 'Atelier_PlateauDark',
" \ 'Atelier_PlateauLight',
" \ 'Atelier_SavannaDark',
" \ 'Atelier_SavannaLight',
" \ 'Atelier_SeasideDark',
" \ 'Atelier_SeasideLight',
" \ 'Atelier_SulphurpoolDark',
" \ 'Atelier_SulphurpoolLight',
" \ 'Benokai',
" \ 'Black',
" \ 'BlackSea',
" \ 'Blue2',
" \ 'C64',
" \ 'CandyPaper',
" \ 'Chasing_Logic',
" \ 'ChocolateLiquor',
" \ 'ChocolatePapaya',
" \ 'CodeFactoryv3',
" \ 'Dark',
" \ 'Dark2',
" \ 'DarkDefault',
" \ 'DevC++',
" \ 'Dev_Delight',
" \ 'Dim',
" \ 'Dim2',
" \ 'DimBlue',
" \ 'DimGreen',
" \ 'DimGreens',
" \ 'DimGrey',
" \ 'DimRed',
" \ 'DimSlate',
" \ 'Green',
" \ 'IDLE',
" \ 'LAZY',
" \ 'LAZY_inkdeep',
" \ 'Light',
" \ 'LightDefault',
" \ 'LightDefaultGrey',
" \ 'LightTan',
" \ 'LightYellow',
" \ 'Monokai',
" \ 'MountainDew',
" \ 'Mustang',
" \ 'Mustang_Vim_Colorscheme_by_hcalves',
" \ 'OceanicNext',
" \ 'OceanicNextLight',
" \ 'PapayaWhip',
" \ 'PaperColor',
" \ 'PerfectDark',
" \ 'Red',
" \ 'Revolution',
" \ 'SerialExperimentsLain',
" \ 'Slate',
" \ 'SlateDark',
" \ 'Spink',
" \ 'SweetCandy',
" \ 'Tomorrow',
" \ 'Tomorrow-Night',
" \ 'Tomorrow-Night-Blue',
" \ 'Tomorrow-Night-Bright',
" \ 'Tomorrow-Night-Eighties',
" \ 'VIvid',
" \ 'Vivify',
" \ 'White2',
" \ 'abbott',
" \ 'abra',
" \ 'abstract',
" \ 'abyss',
" \ 'active4d',
" \ 'adam',
" \ 'adaryn',
" \ 'adobe',
" \ 'adrian',
" \ 'advantage',
" \ 'adventurous',
" \ 'aerique-dark',
" \ 'af',
" \ 'afterglow',
" \ 'aiseered',
" \ 'alduin',
" \ 'amy',
" \ 'ancient',
" \ 'anderson',
" \ 'angr',
" \ 'anokha',
" \ 'anotherdark',
" \ 'ansi_blows',
" \ 'antares',
" \ 'apprentice',
" \ 'aqua',
" \ 'aquamarine',
" \ 'arcadia',
" \ 'archery',
" \ 'argonaut',
" \ 'artesanal',
" \ 'ashen',
" \ 'asmanian2',
" \ 'asmanian_blood',
" \ 'asmdev',
" \ 'asmdev2',
" \ 'astroboy',
" \ 'astronaut',
" \ 'asu1dark',
" \ 'atom',
" \ 'aurora',
" \ 'automation',
" \ 'autumn',
" \ 'autumn2',
" \ 'autumnleaf',
" \ 'ayu',
" \ 'babymate256',
" \ 'badwolf',
" \ 'bandit',
" \ 'barf',
" \ 'base',
" \ 'base16-3024',
" \ 'base16-apathy',
" \ 'base16-ashes',
" \ 'base16-atelier-cave',
" \ 'base16-atelier-cave-light',
" \ 'base16-atelier-dune',
" \ 'base16-atelier-dune-light',
" \ 'base16-atelier-estuary',
" \ 'base16-atelier-estuary-light',
" \ 'base16-atelier-forest',
" \ 'base16-atelier-forest-light',
" \ 'base16-atelier-heath',
" \ 'base16-atelier-heath-light',
" \ 'base16-atelier-lakeside',
" \ 'base16-atelier-lakeside-light',
" \ 'base16-atelier-plateau',
" \ 'base16-atelier-plateau-light',
" \ 'base16-atelier-savanna',
" \ 'base16-atelier-savanna-light',
" \ 'base16-atelier-seaside',
" \ 'base16-atelier-seaside-light',
" \ 'base16-atelier-sulphurpool',
" \ 'base16-atelier-sulphurpool-light',
" \ 'base16-ateliercave',
" \ 'base16-atelierdune',
" \ 'base16-atelierestuary',
" \ 'base16-atelierforest',
" \ 'base16-atelierheath',
" \ 'base16-atelierlakeside',
" \ 'base16-atelierplateau',
" \ 'base16-ateliersavanna',
" \ 'base16-atelierseaside',
" \ 'base16-ateliersulphurpool',
" \ 'base16-atlas',
" \ 'base16-bespin',
" \ 'base16-black-metal',
" \ 'base16-black-metal-bathory',
" \ 'base16-black-metal-burzum',
" \ 'base16-black-metal-dark-funeral',
" \ 'base16-black-metal-gorgoroth',
" \ 'base16-black-metal-immortal',
" \ 'base16-black-metal-khold',
" \ 'base16-black-metal-marduk',
" \ 'base16-black-metal-mayhem',
" \ 'base16-black-metal-nile',
" \ 'base16-black-metal-venom',
" \ 'base16-brewer',
" \ 'base16-bright',
" \ 'base16-brogrammer',
" \ 'base16-brushtrees',
" \ 'base16-brushtrees-dark',
" \ 'base16-chalk',
" \ 'base16-circus',
" \ 'base16-classic-dark',
" \ 'base16-classic-light',
" \ 'base16-codeschool',
" \ 'base16-cupcake',
" \ 'base16-cupertino',
" \ 'base16-darktooth',
" \ 'base16-default-dark',
" \ 'base16-default-light',
" \ 'base16-dracula',
" \ 'base16-eighties',
" \ 'base16-embers',
" \ 'base16-flat',
" \ 'base16-fruit-soda',
" \ 'base16-github',
" \ 'base16-google-dark',
" \ 'base16-google-light',
" \ 'base16-grayscale-dark',
" \ 'base16-grayscale-light',
" \ 'base16-greenscreen',
" \ 'base16-gruvbox-dark-hard',
" \ 'base16-gruvbox-dark-medium',
" \ 'base16-gruvbox-dark-pale',
" \ 'base16-gruvbox-dark-soft',
" \ 'base16-gruvbox-light-hard',
" \ 'base16-gruvbox-light-medium',
" \ 'base16-gruvbox-light-soft',
" \ 'base16-harmonic-dark',
" \ 'base16-harmonic-light',
" \ 'base16-heetch',
" \ 'base16-heetch-light',
" \ 'base16-helios',
" \ 'base16-hopscotch',
" \ 'base16-horizon-dark',
" \ 'base16-ia-dark',
" \ 'base16-ia-light',
" \ 'base16-icy',
" \ 'base16-irblack',
" \ 'base16-isotope',
" \ 'base16-macintosh',
" \ 'base16-marrakesh',
" \ 'base16-materia',
" \ 'base16-material',
" \ 'base16-material-darker',
" \ 'base16-material-lighter',
" \ 'base16-material-palenight',
" \ 'base16-material-vivid',
" \ 'base16-mellow-purple',
" \ 'base16-mexico-light',
" \ 'base16-mocha',
" \ 'base16-monokai',
" \ 'base16-nord',
" \ 'base16-ocean',
" \ 'base16-oceanicnext',
" \ 'base16-one-light',
" \ 'base16-onedark',
" \ 'base16-outrun-dark',
" \ 'base16-papercolor-dark',
" \ 'base16-papercolor-light',
" \ 'base16-paraiso',
" \ 'base16-phd',
" \ 'base16-pico',
" \ 'base16-pop',
" \ 'base16-porple',
" \ 'base16-railscasts',
" \ 'base16-rebecca',
" \ 'base16-seti',
" \ 'base16-shapeshifter',
" \ 'base16-snazzy',
" \ 'base16-solarflare',
" \ 'base16-solarized-dark',
" \ 'base16-solarized-light',
" \ 'base16-spacemacs',
" \ 'base16-summerfruit-dark',
" \ 'base16-summerfruit-light',
" \ 'base16-synth-midnight-dark',
" \ 'base16-tomorrow',
" \ 'base16-tomorrow-night',
" \ 'base16-tomorrow-night-eighties',
" \ 'base16-tube',
" \ 'base16-twilight',
" \ 'base16-unikitty-dark',
" \ 'base16-unikitty-light',
" \ 'base16-woodland',
" \ 'base16-xcode-dusk',
" \ 'base16-zenburn',
" \ 'basic',
" \ 'basic-dark',
" \ 'basic-light',
" \ 'bayQua',
" \ 'baycomb',
" \ 'bbedit',
" \ 'bboard',
" \ 'bclear',
" \ 'beachcomber',
" \ 'beauty256',
" \ 'beekai',
" \ 'behelit',
" \ 'benlight',
" \ 'bensday',
" \ 'bespin',
" \ 'betterwolf',
" \ 'bigbang',
" \ 'billw',
" \ 'biogoo',
" \ 'birds-of-paradise',
" \ 'birdsofparadise',
" \ 'bitterjug',
" \ 'bjornenki-colorscheme',
" \ 'black_angus',
" \ 'blackbeauty',
" \ 'blackboard',
" \ 'blackboard2',
" \ 'blackboard_black',
" \ 'blackboard_mod',
" \ 'blackdust',
" \ 'blacklight',
" \ 'blackpearl',
" \ 'blackpearl2',
" \ 'blacksea',
" \ 'blaquemagick',
" \ 'blayu',
" \ 'blazer',
" \ 'blink',
" \ 'blue',
" \ 'blueboard',
" \ 'blueboard2',
" \ 'blueboard3',
" \ 'blueboard4',
" \ 'blueboard5',
" \ 'blueboard6',
" \ 'blueboardreborn',
" \ 'bluechia',
" \ 'bluedrake',
" \ 'bluegreen',
" \ 'bluegreen_modified',
" \ 'bluenes',
" \ 'blueprint',
" \ 'blues',
" \ 'blueshift',
" \ 'bluewery',
" \ 'bluewery-light',
" \ 'bluez',
" \ 'blugrine',
" \ 'bluish',
" \ 'bmichaelsen',
" \ 'boa',
" \ 'bocau',
" \ 'bog',
" \ 'boltzmann',
" \ 'bongzilla',
" \ 'borland',
" \ 'boysandgirls',
" \ 'breeze',
" \ 'breezy',
" \ 'brighton',
" \ 'brilliance_black',
" \ 'brilliance_dull',
" \ 'briofita',
" \ 'broduo',
" \ 'brogrammer',
" \ 'brookstream',
" \ 'brown',
" \ 'bubblegum',
" \ 'bubblegum-256-dark',
" \ 'bubblegum-256-light',
" \ 'buddy',
" \ 'burnttoast256',
" \ 'busierbee',
" \ 'busybee',
" \ 'buttercream',
" \ 'bvemu',
" \ 'bw',
" \ 'c',
" \ 'c16gui',
" \ 'cabin',
" \ 'cake',
" \ 'cake16',
" \ 'calmar256-dark',
" \ 'calmar256-light',
" \ 'calmbreeze',
" \ 'camo',
" \ 'campfire',
" \ 'candy',
" \ 'candycode',
" \ 'candyman',
" \ 'caramel',
" \ 'carbonized-dark',
" \ 'carbonized-light',
" \ 'carrot',
" \ 'carvedwood',
" \ 'carvedwoodcool',
" \ 'cascadia',
" \ 'celtics_away',
" \ 'cgpro',
" \ 'chalkboard',
" \ 'challenger_deep',
" \ 'chance-of-storm',
" \ 'charged-256',
" \ 'charon',
" \ 'chela_light',
" \ 'cherryblossom',
" \ 'chlordane',
" \ 'choco',
" \ 'chocolate',
" \ 'chocolateliquor',
" \ 'chroma',
" \ 'chrysoprase',
" \ 'ciscoacl',
" \ 'claire',
" \ 'clarity',
" \ 'classic_modified',
" \ 'cleanphp',
" \ 'cleanroom',
" \ 'clearance',
" \ 'close_to_the_sea',
" \ 'clouds',
" \ 'clouds_midnight',
" \ 'cloudy',
" \ 'clue',
" \ 'coalgraal',
" \ 'cobalt',
" \ 'cobalt2',
" \ 'cobaltish',
" \ 'coda',
" \ 'coda_inkdeep',
" \ 'codeblocks_dark',
" \ 'codeburn',
" \ 'codedark',
" \ 'codeschool',
" \ 'coffee',
" \ 'coldgreen',
" \ 'colorer',
" \ 'colorful',
" \ 'colorful256',
" \ 'colorsbox-faff',
" \ 'colorsbox-greenish',
" \ 'colorsbox-material',
" \ 'colorsbox-stblue',
" \ 'colorsbox-stbright',
" \ 'colorsbox-steighties',
" \ 'colorsbox-stnight',
" \ 'colorscheme_template',
" \ 'colorzone',
" \ 'contrastneed',
" \ 'contrasty',
" \ 'cool',
" \ 'coolglow',
" \ 'corn',
" \ 'corporation',
" \ 'crayon',
" \ 'creeper',
" \ 'crt',
" \ 'crunchbang',
" \ 'cssedit',
" \ 'cthulhian',
" \ 'custom',
" \ 'cyberpunk',
" \ 'd8g_01',
" \ 'd8g_02',
" \ 'd8g_03',
" \ 'd8g_04',
" \ 'danielfischer',
" \ 'dante',
" \ 'dark-ruby',
" \ 'darkBlue',
" \ 'darkZ',
" \ 'darkblack',
" \ 'darkblue',
" \ 'darkblue2',
" \ 'darkbone',
" \ 'darkburn',
" \ 'darkdevel',
" \ 'darkdot',
" \ 'darkeclipse',
" \ 'darker-robin',
" \ 'darkerdesert',
" \ 'darkglass',
" \ 'darkocean',
" \ 'darkrobot',
" \ 'darkroom',
" \ 'darkslategray',
" \ 'darkspectrum',
" \ 'darktango',
" \ 'darkzen',
" \ 'darth',
" \ 'dawn',
" \ 'dawn_mod1',
" \ 'deep-space',
" \ 'deepblue',
" \ 'deepsea',
" \ 'default',
" \ 'dejavu',
" \ 'delek',
" \ 'delphi',
" \ 'deluxe',
" \ 'denim',
" \ 'derefined',
" \ 'desert',
" \ 'desert256',
" \ 'desert256v2',
" \ 'desertEx',
" \ 'desertedocean',
" \ 'desertedoceanburnt',
" \ 'desertink',
" \ 'despacio',
" \ 'detailed',
" \ 'deus',
" \ 'devbox-dark-256',
" \ 'deveiate',
" \ 'developer',
" \ 'diokai',
" \ 'disciple',
" \ 'distill',
" \ 'distinguished',
" \ 'django',
" \ 'django_dark',
" \ 'django_smoothy',
" \ 'dogrun',
" \ 'dominionday',
" \ 'donbass',
" \ 'donttouchme',
" \ 'doorhinge',
" \ 'doriath',
" \ 'dracula',
" \ 'dracula_bold',
" \ 'dual',
" \ 'dull',
" \ 'duotone-dark',
" \ 'duotone-darkcave',
" \ 'duotone-darkdesert',
" \ 'duotone-darkearth',
" \ 'duotone-darkforest',
" \ 'duotone-darkheath',
" \ 'duotone-darklake',
" \ 'duotone-darkmeadow',
" \ 'duotone-darkpark',
" \ 'duotone-darkpool',
" \ 'duotone-darksea',
" \ 'duotone-darkspace',
" \ 'dusk',
" \ 'dw_blue',
" \ 'dw_cyan',
" \ 'dw_green',
" \ 'dw_orange',
" \ 'dw_purple',
" \ 'dw_red',
" \ 'dw_yellow',
" \ 'dzo',
" \ 'earendel',
" \ 'earth',
" \ 'earthburn',
" \ 'eclipse',
" \ 'eclm_wombat',
" \ 'ecostation',
" \ 'editplus',
" \ 'edo_sea',
" \ 'ego',
" \ 'eiffel',
" \ 'eink',
" \ 'eivel',
" \ 'eivel_blue',
" \ 'eivel_dark',
" \ 'eivel_light',
" \ 'ekinivim',
" \ 'ekvoli',
" \ 'elda',
" \ 'eldar',
" \ 'elflord',
" \ 'elise',
" \ 'elisex',
" \ 'elrodeo',
" \ 'elrond',
" \ 'emacs',
" \ 'emacs_strict',
" \ 'enigma',
" \ 'enzyme',
" \ 'equinusocio_material',
" \ 'erebus',
" \ 'erez',
" \ 'espresso',
" \ 'espresso_libre',
" \ 'espresso_tutti',
" \ 'eva',
" \ 'eva01',
" \ 'eva01-LCL',
" \ 'evening',
" \ 'evening1',
" \ 'evening_2',
" \ 'evokai',
" \ 'evolution',
" \ 'fadetogrey',
" \ 'fahrenheit',
" \ 'fairyfloss',
" \ 'fake',
" \ 'falcon',
" \ 'far',
" \ 'felipec',
" \ 'feral',
" \ 'fight-in-the-shade',
" \ 'fine_blue',
" \ 'fine_blue2',
" \ 'firewatch',
" \ 'flatcolor',
" \ 'flatland',
" \ 'flatlandia',
" \ 'flattened_dark',
" \ 'flattened_light',
" \ 'flattown',
" \ 'flattr',
" \ 'flatui',
" \ 'fluidvision',
" \ 'fnaqevan',
" \ 'focuspoint',
" \ 'fog',
" \ 'fogbell',
" \ 'fogbell_light',
" \ 'fogbell_lite',
" \ 'fokus',
" \ 'forLaTeX',
" \ 'forneus',
" \ 'foursee',
" \ 'freckle',
" \ 'freckle_mod1',
" \ 'freckle_mod2',
" \ 'freya',
" \ 'friendship_bracelet',
" \ 'frood',
" \ 'frozen',
" \ 'fruidle',
" \ 'fruit',
" \ 'fruity',
" \ 'fu',
" \ 'funkydashboard',
" \ 'fx',
" \ 'gaea',
" \ 'garden',
" \ 'gardener',
" \ 'gemcolors',
" \ 'genericdc',
" \ 'genericdc-light',
" \ 'gentooish',
" \ 'getafe',
" \ 'getfresh',
" \ 'ghostbuster',
" \ 'gitboard',
" \ 'gitboard2',
" \ 'github',
" \ 'glitterbomb',
" \ 'glow',
" \ 'gobo',
" \ 'golded',
" \ 'golden',
" \ 'goldenrod',
" \ 'goodwolf',
" \ 'google',
" \ 'gor',
" \ 'gotham',
" \ 'gotham256',
" \ 'gothic',
" \ 'grape',
" \ 'gravity',
" \ 'grayorange',
" \ 'graywh',
" \ 'grb256',
" \ 'greens',
" \ 'greenvision',
" \ 'greenwint',
" \ 'grey2',
" \ 'greyblue',
" \ 'greygull',
" \ 'greyhouse',
" \ 'grishin',
" \ 'gruvbox',
" \ 'gruvbox-material',
" \ 'gryffin',
" \ 'guardian',
" \ 'guepardo',
" \ 'h80',
" \ 'habiLight',
" \ 'habilight',
" \ 'hacked_ayu',
" \ 'happy_hacking',
" \ 'happydeluxe',
" \ 'happyjoy',
" \ 'harlequin',
" \ 'heliotrope',
" \ 'hemisu',
" \ 'herald',
" \ 'heroku',
" \ 'heroku-terminal',
" \ 'heroku_samples',
" \ 'herokudoc',
" \ 'herokudoc-gvim',
" \ 'hhazure',
" \ 'hhdblue',
" \ 'hhdcyan',
" \ 'hhdgray',
" \ 'hhdgreen',
" \ 'hhdmagenta',
" \ 'hhdred',
" \ 'hhdyellow',
" \ 'hhorange',
" \ 'hhpink',
" \ 'hhspring',
" \ 'hhteal',
" \ 'hhviolet',
" \ 'highlighter_term',
" \ 'highlighter_term_bright',
" \ 'highwayman',
" \ 'hilal',
" \ 'holokai',
" \ 'hornet',
" \ 'horseradish256',
" \ 'hotpot',
" \ 'hual',
" \ 'hybrid',
" \ 'hybrid-light',
" \ 'hybrid_material',
" \ 'hybrid_reverse',
" \ 'hydrangea',
" \ 'iLife05',
" \ 'iLife06',
" \ 'iPlastic',
" \ 'iangenzo',
" \ 'ib',
" \ 'ibmedit',
" \ 'icansee',
" \ 'iceberg',
" \ 'idleFingers',
" \ 'imathis',
" \ 'immortals',
" \ 'impact',
" \ 'impactG',
" \ 'impactjs',
" \ 'imperial',
" \ 'industrial',
" \ 'industry',
" \ 'ingretu',
" \ 'inkdeep',
" \ 'inkpot',
" \ 'inori',
" \ 'inspiration500000',
" \ 'intellij',
" \ 'ir_black',
" \ 'ir_white',
" \ 'irb256',
" \ 'ironman',
" \ 'itg_flat',
" \ 'itg_flat_transparent',
" \ 'itsasoa',
" \ 'ivanized',
" \ 'jaime',
" \ 'jammy',
" \ 'janah',
" \ 'japanesque',
" \ 'jelleybeans',
" \ 'jellybeans',
" \ 'jellygrass',
" \ 'jellyx',
" \ 'jhdark',
" \ 'jhlight',
" \ 'jiks',
" \ 'jitterbug',
" \ 'juicy',
" \ 'kalahari',
" \ 'kalisi',
" \ 'kalt',
" \ 'kaltex',
" \ 'kate',
" \ 'kellys',
" \ 'khaki',
" \ 'kib_darktango',
" \ 'kib_plastic',
" \ 'kings-away',
" \ 'kiss',
" \ 'kkruby',
" \ 'koehler',
" \ 'kolor',
" \ 'krTheme',
" \ 'kruby',
" \ 'kyle',
" \ 'laederon',
" \ 'lakers_away',
" \ 'landscape',
" \ 'lanox',
" \ 'lanzarotta',
" \ 'lapis256',
" \ 'last256',
" \ 'late_evening',
" \ 'lazarus',
" \ 'legiblelight',
" \ 'leglight2',
" \ 'leo',
" \ 'less',
" \ 'lettuce',
" \ 'leya',
" \ 'lightcolors',
" \ 'lightning',
" \ 'lilac',
" \ 'lilydjwg_dark',
" \ 'lilydjwg_green',
" \ 'lilypink',
" \ 'lingodirector',
" \ 'liquidcarbon',
" \ 'literal_tango',
" \ 'lizard',
" \ 'lizard256',
" \ 'lodestone',
" \ 'loogica',
" \ 'louver',
" \ 'lowlight',
" \ 'lucid',
" \ 'lucius',
" \ 'luinnar',
" \ 'lumberjack',
" \ 'luna',
" \ 'luna-term',
" \ 'lxvc',
" \ 'lyla',
" \ 'mac_classic',
" \ 'macvim-light',
" \ 'made_of_code',
" \ 'madeofcode',
" \ 'magellan',
" \ 'magicwb',
" \ 'mango',
" \ 'manuscript',
" \ 'manxome',
" \ 'marklar',
" \ 'maroloccio',
" \ 'maroloccio2',
" \ 'maroloccio3',
" \ 'mars',
" \ 'martin_krischik',
" \ 'masmed',
" \ 'material',
" \ 'material-monokai',
" \ 'material-theme',
" \ 'materialbox',
" \ 'materialtheme',
" \ 'matrix',
" \ 'maui',
" \ 'mayansmoke',
" \ 'mdark',
" \ 'mellow',
" \ 'menageatrois',
" \ 'merbivore',
" \ 'merbivore_soft',
" \ 'messy',
" \ 'meta5',
" \ 'metacosm',
" \ 'mickeysoft',
" \ 'midnight',
" \ 'midnight2',
" \ 'miko',
" \ 'minimal',
" \ 'minimalist',
" \ 'mint',
" \ 'mizore',
" \ 'mod8',
" \ 'mod_tcsoft',
" \ 'mohammad',
" \ 'mojave',
" \ 'molokai',
" \ 'molokai256',
" \ 'molokai_dark',
" \ 'molokayo',
" \ 'monoacc',
" \ 'monochrome',
" \ 'monoindustrial',
" \ 'monokai',
" \ 'monokai-chris',
" \ 'monokai-phoenix',
" \ 'monokai-soda',
" \ 'monokai_dark',
" \ 'monokai_mod1',
" \ 'monokai_mod2',
" \ 'monokai_txm1',
" \ 'monokai_txm2',
" \ 'monokain',
" \ 'montz',
" \ 'moody',
" \ 'moonshine',
" \ 'moonshine_lowcontrast',
" \ 'moonshine_minimal',
" \ 'mophiaDark',
" \ 'mophiaSmoke',
" \ 'mopkai',
" \ 'more',
" \ 'moria',
" \ 'moriarty',
" \ 'morning',
" \ 'moss',
" \ 'motus',
" \ 'mourning',
" \ 'mrkn256',
" \ 'mrpink',
" \ 'mud',
" \ 'multimarkdown',
" \ 'muon',
" \ 'murphy',
" \ 'mushroom',
" \ 'mustang',
" \ 'mustangblue',
" \ 'myluck',
" \ 'mythos',
" \ 'native',
" \ 'nature',
" \ 'navajo',
" \ 'navajo-night',
" \ 'nazca',
" \ 'nedit',
" \ 'nedit2',
" \ 'nefertiti',
" \ 'neodark',
" \ 'neon',
" \ 'neonwave',
" \ 'nerv-ous',
" \ 'nes',
" \ 'nets-away',
" \ 'neuromancer',
" \ 'neutron',
" \ 'neverland',
" \ 'neverland-darker',
" \ 'neverland2',
" \ 'neverland2-darker',
" \ 'neverness',
" \ 'nevfn',
" \ 'new-railscasts',
" \ 'newspaper',
" \ 'newsprint',
" \ 'nicotine',
" \ 'night',
" \ 'nightVision',
" \ 'night_vision',
" \ 'nightflight',
" \ 'nightflight2',
" \ 'nightfly',
" \ 'nightshade',
" \ 'nightshade_print',
" \ 'nightshimmer',
" \ 'nightsky',
" \ 'nightwish',
" \ 'nisha',
" \ 'no_quarter',
" \ 'noclown',
" \ 'nocturne',
" \ 'nofrils-acme',
" \ 'nofrils-dark',
" \ 'nofrils-light',
" \ 'nofrils-sepia',
" \ 'nord',
" \ 'nordisk',
" \ 'northland',
" \ 'northpole',
" \ 'northsky',
" \ 'norwaytoday',
" \ 'notebook',
" \ 'notepad2',
" \ 'nour',
" \ 'nuvola',
" \ 'obsidian',
" \ 'obsidian2',
" \ 'oceanblack',
" \ 'oceanblack256',
" \ 'oceandeep',
" \ 'oceanic_material',
" \ 'oceanlight',
" \ 'off',
" \ 'offy',
" \ 'olive',
" \ 'omen',
" \ 'one',
" \ 'one-dark',
" \ 'onedark',
" \ 'onehalfdark',
" \ 'onehalflight',
" \ 'orange',
" \ 'orange-moon',
" \ 'orbital',
" \ 'osx_like',
" \ 'otaku',
" \ 'oxeded',
" \ 'pablo',
" \ 'pacific',
" \ 'paintbox',
" \ 'papayawhip',
" \ 'paradox',
" \ 'paramount',
" \ 'parsec',
" \ 'pastelsondark',
" \ 'pastie',
" \ 'peachpuff',
" \ 'peachpuff256mod',
" \ 'peaksea',
" \ 'pencil',
" \ 'pengwynn',
" \ 'penultimate',
" \ 'peppers',
" \ 'perfect',
" \ 'petrel',
" \ 'pf_earth',
" \ 'phd',
" \ 'phoenix',
" \ 'phphaxor',
" \ 'phpx',
" \ 'pic',
" \ 'pink',
" \ 'pink-moon',
" \ 'pixelmuerto',
" \ 'plasticine',
" \ 'playroom',
" \ 'pleasant',
" \ 'plumdumb',
" \ 'potts',
" \ 'predawn',
" \ 'preto',
" \ 'pride',
" \ 'primaries',
" \ 'primary',
" \ 'print_bw',
" \ 'prmths',
" \ 'professional',
" \ 'proton',
" \ 'ps_color',
" \ 'psclone',
" \ 'pspad',
" \ 'psql',
" \ 'pt_black',
" \ 'purify',
" \ 'putty',
" \ 'pw',
" \ 'py-darcula',
" \ 'pyte',
" \ 'python',
" \ 'quagmire',
" \ 'quantum',
" \ 'radicalgoodspeed',
" \ 'raggi',
" \ 'railscasts',
" \ 'railscasts2',
" \ 'railscasts_boost',
" \ 'railsenvy',
" \ 'rainbow_autumn',
" \ 'rainbow_breeze',
" \ 'rainbow_fine_blue',
" \ 'rainbow_fruit',
" \ 'rainbow_neon',
" \ 'rainbow_night',
" \ 'rainbow_sea',
" \ 'rakr',
" \ 'rakr-light',
" \ 'random',
" \ 'rastafari',
" \ 'rcg_gui',
" \ 'rcg_term',
" \ 'rdark',
" \ 'rdark-terminal',
" \ 'rdark-terminal2',
" \ 'redblack',
" \ 'redstring',
" \ 'refactor',
" \ 'relaxedgreen',
" \ 'reliable',
" \ 'reloaded',
" \ 'resesif',
" \ 'revolutions',
" \ 'robinhood',
" \ 'rockets-away',
" \ 'ron',
" \ 'ronakg',
" \ 'rootwater',
" \ 'rtl',
" \ 'rubyblue',
" \ 'rubyrobot',
" \ 'rusticated',
" \ 'ryan-light',
" \ 'sadek1',
" \ 'sand',
" \ 'sandydune',
" \ 'satori',
" \ 'saturn',
" \ 'scala',
" \ 'scame',
" \ 'scheakur',
" \ 'scite',
" \ 'scooby',
" \ 'sea',
" \ 'seagull',
" \ 'sean',
" \ 'seashell',
" \ 'seattle',
" \ 'selenitic',
" \ 'seoul',
" \ 'seoul256',
" \ 'seoul256-light',
" \ 'seti',
" \ 'settlemyer',
" \ 'sexy-railscasts',
" \ 'sf',
" \ 'shades-of-teal',
" \ 'shadesofamber',
" \ 'shine',
" \ 'shiny-white',
" \ 'shobogenzo',
" \ 'sialoquent',
" \ 'sidewalkchalk',
" \ 'sidewalkchalk_green',
" \ 'sienna',
" \ 'sierra',
" \ 'sift',
" \ 'silent',
" \ 'simple256',
" \ 'simple_b',
" \ 'simple_dark',
" \ 'simpleandfriendly',
" \ 'simplewhite',
" \ 'simplon',
" \ 'skittles_autumn',
" \ 'skittles_berry',
" \ 'skittles_dark',
" \ 'sky',
" \ 'slate',
" \ 'slate2',
" \ 'slushnpoppies',
" \ 'smarties',
" \ 'smoothy',
" \ 'smp',
" \ 'smpl',
" \ 'smyck',
" \ 'smyckblue',
" \ 'snow',
" \ 'soda',
" \ 'softblue',
" \ 'softbluev2',
" \ 'softlight',
" \ 'sol',
" \ 'sol-term',
" \ 'solarboard',
" \ 'solarized',
" \ 'solarized++',
" \ 'solarized8',
" \ 'solarized8_dark',
" \ 'solarized8_dark_flat',
" \ 'solarized8_dark_high',
" \ 'solarized8_dark_low',
" \ 'solarized8_flat',
" \ 'solarized8_high',
" \ 'solarized8_light',
" \ 'solarized8_light_flat',
" \ 'solarized8_light_high',
" \ 'solarized8_light_low',
" \ 'solarized8_low',
" \ 'sole',
" \ 'sonofobsidian',
" \ 'sonoma',
" \ 'sorcerer',
" \ 'soruby',
" \ 'soso',
" \ 'sourcerer',
" \ 'southernlights',
" \ 'southwest-fog',
" \ 'space-vim-dark',
" \ 'space_vim_theme',
" \ 'spacecadet',
" \ 'spacecamp',
" \ 'spacecamp_lite',
" \ 'spacegray',
" \ 'spacemacs-theme',
" \ 'spartan',
" \ 'spectacular',
" \ 'spectro',
" \ 'spiderhawk',
" \ 'spring',
" \ 'spring-night',
" \ 'sprinkles',
" \ 'spurs_away',
" \ 'srcery',
" \ 'srcery-drk',
" \ 'stackoverflow',
" \ 'starlight',
" \ 'stefan',
" \ 'stellarized',
" \ 'stereokai',
" \ 'stingray',
" \ 'stonewashed-256',
" \ 'stonewashed-dark-256',
" \ 'stonewashed-dark-gui',
" \ 'stonewashed-gui',
" \ 'stormpetrel',
" \ 'strange',
" \ 'strawimodo',
" \ 'succulent',
" \ 'summercamp',
" \ 'summercamp_mod',
" \ 'summerfruit',
" \ 'summerfruit256',
" \ 'summersun',
" \ 'sunburst',
" \ 'surveyor',
" \ 'swamplight',
" \ 'sweater',
" \ 'swyphs2',
" \ 'symfony',
" \ 'synic',
" \ 'synthwave',
" \ 'tabula',
" \ 'tango',
" \ 'tango-desert',
" \ 'tango-morning',
" \ 'tango-twilight',
" \ 'tango2',
" \ 'tangoX',
" \ 'tangoshady',
" \ 'taqua',
" \ 'tatami',
" \ 'tayra',
" \ 'tchaba',
" \ 'tchaba2',
" \ 'tcsoft',
" \ 'tek',
" \ 'telstar',
" \ 'tempus_autumn',
" \ 'tempus_dawn',
" \ 'tempus_dusk',
" \ 'tempus_fugit',
" \ 'tempus_future',
" \ 'tempus_past',
" \ 'tempus_rift',
" \ 'tempus_spring',
" \ 'tempus_summer',
" \ 'tempus_totus',
" \ 'tempus_warp',
" \ 'tempus_winter',
" \ 'tender',
" \ 'termschool',
" \ 'tesla',
" \ 'test',
" \ 'tetragrammaton',
" \ 'textexmachina_mod',
" \ 'textexmachine',
" \ 'textmate16',
" \ 'thegoodluck',
" \ 'thermopylae',
" \ 'thestars',
" \ 'thor',
" \ 'thornbird',
" \ 'tibet',
" \ 'tidy',
" \ 'tigrana-256-dark',
" \ 'tigrana-256-light',
" \ 'tir_black',
" \ 'tolerable',
" \ 'tomatosoup',
" \ 'tomorrownight',
" \ 'tomorrownight80s',
" \ 'tomorrownight_mod',
" \ 'tony_light',
" \ 'toothpik',
" \ 'torte',
" \ 'transparent',
" \ 'triplejelly',
" \ 'trivial256',
" \ 'trogdor',
" \ 'tropikos',
" \ 'true-monochrome',
" \ 'tubster',
" \ 'turbo',
" \ 'turtles',
" \ 'tutticolori',
" \ 'twilight',
" \ 'twilight256',
" \ 'twilight_remix',
" \ 'twitchy',
" \ 'two-firewatch',
" \ 'two2tango',
" \ 'ubaryd',
" \ 'ubloh',
" \ 'umber-green',
" \ 'understated',
" \ 'underwater',
" \ 'underwater-mod',
" \ 'unicon',
" \ 'up',
" \ 'upstream_sunburst',
" \ 'upstream_vibrant',
" \ 'valloric',
" \ 'vanzan_color',
" \ 'vc',
" \ 'vcbc',
" \ 'venom',
" \ 'vertLaiton',
" \ 'vexorian',
" \ 'vibrantfin',
" \ 'vibrantink',
" \ 'vibrantink_remix',
" \ 'vibranttango',
" \ 'vice',
" \ 'vilight',
" \ 'vim-material',
" \ 'vimbrains',
" \ 'vimbrant',
" \ 'vimgnome',
" \ 'vimhut',
" \ 'vimicks',
" \ 'vintageaurora',
" \ 'visualstudio',
" \ 'vividchalk',
" \ 'vj',
" \ 'void',
" \ 'vorange',
" \ 'vwilight',
" \ 'vydark',
" \ 'vylight',
" \ 'wargrey',
" \ 'warm_grey',
" \ 'warriors-away',
" \ 'wasabi256',
" \ 'watermark',
" \ 'wellsokai',
" \ 'welpe',
" \ 'white',
" \ 'whitebox',
" \ 'whitedust',
" \ 'whys_poignant',
" \ 'widower',
" \ 'wikipedia',
" \ 'win9xblueback',
" \ 'winter',
" \ 'winterd',
" \ 'wintersday',
" \ 'woju',
" \ 'wolfpack',
" \ 'wombat',
" \ 'wombat256',
" \ 'wombat256dave',
" \ 'wombat256i',
" \ 'wombat256mod',
" \ 'wood',
" \ 'wuye',
" \ 'wwdc16',
" \ 'wwdc17',
" \ 'xcode',
" \ 'xcode-default',
" \ 'xcodedark',
" \ 'xcodedarkhc',
" \ 'xcodelight',
" \ 'xcodelighthc',
" \ 'xcodewwdc',
" \ 'xedit',
" \ 'xemacs',
" \ 'xian',
" \ 'xmaslights',
" \ 'xoria256',
" \ 'xterm16',
" \ 'yaml',
" \ 'yeller',
" \ 'yellow-moon',
" \ 'yuejiu',
" \ 'zachstronaut',
" \ 'zazen',
" \ 'zellner',
" \ 'zen',
" \ 'zenburn',
" \ 'zenburnesque',
" \ 'zendnb',
" \ 'zenesque',
" \ 'zephyr',
" \ 'zmrok',
" \ 'znake'
" \ ]
" " }}}
"
" Default options, do not put this in your configuration file
let g:multiterm_opts = {
            \ 'height': 'float2nr(&lines * 0.8)',
            \ 'width': 'float2nr(&columns * 0.8)',
            \ 'row': '(&lines - height) / 2',
            \ 'col': '(&columns - width) / 2',
            \ 'border_hl': 'Comment',
            \ 'border_chars': ['-', '¦', '-', '¦', '?', '?', '?', '?'],
            \ 'show_term_tag': 1,
            \ 'term_hl': 'Normal'
            \ }
" Your configuration should start here
if !exists('g:multiterm_opts')
    let g:multiterm_opts = {}
endif
" This option has a string value instead of number because it is uesd for eval()
let g:multiterm_opts.height = '30'

" maps
" inoremap <c-x><c-j> <c-\><c-o>:Leaderf snippet<cr>

" optional: preview
let g:Lf_PreviewResult = get(g:, 'Lf_PreviewResult', {})
let g:Lf_PreviewResult.snippet = 1

let g:remembers_always_create   = 1
let g:remembers_always_reload   = 1
let g:remembers_tmp_dir         = '~/vim_remembers/tmp_files'
let g:remembers_session_dir     = '~/vim_remembers/tmp_files'
" Add a map of your choice.  I prefer to  use
" <leader>here.  My leader key is set to the
" backslash (\), so by typing \here in normal
" mode, I activate you-are-here.vim. When I
" am ready to close the popups, I use the same
" mapping.
nnoremap <silent> <leader>hh :call you_are_here#Toggle()<CR>
" top, right, bottom, left border in popups
let g:youarehere_border = [1, 1, 1, 1]
" top, right, bottom, left padding in popups
let g:youarehere_padding = [1, 1, 1, 1]
" g:content is passed to expand to render the filename.
" see :help expand for more options
let g:content = "%"

" let g:prism_colorschemes = ['molokai']
" let g:prism_colorschemes = ['gruvbit']
" let g:prism_colorschemes = ['base16-gruvbox-dark-pale']
" let g:prism_colorschemes = ['solarized8_dark']
" let g:prism_colorschemes = ['peachpuff']
set bg=dark
func! s:plugin_setup() abort
    hi Comment gui=italic cterm=italic
    hi Statement gui=bold cterm=bold
    hi VertSplit guibg=NONE ctermbg=NONE
endfunc
func! s:apprentice_setup() abort
  highlight Comment ctermfg=245
  highlight NonText ctermbg=17
endfunc
augroup colorscheme_change | au!
    au ColorScheme psionic|habanight|gruvbit|alchemist call s:plugin_setup()
    au ColorScheme apprentice call s:apprentice_setup()
augroup END

let g:gruvbox_contrast_dark = 'hard'
if !has('nvim')
  let g:prism_colorschemes = ['peachpuff', 'solarized8_dark',
                            \ 'PaperColor', 'OceanicNext',
                            \ 'humanoid', 'gruvbox',
                            \ 'base16-default-dark',
                            \ 'alchemist', 'apprentice', 'gruvbit',
                            \ 'saturnite', 'ghdark', 'codedark', 'bogster']
endif
if &diff
  colorscheme peachpuff
  let g:prism_colorschemes = ['peachpuff']
endif
cmap <c-p> <Plug>CmdlineCompleteBackward
cmap <c-n> <Plug>CmdlineCompleteForward

highlight Pmenu ctermfg=250 ctermbg=238
highlight PmenuSel ctermfg=15 ctermbg=234

inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
let g:acp_enableAtStartup = 0
let g:ranger_terminal = 'urxvt -e'
let g:mw_no_mappings = 1
let g:lens#animate = 0
"" Initialize config dict
"let g:wheel_config={}
"" Auto read torus file on startup if > 0
"let g:wheel_config.autoread = 1
"" Auto write torus file on exit if > 0
"let g:wheel_config.autowrite = 1
"" The file where toruses and circles will be stored and read
"let g:wheel_config.file = '~/.local/share/wheel/auto.vim'
"" The bigger it is, the more mappings available
"let g:wheel_config.mappings = 2
"" Prefix for mappings
""let g:wheel_config.prefix = '<M-w>'
"" Number of backups for the wheel file
"let g:wheel_config.backups = 3
"" Auto cd to project root if > 0
"let g:wheel_config.cd_project = 1
"" Marker of project root
""let g:wheel_config.project_markers = '.git'
"" List of markers: the project dir is found as soon as one marker is found in it
"let g:wheel_config.project_markers = ['.git', '.my-project-root']
"" Maximum number of elements in history
"let g:wheel_config.max_history = 50
"" Autocommands executed after jumping to a location
"autocmd User WheelAfterJump norm zMzx

let g:ripple_enable_mappings = 1
let g:vimwiki_table_auto_fmt = 0
let g:vimwiki_table_mappings = 0
let g:Lf_PreviewInPopup = 1
let g:medieval_langs = ['python=python3', 'ruby', 'sh', 'console=tcsh', 'tcsh']
let g:any_jump_disable_default_keybindings = 1

augroup qfpreview
  autocmd!
  autocmd FileType qf nmap <buffer> p <plug>(qf-preview-open)
augroup END

let g:vimwiki_global_ext = 0
let g:vimwiki_list = [{'path': '~/mypandoc',
    \ 'template_path': '~/mypandoc/templates/',
    \ 'template_default': 'default',
    \ 'path_html': '~/mypandoc/site_html/',
    \ 'custom_wiki2html': 'vimwiki_markdown',
    \ 'template_ext': '.tpl',
    \'syntax': 'markdown',
    \'ext': '.md'}]

let g:monokai_term_italic = 1
let g:embark_terminal_italics = 1
let g:monokai_gui_italic = 1
let CtrlSpaceFileEngine = 'file_engine_linux_amd64'

" nmap <unique> <Leader>m <Plug>ToggleMarkbar
" inoremap <silent><expr> <c-space> coc#refresh()
" flagship
function! FormattedFiletype()
    if &filetype==''
        return ''
    else
        return printf('[%s]', &filetype)
    endif
endfunction

" autocmd User Flags call Hoist("window", "%{FormattedFiletype()}")
" autocmd User Flags call Hoist("buffer", "fugitive#statusline")
" autocmd User Flags call Hoist("global", "%{&ignorecase ? '[IC]' : ''}")

if !exists('##TextYankPost')
  map y <Plug>(highlightedyank)
endif

nmap <unique> ga <Plug>(place-insert)

" signs {{{1 "
let g:Signs_IndentationLevel = 1
" }}}1 " signs
" indent-lines {{{1 "
set conceallevel=1
let g:indentLine_faster = 1
let g:indentLine_enabled = 1
let g:indentLine_concealcursor=0
" let g:indentLine_leadingSpaceChar='·'
" let g:indentLine_color_gui = '#A4E57E'
" }}}1 " indent-lines

" " submode setting for resize {{{1
" " A message will appear in the message line when you're in a submode
" " and stay there until the mode has existed.
" let g:submode_always_show_submode = 1

" " We're taking over the default <C-w> setting. Don't worry we'll do
" " our best to put back the default functionality.
" call submode#enter_with('window', 'n', '', '<C-w>')

" " Note: <C-c> will also get you out to the mode without this mapping.
" " Note: <C-[> also behaves as <ESC>
" call submode#leave_with('window', 'n', '', '<ESC>')

" " Go through every letter
" for key in ['a','b','c','d','e','f','g','h','i','j','k','l','m',
" \           'n','o','p','q','r','s','t','u','v','w','x','y','z']
"   " maps lowercase, uppercase and <C-key>
"   call submode#map('window', 'n', '', key, '<C-w>' . key)
"   call submode#map('window', 'n', '', toupper(key), '<C-w>' . toupper(key))
"   call submode#map('window', 'n', '', '<C-' . key . '>', '<C-w>' . '<C-'.key . '>')
" endfor
" " Go through symbols. Sadly, '|', not supported in submode plugin.
" for key in ['=','_','+','-','<','>']
"   call submode#map('window', 'n', '', key, '<C-w>' . key)
" endfor
" " }}}1

hi CurrentWordTwins guifg=NONE guibg=#fdf6e3 gui=underline,bold,italic

set viewoptions=cursor,folds,slash,unix
let g:signify_vcs_list = ['perforce']
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabDefaultCompletionType = 'context'
" let g:codi#log= '/home/ramondal/logs/codi_log'
let g:codi#interpreters = {
      \ 'python': {
      \ 'bin': ['env', 'PYTHONSTARTUP=', 'python'],
      \ },
      \ 'ruby': {
      \ 'bin': ['irb', '-f'],
      \ },
      \ }
" call singleton#enable()
let g:ycm_python_binary_path = '/usr/bin/python3'
let g:autoformat_verbosemode=1

let ayucolor="mirage" " for mirage version of theme

nmap <silent> ,, <Plug>(cosco-commaOrSemiColon)
imap <silent> ,, <Plug>(cosco-commaOrSemiColon)

" edit vim command/search
" set cedit=<ESC>

" lightline {{{2 "
      " \ 'colorscheme': '16color',
      " \ 'colorscheme': 'OldHope',
      " \ 'colorscheme': 'PaperColor',
      " \ 'colorscheme': 'PaperColor_dark',
      " \ 'colorscheme': 'PaperColor_light',
      " \ 'colorscheme': 'Tomorrow',
      " \ 'colorscheme': 'Tomorrow_Night',
      " \ 'colorscheme': 'Tomorrow_Night_Blue',
      " \ 'colorscheme': 'Tomorrow_Night_Bright',
      " \ 'colorscheme': 'Tomorrow_Night_Eighties',
      " \ 'colorscheme': 'ayu_light', " ok
      " \ 'colorscheme': 'ayu_mirage', " ok
      " \ 'colorscheme': 'darcula',
      " \ 'colorscheme': 'default',
      " \ 'colorscheme': 'deus',
      " \ 'colorscheme': 'jellybeans',
      " \ 'colorscheme': 'landscape',
      " \ 'colorscheme': 'materia',
      " \ 'colorscheme': 'material',
      " \ 'colorscheme': 'molokai',
      " \ 'colorscheme': 'nord',
      " \ 'colorscheme': 'one',
      " \ 'colorscheme': 'powerline',
      " \ 'colorscheme': 'powerlineish', " OK
      " \ 'colorscheme': 'selenized_dark',
      " \ 'colorscheme': 'seoul256',
      " \ 'colorscheme': 'simpleblack',
      " \ 'colorscheme': 'solarized',
      " \ 'colorscheme': 'srcery_drk',
      " \ 'colorscheme': 'wombat',
let g:lightline = {
      \ 'colorscheme': 'powerlineish',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ],
      \   'right': [ ['scrollbar'], ['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype', 'history'] ]
      \ },
      \ 'component': {
      \ 'lineinfo': "%{printf('L:%d/%d:C:%d/%d', line('.'),  line('$'), col('.'), col('$')-1)}",
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \   'history': 'HistoryIndicator',
      \   'scrollbar': 'ScrollStatus',
      \ },
      \ 'subseparator': { 'left': '|', 'right': '|' }
      \ }

function! LightLineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

" Set the maximum length of each buffer's history. Defaults to 100
let g:history_max_len = 1000
" Set filetypes to pass over putting in the history. Defaults to ['netrw']
let g:history_ft_ignore = ['pyc', 'netrw']
" Set file names to pass over putting in the history. Defaults to an empty list
let g:history_fn_ignore = ['/tmp/*']
" Set mappings for the commands.
" This plugin doesn't set any mappings by default, but <BS> and <C-n> are recommended
nnoremap <BS> :HisTravBack<CR>
nnoremap <A-BS> :HisTravForward<CR>

" Use these variables to set custom characters for the history indicators.
" These are also the defaults for terminal vim
let g:history_indicator_back_active      = '⬅'
let g:history_indicator_back_inactive    = '⇦'
let g:history_indicator_forward_active   = '➡'
let g:history_indicator_forward_inactive = '⇨'

function! LightLineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
      \ 'main': 'CtrlPStatusFunc_1',
      \ 'prog': 'CtrlPStatusFunc_2',
      \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
  let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  " SyntasticCheck
  " call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0
" let g:lightline = {
"       \ 'colorscheme': 'solarized_dark',
"       \ }
" }}}2 " lightline

" Activation based on file type
if exists(':RainbowParentheses')
if has('gui_running')
  augroup rainbow_lisp
    autocmd!
    " autocmd FileType lisp,clojure,scheme RainbowParentheses
    autocmd FileType * RainbowParentheses
  augroup END
endif
endif

" do yankstack mapping before everything
if exists(':yankstack')
  call yankstack#setup()
endif
" if exists(':Switch')
  " source $HOME/.vim/my_switch
  " nnoremap - :Switch<CR>
" endif
" if exists('g:loaded_surround') && !exists('b:surround_'.char2nr(':'))
"   let b:surround_{char2nr(':')} = ":\r"
" endif
" Hardtime settings {{{1
let g:hardtime_default_on = 1
let g:hardtime_showmsg = 1
" }}}1
"
" augroup auto_checktime
"   autocmd!
"   autocmd FocusGained,BufEnter,CursorHold * silent! checktime
" augroup end

let g:zipPlugin_ext = '*.zip,*.jar,*.xpi,*.ja,*.war,*.ear,*.celzip,*.oxt,*.kmz,*.wsz,*.xap,*.docx,*.docm,*.dotx,*.dotm,*.potx,*.potm,*.ppsx,*.ppsm,*.pptx,*.pptm,*.ppam,*.sldx,*.thmx,*.crtx,*.vdw,*.glox,*.gcsx,*.gqsx'
" completor settings
let g:completor_auto_trigger = 0
" Use deoplete.
let g:deoplete#enable_at_startup = 1
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<C-x>\<C-u>\<C-n>"
"
" mappings for quick-hl
" nnoremap <Space>h <Plug>(quickhl-manual-this)
" xnoremap <Space>h <Plug>(quickhl-manual-this)
" nnoremap <Space>H <Plug>(quickhl-manual-reset)
" xnoremap <Space>H <Plug>(quickhl-manual-reset

" Default to Unix LF line endings
set ffs=unix

let g:delimitMate_quotes = "\" '"

" syntax highlighting..
" syntax on
" don't syntax-highlight long lines
" set synmaxcol=1000
" filetype plugin indent on
" source neocomplete
" neocomplcache is older one
" if exists(':NeoComplete')
" source $HOME/.vim/neo_complete
" endif
" youcompleteme disable on certain filetypes
let g:ycm_filetype_specific_completion_to_disable = {}
" Solid line for vsplit separator
" set fillchars=vert:'|'
set fillchars=vert:\
nnoremap <silent> <leader>th <C-w>t<C-w>H
nnoremap <silent> <leader>tv <C-w>t<C-w>K

" Always splits to the right and below
set splitright
" set splitbelow

" Set to auto read when a file is changed from the outside load automatically
" set autoread

" Set to auto write file
" set autowriteall
" set autoread

" Give one virtual space at end of line
" set virtualedit=onemore
" Square up visual selections...
set virtualedit=all
" when switching buffer go to the open one"
set switchbuf=useopen

" settings handy ..
" Display an incomplete command in the lower right corner of the Vim window
set showcmd
set display+=lastline
" set cpoptions=Aq
" no long listing"
set more          "Don't page long listings
set secure
let g:webdevicons_enable_nerdtree = 0

" allow to delete using backspace
" set backspace=2
set backspace=indent,eol,start
" Set xterm2 mouse mode to allow resizing of splits with mouse inside Tmux.
" no color sleep through in tmux"
if &term =~ '256color'
set termguicolors
" Disable Background Color Erase (BCE) so that color schemes
" work properly when Vim is used inside tmux and GNU screen.
" See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif
if !has('nvim')
  set ttymouse=xterm2
endif
" other whitespace and indenting related settings
" auto-indent amount when using cindent, >>, << and stuff like that
" set shiftwidth=2
" set softtabstop=2
" set titlestring=%f
" set title titlestring=%<%F%=%l/%L-%P
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)
" multiples of shiftwidth when using >
set shiftround
if executable('rg')
    set grepprg=rg\ --vimgrep
    set grepformat=%f:%l:%c:%m
elseif executable('sift')
    set grepprg=sift\ -nMs\ --no-color\ --binary-skip\ --column\ --no-group\ --git\ --follow
    set grepformat=%f:%l:%c:%m
elseif executable('ag')
    set grepprg=ag\ --vimgrep\ --ignore=\"**.min.js\"
    set grepformat=%f:%l:%c:%m,%f:%l:%m
    let g:ackprg = 'ag --nogroup --nocolor --column'
    let g:ag_prg="ag --nogroup --nocolor --column --depth=0 --smart-case"
    " let g:agprg='ag --nogroup --nocolor --column --depth=0'
let g:ctrlsf_ackprg = 'ag'
elseif executable('ack')
    set grepprg=ack\ --nogroup\ --nocolor\ --ignore-case\ --column
    set grepformat=%f:%l:%c:%m,%f:%l:%m
else " normal grep
  set grepprg=\\grep\ -rnH\ --exclude='.*.swp'\ --exclude='*~'\ --exclude=tags
  set grepformat=%f:%l:%c:%m,%f:%l%m,%f\ \ %l%m
endif
let g:rg_command = 'rg --vimgrep --smart-case'
let g:ackprg = 'rg --vimgrep --smart-case'
let g:ctrlsf_ackprg = 'rg'
" Any empty ack search will search for the work the cursor is on
let g:ack_use_cword_for_empty_search = 1
" Don't jump to first match
cnoreabbrev Ack Ack!
cnoreabbrev ag Ag
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-M> :let @l=@/<CR>/;<CR>?)<CR>%:let @/=@l<CR>

nmap   <C-LeftMouse>         <Plug>(VM-Mouse-Cursor)
nmap   <C-RightMouse>        <Plug>(VM-Mouse-Word)
nmap   <M-C-RightMouse>      <Plug>(VM-Mouse-Column)

if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif
let g:CtrlSpaceProjectRootMarkers = [
         \ ".git",
         \ ".hg",
         \ ".svn",
         \ ".bzr",
         \ "_darcs",
         \ "CVS",
         \ "P4CONFIG"
\ ]

let g:CtrlSpaceCacheDir = expand($HOME)

" set grepprg=ag\ --vimgrep\ $*
" real tabs should be 8, and they will show with set list on
set tabstop=4
set softtabstop=4
set shiftwidth=4
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction
" dont show statusline messages
" hide the insert mode displays
set showmode
" Encoding
set bomb
set binary
if !has('nvim')
  set nottyfast
endif
" set modeline parsing
set modeline
" rt clk pops up a menu"
" set mousemodel=popup
set laststatus=2
set ruler
" dont refresh screen when executing macros
set lazyredraw
set expandtab

xmap m     <Plug>(expand_region_expand)
xmap <m-m> <Plug>(expand_region_shrink)

" set shiftwidth=8 tabstop=8 nowrap joinspaces magic report=0 dict=/usr/dict/words
set shell=csh
set wildchar=<TAB>
" set incsearch
set hlsearch
" map /  <Plug>(incsearch-forward)
" map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" set guifont=-b&h-lucidatypewriter-medium-r-normal-*-*-140-*-*-m-*-iso8859-15

" Make regex a little easier to type
set magic
" fuzzy search {{{1
" function! s:CustomFuzzySearch(string)
"   let pattern = ""
"   let ignore_case = g:Cmd2__complete_ignorecase ? '\c' : ''
"   let char = matchstr(a:string, ".", byteidx(a:string, 0))
"   let pattern = '\V' . ignore_case
"   let pattern .= '\<\%(\[agls]\:\)\?'
"   let pattern .= '\%(\%(\k\*\[._\-#]\)\?' . char . '\|\k\*\%(' . char . '\&\L\)\)'
"   if g:Cmd2__complete_fuzzy
"     let result = ''
"     let i = 1
"     while i < len(a:string)
"       let char = matchstr(a:string, ".", byteidx(a:string, i))
"       let result .= '\%(' . '\%(\k\*\[._\-#]\)\?' . char . '\|'
"       let result .= '\k\*\%(' . char . '\&\L\)' . '\)'
"       let i += len(char)
"     endwhile
"     let pattern .= result
"   else
"     let pattern .= a:string
"   endif
"   let pattern .= g:Cmd2__complete_end_pattern
"   return pattern
" endfunction

" let g:Cmd2_options = {
"       \ '_complete_ignorecase': 1,
"       \ '_complete_uniq_ignorecase': 0,
"       \ '_complete_pattern_func': function('s:CustomFuzzySearch'),
"       \ '_complete_start_pattern': '\<\(\[agls]\:\)\?\(\k\*\[_\-#]\)\?',
"       \ '_complete_fuzzy': 1,
"       \ '_complete_string_pattern': '\v\k(\k|\.)*$',
"       \ '_complete_loading_text': '...',
"       \ }

" let g:Cmd2_cmd_mappings = {
"       \ "CF": {'command': function('Cmd2#ext#complete#Main'), 'type': 'function'},
"       \ "CB": {'command': function('Cmd2#ext#complete#Main'), 'type': 'function'},
"       \ }

" cmap <C-S> <Plug>Cmd2  " Change this to your preferred mapping
" cmap <expr> <Tab> Cmd2#ext#complete#InContext() ? "\<Plug>Cmd2CF" : "\<Tab>"
" cmap <expr> <S-Tab> Cmd2#ext#complete#InContext() ? "\<Plug>Cmd2CB" : "\<S-Tab>"

let g:Cmd2_options = {
      \ '_complete_ignorecase': 1,
      \ '_complete_uniq_ignorecase': 0,
      \ '_complete_fuzzy': 0,
      \ }

" cmap <expr> <Tab> Cmd2#ext#complete#InContext() ? "\<Plug>(Cmd2Complete)" : "\<Tab>"

set wildcharm=<Tab>

" " }}}1
" bookmark settings {{{1 "
highlight BookmarkSign ctermbg=NONE ctermfg=160
highlight BookmarkLine ctermbg=194 ctermfg=NONE
let g:bookmark_sign = '♥'
let g:bookmark_highlight_lines = 1
" }}}1 " bookmark settings

" Column width indicator only for lines exceeding
highlight ColorColumn ctermbg=magenta
" FIXME this is slowing vim down
" call matchadd('ColorColumn', '\%81v', 100)
set colorcolumn=+1
set fillchars=diff:⣿,vert:│
set fillchars=diff:⣿,vert:\|
" terminal behaviour
" set notimeout
" set ttimeout
" set ttimeoutlen=10
" set rel num and current line number"
set timeoutlen=1000 ttimeoutlen=0
set relativenumber
set number
augroup custom_backup
  autocmd!
  au CmdLineEnter * set norelativenumber | redraw
  au CmdLineLeave * set relativenumber
augroup end
set nowrapscan
set nowrap
set whichwrap+=<,>,h,l,[,]
set ls=2
" backup settings copied from somewhere {{{1
" backup/persistance settings
" set undodir=~/.vim/tmp/undo//
" set backupdir=~/.vim/tmp/backup//
" set directory=~/.vim/tmp/swap//
" set backupskip=/tmp/*,/private/tmp/*"
" set backup
" set writebackup
" set noswapfile
" }}}1
" now i am trying to have backup files
set nobackup
" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"
set nowritebackup
" set patchmode=.clean
" set backupskip+=*
set backupdir=./backup//,~/backup//,~/.vim/backup//,.//
set directory=./backup//,~/backup//,~/.vim/backup//,.
" save backups in some dir
let savevers_max = 99
let savevers_dirs = &backupdir
" making backup
let savevers_types = "*,.vimrc,.tmux.conf,.my_cshrc_custom,.my_custom_aliases,tmp_*,cmd_line,neo_complcache,neo_complete,*.txt,*.c,*.cpp,*.h,.vimrc,*.vim,vimrcNV,*.sv,*.svx,*.svh,*.svhx,*.svi,*.svix,README,readme,Readme,*.vxh,*.vh,*.vhx,*.svi,*.svix,*.v,*.vx,*.vt,*.vtx,*.vxt,*.snippets,*.config,cmd_line.*.mk,*.nvmk,*.make,Make*,*.inc,*.weld,*.testlist,*.xml,*.tcl,*.pl,*.pm,*.yaml,*.py,*.sh,*.csh.*.spec,*.def,*.csv"
set noswapfile
set undolevels=1000
" viminfo stores the the state of your previous editing session
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

" vim_git_backups
augroup custom_backup
  autocmd!
  autocmd BufWritePost * call BackupCurrentFile()
augroup end

let s:custom_backup_dir=get(g:, 'vim_git_backups_directory', '~/.vim_git_backups')

function! BackupCurrentFile() abort
  if ((getfsize(fnamemodify(bufname(''), ':p'))/1024)/1024) > 100
    " not write files greater than 100MB
    return
  endif
  let custom_backup_dir_host = s:custom_backup_dir . "_" . hostname()
  if !isdirectory(expand(custom_backup_dir_host))
    let cmd = 'mkdir -p ' . custom_backup_dir_host . ';'
    let cmd .= 'cd ' . custom_backup_dir_host . ';'
    let cmd .= 'git init;'
    call system(cmd)
  endif
  let file = expand('%:p')
  if file =~ fnamemodify(custom_backup_dir_host, ':t') | return | endif
  let file_dir = custom_backup_dir_host . expand('%:p:h')
  let backup_file = custom_backup_dir_host . file
  " call Decho(file)
  " call Decho(backup_file)
  " call Decho(file_dir)
  " call Decho(custom_backup_dir_host)
  let cmd = ''
  if !isdirectory(expand(file_dir))
    let cmd .= 'mkdir -p ' . file_dir . ';'
  endif
  let cmd .= '\rm -f ' . custom_backup_dir_host . '/.git/index.lock;'
  let cmd .= '\cp ' . file . ' ' . backup_file . ';'
  let cmd .= '\cd ' . file_dir . ';'
  " let cmd .= '\git add ' . backup_file . ';'
  let cmd .= '\git add .;'
  let cmd .= '\git commit -m "Backup - `date`";'
  " call Decho(cmd)
  call job_start(['sh', '-c', cmd])
endfunction

function! OpenCurrentFileBackupHistory() abort
  let custom_backup_dir_host = s:custom_backup_dir . "_" . hostname()
  let backup_dir = expand(custom_backup_dir_host . expand('%:p:h'))
  let cmd = "\cd " . backup_dir
  let cmd .= "; \git log -p --since='1 month' " . expand('%:t')

  silent! exe "noautocmd botright pedit vim_git_backups"
  noautocmd wincmd P
  set buftype=nofile
  exe "noautocmd r! ".cmd
  exe "normal! gg"
  noautocmd wincmd p
endfunction

" do a C-a on letter indexed list
set nrformats+=alpha
" Session options"
let g:session_directory='~/vim_session/'
let g:session_extension='.ses'
let g:session_autosave_periodic=600
let g:session_autosave='no'
set sessionoptions+=options
let g:syntastic_enable_perl_checker = 1
let g:syntastic_check_on_open = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
" " skybison {{{2 "
" nnoremap <leader>b 2:<c-u>call SkyBison("b ")<cr>
" nnoremap <leader>t 2:<c-u>call SkyBison("tabe ")<cr>
" nnoremap <leader>h 2:<c-u>call SkyBison("h ")<cr>
" nnoremap <leader>e :<c-u>call SkyBison("e ")<cr>
" nnoremap <leader>i :<c-u>call SkyBison("vs ")<cr>
" nnoremap <leader>s :<c-u>call SkyBison("sp ")<cr>
" " nnoremap :: :<c-u>call SkyBison("")<cr>
" cnoremap <C-l> <c-r>=SkyBison("")<cr><cr>
" " }}}2 " skybison
set viminfo+=n~/.vim/viminfo
if exists("+undofile")
" undofile - This allows you to use undos after exiting and restarting
" This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
" :help undo-persistence
" This is only present in 7.3+
" if isdirectory($HOME . '/.vim/undo') == 0
"  :silent !mkdir -p ~/.vim/undo >& /dev/null
" endif
set undodir=./.vim-undo//
set undodir+=~/.vim/undo//
endif
" clip/yank
let g:EasyClipShareYanks = 1
let g:EasyClipYankHistorySize = 500
if has("persistent_undo")
  set undodir+=~/.vim/undo//
endif
set undofile
set undoreload=10000
" Show matching bracets when text indicator is over them
set showmatch
set matchtime=3
set gdefault
set diffopt+=iwhite
" set diffopt+=hiddenoff
set diffopt+=context:3

" set diffexpr=MyDiff()
" function MyDiff()
"   let opt = ""
"   if &diffopt =~ "icase"
"     let opt = opt . "-i "
"   endif
"   if &diffopt =~ "iwhite"
"     let opt = opt . "-b "
"   endif
"   silent execute "!diff -a --binary -w " . opt . v:fname_in . " " . v:fname_new .
"         \  " > " . v:fname_out
" endfunction
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	 	\ | wincmd p | diffthis
set linebreak " wrap lines only at 'breakat' characters
set autoindent
" set smartindent
set keywordprg=":help" " use vim-help with <K>, rather than man pages
" This is a personal preference, I copy with 'as is' indent, the use '<' or '>' on visual to change it
set copyindent
" fool vim to not create unnecessary indents
inoremap # x<BS>#
" For smartindent, don't handle # specially
" don't force preprocessor lines at column 1
set cinkeys-=0#
" inoremap # X#
inoremap jk <ESC>
if !has('nvim')
  set esckeys
endif
set smarttab
set cindent
set cinoptions=:s,ps,ts,cs
set cinwords=if,else,while,do,for,switch,case
if  has("gui_running")
  let indent_guides_enable_on_vim_startup = 1
endif
set ignorecase
set infercase " case inferred by default
set smartcase
let g:clever_f_show_prompt    = 1
let g:clever_f_across_no_line = 1
let g:clever_f_smart_case     = 1
" change word to upper case in insert mode
inoremap <c-u> <esc>viwUea
" scroll offset"
" " smooth scroll {{{1 "
" if (neobundle#is_sourced('vim-smooth-scroll'))
"   noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
"   noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
"   noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
"   noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
" endif
" " }}}1 " smooth scroll
" " sunset {{{1 "
let g:sunset_latitude = 12.97
let g:sunset_longitude = 77.57
let g:sunset_utc_offset = 5.5
" " }}}1 " sunset
" set scrolloff=2 "skip 2 lines when scrolling
set scrollopt+=hor
set sidescrolloff=10
" no jumpy behaviour
set sidescroll=1
" " confirm action using a dialog box
if  has("gui_running")
  set confirm
endif
" prevent cursor to change position when changing line
set nostartofline
" always show something in statusline
set report=2 " tell us when anything is changed via :...
set regexpengine=1 "
" leave my cursor where it was"
" change to the current dir automatically
set autochdir
" open file in the current buffer dir
set browsedir=buffer
" netrw in tree like browsing
let g:netrw_liststyle=3
let g:netrw_special_syntax=1
let g:netrw_browse_split = 0
"   			=0: re-using the same window  (default)
"   			=1: horizontally splitting the window first
"   			=2: vertically   splitting the window first
"   			=3: open file in new tab
"   			=4: act like "P" (ie. open previous window)
"   			    Note that |g:netrw_preview| may be used
"   			    to get vertical splitting instead of
"   			    horizontal splitting.
let g:netrw_altv = 1
let g:netrw_winsize = 25
" change the cmd window
" set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" dont make all windows same size
set noequalalways
" make C-a and C-x work properly
set nrformats=

" Disable encryption (:X)
" set key=

" When completing by tag, show the whole tag, not just the function name
" set showfulltag
" Various characters are "wider" than normal fixed width characters, but the
" default setting of ambiwidth (single) squeezes them into "normal" width, which
" sucks. Setting it to double makes it awesome.
" set ambiwidth=double

" small status msg for vim
set shortmess=atToOI
" don't give |ins-completion-menu| messages.
set shortmess+=c
set shortmess+=F
" set shortmess=aOstT " shortens messages to avoid 'press a key' prompt
"
" always show signcolumns
set signcolumn=yes
" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>
map <C-S-Insert> <MiddleMouse>
map! <C-S-Insert> <MiddleMouse>
" Writes to the unnamed register also writes to the * and + registers. This
" makes it easy to interact with the system clipboard
" if has ('unnamedplus')
"   set clipboard=unnamedplus
" else
"   set clipboard=unnamed
" endif
" set clipboard+=unnamed " share windows clipboard
" set clipboard^=unnamed " share windows clipboard
if !has('nvim')
  set clipboard=autoselect
  set clipboard=exclude:.*
else
  set mouse=a
  vmap <LeftRelease> "*ygv
endif
" in case clipbpard is not present
" vmap <leader>y :w !xclip <cr><esc>
" Paste without overwriting default register (doesn't work with other registers)
nnoremap c "_c
xnoremap p pgvy
xnoremap p ""p:let @"=@0<CR>
" Escape as normal
tnoremap <esc> <c-\><c-n>
" go to correct column
noremap ' `
" non-saving delete
noremap X "_d
" Fixed I/A for visual
xnoremap <expr> I mode() ==# 'v' ? "\<c-v>I" : mode() ==# 'V' ? "\<c-v>^o^I" : "I"
xnoremap <expr> A mode() ==# 'v' ? "\<c-v>A" : mode() ==# 'V' ? "\<c-v>Oo$A" : "A"
" vnoremap p "_dP
" automatically go to the last of the paste
" nnoremap p p`]
" quickly select text u pasted
noremap gV `[v`]
" for replacing a visual
" vmap <C-r> "_dP
" vnoremap p "0P
" vnoremap P "0P
" xnoremap p "_dP
" xnoremap P "_dP

" " home moves cursor to the first non-blank char
" noremap <expr> <silent> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
" imap <silent> <Home> <C-O><Home>
" noremap 0 ^

" perforce settings
let g:p4EnableRuler=0
let g:p4EnableActiveStatus=0
let g:p4OptimizeActiveStatus = 1

" I want mouse settings also ..
set mouse=a
"           +--Disable hlsearch while loading viminfo
"           | +--Remember marks for last 50 files
"           | |   +--Remember up to 10000 lines in each register
"           | |   |      +--Remember up to 1MB in each register
"           | |   |      |     +--Remember last 1000 search patterns
"           | |   |      |     |     +---Remember last 1000 commands
"           | |   |      |     |     |
"           v v   v      v     v     v
set viminfo=h,'50,<10000,s1000,/1000,:1000

" set viminfo='20,\"50	" read/write a .viminfo file, don't store more
				" than 50 lines of registers
set history=10000         " keep 50 lines of command line history

" sets color of cursor according to the color of its text ..... looks fundu
set t_vs=[5%dm

" disable all folding
" set nofoldenable
function! NeatFoldText() "{{{1
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
" }}}1

" I work  in javascript also ...
" set formatoptions-=tc
set wrapmargin=0
set textwidth=0
let g:leave_my_textwidth_alone=1
set formatoptions=crqwnl1j
set formatoptions-=t
" Change buffer - without saving
" buffer to background without saving
set hidden

" I don't like bells .
set noerrorbells
set visualbell
" disable any beeps or flashes on error
set t_vb=

" echo something on leaving .......
" au VimLeave * echo "Another file ..... gosh I am tired !!"

 " correct these frequent typographical errors
" source $HOME/.vim/spell_correct

" source $VIM/macros/file_select.vim
" map - :set wrapmargin=0<CR>
" map + :set wrapmargin=8<CR>
" map K j.
map <C-^> <C-]>

" menu
:source $VIMRUNTIME/menu.vim

" filelist Completion options
" Better Completion
set complete=.,b,w,u,i,kspell
" disable searching of tags for autocomplete
" set complete-=t
" path is included by default. if u want to not include it
set complete-=i
" set additional files
set path+=$ANCHOR_STEM_GC/src/rtl/ge/**
set path+=$ANCHOR_STEM_GC/src/verif/ge/**
set path+=$ANCHOR_STEM_GC/src/meta/**
set path+=$ANCHOR_STEM_GC/src/test/gold/block/variant/*/ge/**
set path+=$ANCHOR_STEM_GC/src/test/suites/block/ge/**
set path+=$ANCHOR_STEM_GC/src/test/tools/**
set path+=$ANCHOR_STEM_GC/src/**
set path+=$OUT_HOME/$DJ_CONTEXT/library/gc-$DJ_CONTEXT/pub/src/rtl/**
set path+=$OUT_HOME/$DJ_CONTEXT/common/pub/src/rtl/bia_ifrit_logical/**
set path+=$OUT_HOME/$DJ_CONTEXT/library/gc-$DJ_CONTEXT/tmp/src/verif/ge/tb/tb_ge/**
set path+=$OUT_HOME/$DJ_CONTEXT/library/gc-$DJ_CONTEXT/tmp/proj/verif_release_ro/rubix/*/lib/cdl/features/
set completeopt=longest
set completeopt+=menuone
set completeopt+=preview
if !has('nvim')
  set completeopt+=popup
endif
set completeopt+=noselect
set completeopt+=noinsert
set belloff+=ctrlg " if vim beeps during completion
" command line suggestion
set wildmenu
set wildmode=list:longest,full
set wildignorecase
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.o,*.obj,*.a,*.lib,*.elf,*.dll
set wildignore+=*.a,*.o
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" Clojure/Leiningen
set wildignore+=classes
set wildignore+=lib

" tmux complete
let g:tmux_complete_location = "~/.vim/bundle/tmux_complete"

set cpo-=<
" set wildcharm=<C-Z>
" :map <F4> :emenu <C-Z>
" visual special charaters
" Highlight problematic whitespace
" set digraph
if  has("gui_running")
  set list
  " highlight NonText ctermfg=8 guifg=gray
  set listchars=tab:§»,trail:¶,eol:¬,extends:❯,precedes:❮
  set listchars=tab:»·,trail:·
  set listchars=tab:→\ ,trail:·,precedes:«,extends:»,eol:¶
  set listchars=tab:→\ ,trail:␣,extends:…,eol:⏎
  set listchars=tab:‣\ ,trail:·,precedes:«,extends:»,eol:¬
  set listchars=tab:␋\ ,trail:␠,precedes:«,extends:»,eol:␤
  set listchars=tab:>-,trail:.,precedes:<,extends:>,eol:$
  set listchars=tab:▒░,trail:▓,nbsp:░
  set listchars=tab:‣\ ,trail:␣,nbsp:░,precedes:«,extends:»
  set listchars=tab:┝\ ,trail:·,nbsp:░,precedes:«,extends:»
  set listchars=tab:╋\ ,trail:·,nbsp:░,precedes:«,extends:»
  set showbreak=↪
" Only shown when not in insert mode so I don't go insane.
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:·
    au InsertLeave * :set listchars+=trail:·
augroup END
  " if &encoding == "utf-8"
     " set listchars=nbsp:\u2422,conceal:\u22ef,tab:\u2595\u2014,trail:\u02d1,precedes:\u2026,extends:\u2026"
  " else
  "    set listchars=eol:$,trail:-,tab:>-,extends:>,precedes:<,conceal:+
  " endif
endif
" get new chanracters from dig
" use C-k to insert
" Make trailing whitespace annoyingly highlighted.
let  extra_whiteSpace = 1
if extra_whiteSpace
  highlight ExtraWhitespace ctermbg=red guibg=red
  match ExtraWhitespace /\s\+$/
endif

augroup MyAutoCmd
  autocmd!
  autocmd VimEnter * set autochdir
  autocmd BufEnter * silent! lcd %:p:h
" if has('gui_running')
"   autocmd VimEnter,WinEnter,BufNewFile,BufRead,BufEnter,TabEnter * IndentLinesReset
"   autocmd BufReadPost * IndentLinesReset
" endif
  " autocmd BufEnter * :syntax sync fromstart
  " FIXME: this is breaking suddenly
  " if extra_whiteSpace
  "   autocmd BufEnter * match ExtraWhitespace /\s\+$/
  "   " autocmd VimLeavePre * bufdo Purge
  "   autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  "   autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  "   autocmd BufUnload * call clearmatches()
  "   " add this so that future colorscheme changes dont overwrite it"
  "   autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
  " endif
  " remove trailing spaces"
  " autocmd FileType c,cpp,java,php,perl,yaml,vim autocmd BufWritePre <buffer> :%s/\s\+$\|^\s\+$//e
" Turn on cursorline only on active window
  autocmd User fugitive 
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
  autocmd BufReadPost fugitive://* setlocal bufhidden=delete noswapfile readonly
  autocmd WinLeave * setlocal nocursorline
  autocmd VimEnter,WinEnter,BufNewFile,BufRead,BufEnter,TabEnter * if &diff !=# 1  | setlocal cursorline  | endif
  " rainbow parenthesis
  let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
  if exists(':RainbowParentheses')
    autocmd VimEnter * RainbowParenthesesToggle
    autocmd Syntax * RainbowParenthesesLoadRound
    autocmd Syntax * RainbowParenthesesLoadSquare
    autocmd Syntax * RainbowParenthesesLoadBraces
  endif
  autocmd BufNewFile,BufRead,BufWritePre *.log setf log|setlocal nowrap|setlocal nobackup|setlocal noundofile|setlocal complete=.|setlocal autoread
  autocmd BufNewFile,BufRead,BufWritePre *.log.retry setf log|setlocal nobackup|setlocal noundofile|setlocal complete=.
  autocmd BufNewFile,BufRead,BufWritePre *testout* setf log|setlocal nobackup|setlocal nowritebackup|setlocal noundofile|setlocal complete=.
  autocmd BufNewFile,BufRead,BufWritePre /tmp/* setlocal nobackup|setlocal noundofile
  autocmd BufNewFile,BufRead */t186/* setlocal nomodifiable
  autocmd BufNewFile,BufRead */tlit4/* setlocal nomodifiable
  autocmd BufNewFile,BufRead */t210/* setlocal nomodifiable
  autocmd BufNewFile,BufRead */tlit2/* setlocal nomodifiable
  autocmd BufNewFile,BufRead */gplit3/* setlocal nomodifiable
  " set foldmethod=marker
augroup END
" Highlight TODO and FIXME.
augroup HiglightTODO
  autocmd!
  autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', 'NOTE\|TODO\|FIXME\|DRAFT\|HACK', 10)
augroup END
" Rainbow paren
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" remove the trailing white spaces
" set listchars=tab:>.,trail:.,extends:\#,nbsp:.

" kick off emax
" map <F10> :!emacs -nw %<CR>:e!<CR><CR>

" exeute current line
" map <F10> "hyy@h
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

inoremap <c-r>? <c-r>=substitute(@/, '\v^\\\<(.+)\\\>$', '\1', '')<cr>
inoremap <c-a> <esc>I
inoremap <C-c> <ESC>
inoremap <A-a> <esc>A
" inoremap <c-e> <esc>A
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
" cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <M-b>  <S-Left>
cnoremap <M-f>  <S-Right>
cnoremap <M-d>  <S-right><Delete>
" make alt arrows to behave like browser"
nnoremap <M-Left> <C-o>
nnoremap <M-Right> <C-i>
" cnoremap <ESC>b <S-Left>
" cnoremap <Esc>d <S-right><Delete>
" cnoremap <ESC>f <S-Right>
" cnoremap <ESC><C-H> <C-W>
" buffer navigation
nmap <C-q> :e!<CR>
nnoremap gb :ls<CR>:sb
" ctrlp options
let g:ctrlp_match_window_bottom = 1    " Show at bottom of window
let g:ctrlp_working_path_mode = 'ra'   " Our working path is our VCS project or the current directory
let g:ctrlp_working_path_mode = 'carw'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_mru_files = 1              " Enable Most Recently Used files feature
let g:ctrlp_jump_to_buffer = 2         " Jump to tab AND buffer if already open
let g:ctrlp_open_new_file = 'v'        " open selections in a vertical split
let g:ctrlp_open_multiple_files = 'vr' " opens multiple selections in vertical splits to the right
let g:ctrlp_arg_map = 0
let g:ctrlp_dotfiles = 0               " do not show (.) dotfiles in match list
let g:ctrlp_showhidden = 0             " do not show hidden files in match list
let g:ctrlp_split_window = 0
let g:ctrlp_max_height = 40            " restrict match list to a maxheight of 40
let g:ctrlp_use_caching = 0            " don't cache, we want new list immediately each time
let g:ctrlp_max_files = 0              " no restriction on results/file list
let g:ctrlp_dont_split = 'NERD_tree_2' " don't split these buffers
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|gitkeep)$',
  \ 'file': '\v\.(exe|so|dll|log|gif|jpg|jpeg|png|psd|DS_Store|ctags|gitattributes)$'
  \ }
" let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
" let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co'] " if you want to use git for this rather than ag
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.sass-cache$|\.hg$\|\.svn$\|\.yardoc\|public$|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }
" let g:ctrlp_user_command = ['TOT', 'cd %s && cat cscope.files | grep -v -e "/\." ', 'find %s -type f']
let g:ctrlp_root_markers = ['TOT']
let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_follow_symlinks = 1
" sneak {{{1
" let g:sneak#streak = 1
" let g:sneak#s_next = 0
" let g:sneak#use_ic_scs = 1
" nnoremap f <Plug>Sneak_f
" nnoremap F <Plug>Sneak_F
" xnoremap f <Plug>Sneak_f
" xnoremap F <Plug>Sneak_F
" onoremap f <Plug>Sneak_f
" onoremap F <Plug>Sneak_F
" nnoremap t <Plug>Sneak_t
" nnoremap T <Plug>Sneak_T
" xnoremap t <Plug>Sneak_t
" xnoremap T <Plug>Sneak_T
" onoremap t <Plug>Sneak_t
" onoremap T <Plug>Sneak_T
" }}}1
" cursor movement
set noendofline
noremap <expr> G &wrap ? "G$g0" : "G"
noremap <expr> 0 &wrap ? 'g0' : '0'
noremap <expr> $ &wrap ? "g$" : "$"
" j and k should follow the screen
noremap <expr> j v:count > 1 ? 'm`' . v:count . 'j' : 'gj'
noremap <expr> k v:count > 1 ? 'm`' . v:count . 'k' : 'gk'
" vnoremap <expr> j v:count == 0 ? 'gj' : 'j'
" vnoremap <expr> k v:count == 0 ? 'gk' : 'k'
" nnoremap <expr> <Down> v:count == 0 ? 'gj' : 'j'
" vnoremap <expr> <Down> v:count == 0 ? 'gj' : 'j'
" nnoremap <expr> <Up> v:count == 0 ? 'gk' : 'k'
" vnoremap <expr> <Up> v:count == 0 ? 'gk' : 'k'
nnoremap <expr> 'gj' v:count == 0 ? 'j' : 'gj'
nnoremap <expr> 'gk' v:count == 0 ? 'k' : 'gk'
nnoremap <expr> j v:count == 0 ? 'gj' : 'j'
nnoremap <expr> k v:count == 0 ? 'gk' : 'k'

vnoremap <expr> 'gj' v:count == 0 ? 'j' : 'gj'
vnoremap <expr> 'gk' v:count == 0 ? 'k' : 'gk'
vnoremap <expr> j v:count == 0 ? 'gj' : 'j'
vnoremap <expr> k v:count == 0 ? 'gk' : 'k'

vnoremap . :norm.<CR>
" inoremap <Down> <C-o>gj
" inoremap <Up> <C-o>gk
nnoremap gf gF
nnoremap ob :badd <cfile><CR>
nnoremap <C-w><C-f> <C-w><S-f>
nnoremap <C-w>gf <C-w>gF
cnoreabbrev Qa qa
cnoreabbrev QA qa
cnoreabbrev WQ wq
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev WA wa
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Sp sp
cnoreabbrev Vs vs
" easy buffer/split navigation
nnoremap <silent> c<C-h> :leftabove vsplit \| enew<CR>
nnoremap <silent> c<C-j> :below split \| enew<CR>
nnoremap <silent> c<C-k> :above split \| enew<CR>
nnoremap <silent> c<C-l> :rightbelow vsplit \| enew<CR>
nnoremap <silent> <A-Up> :wincmd k<CR>
nnoremap <silent> <A-k> :wincmd k<CR>
nnoremap <silent> <A-Down> :wincmd j<CR>
nnoremap <silent> <A-j> :wincmd j<CR>
nnoremap <silent> <A-Left> :wincmd h<CR>
nnoremap <silent> <A-h> :wincmd h<CR>
nnoremap <silent> <A-Right> :wincmd l<CR>
nnoremap <silent> <A-l> :wincmd l<CR>
nnoremap <silent> <A--> <C-W>_
nnoremap <silent> <A-=> <C-W>=
nnoremap <silent> <A-+> <C-W>+

if has('terminal')
    tnoremap <silent> <M-Left> <C-w>h
    tnoremap <silent> <M-Down> <C-w>j
    tnoremap <silent> <M-Up> <C-w>k
    tnoremap <silent> <M-Left> <C-w>l
endif
" if v:version >= 700
"   au BufLeave * let b:winview = winsaveview()
"   au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
" endif
" provide hjkl movements in Insert mode via the <Alt> modifier key
inoremap <A-h> <C-o>h
inoremap <A-j> <C-o>j
inoremap <A-k> <C-o>k
inoremap <A-l> <C-o>l
" Easier to type, and I never use the default behavior.
" nnoremap <Left> :echo "Use h"<CR>
" nnoremap <Right> :echo "Use l"<CR>
" nnoremap <Up> :echo "Use k"<CR>
" nnoremap <Down> :echo "Use j"<CR>
" vnoremap <Left> <nop>
" vnoremap <Right> <nop>
" vnoremap <Up> <nop>
" vnoremap <Down> <nop>
" inoremap <BS> <ESC>:echo "Use C-h"<CR>a<BS>
" inoremap <Del> <ESC>:echo "Use A-x"<CR>a<Del>
" inoremap <A-x> <Delete>
" nnoremap <Del> :echo "Use x"<CR><Del>
" nnoremap <Home> :echo "use ^"<CR><Home>
" nnoremap <End> :echo "use $"<CR><End>
" nnoremap <A-a> $
" nnoremap <C-a> ^
" inoremap <Home> <Esc>:echo "use C-a"<CR>I
" inoremap <End> <Esc>:echo "use A-a"<CR>i<End>
" nnoremap H ^
" nnoremap L $
" vnoremap L g_
" insert space above and below
nnoremap <silent><C-j> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent><C-k> :set paste<CR>m`O<Esc>``:set nopaste<CR>
" easy tab navigation
nnoremap <silent> <S-Left>  :tabprevious<CR>
nnoremap <silent> <S-h>  :tabprevious<CR>
nnoremap <silent> <S-Right> :tabnext<CR>
nnoremap <silent> <S-l> :tabnext<CR>
inoremap <silent> <S-Left>  <Esc>:tabprevious<CR>i
inoremap <silent> <S-Right> <Esc>:tabnext<CR>i
" hide minimized splits
set winminheight=0
" settings for tabber
if exists('g:autoloaded_tabber') || &cp
  set tabline=%!tabber#TabLine()
  set guioptions-=e
endif
" set winheight=999
" follow symlinks"
" command! -nargs=1 -complete=file EF call EditFile(<f-args>)
" nnoremap EF :execute "edit " . resolve(expand(<f-args>))
" :cabbrev e <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'EF' : 'e')<CR>
function! EditFile(filename)
  if getftype(a:filename) == "link"
    edit resolve(expand(a:filename))
  else
    edit a:filename
  endif
endfunction
" set gdefault
" Take off and nuke the entire buffer contents from space
" (It's the only way to be sure)...
nmap XX 1GdG
augroup gzip
  autocmd!
  autocmd BufReadPre,FileReadPre	*.gz set bin
  autocmd BufReadPost,FileReadPost	*.gz '[,']!gunzip
  autocmd BufReadPost,FileReadPost	*.gz set nobin
  autocmd BufReadPost,FileReadPost	*.gz execute ":doautocmd BufReadPost " . expand("%:r")
  autocmd BufWritePost,FileWritePost	*.gz !mv <afile> <afile>:r
  autocmd BufWritePost,FileWritePost	*.gz !gzip <afile>:r

  autocmd FileAppendPre		*.gz !gunzip <afile>
  autocmd FileAppendPre		*.gz !mv <afile>:r <afile>
  autocmd FileAppendPost		*.gz !mv <afile> <afile>:r
  autocmd FileAppendPost		*.gz !gzip <afile>:r
augroup END

" :cabbrev w <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'W' : 'w')<CR>

" -------------> Edit compressed files <-------------
" :autocmd! BufReadPre,FileReadPre  	*.gz set bin
" :autocmd  BufReadPost,FileReadPost	*.gz '[,']!gunzip
" :autocmd  BufReadPost,FileReadPost	*.gz set nobin
" :autocmd! BufWritePost,FileWritePost	*.gz !mv <afile> <afile>:r
" :autocmd  BufWritePost,FileWritePost	*.gz !gzip <afile>:r
" :autocmd! FileAppendPre			*.gz !gunzip <afile>
" :autocmd  FileAppendPre			*.gz !mv <afile>:r <afile>
" :autocmd! FileAppendPost		*.gz !mv <afile> <afile>:r
" :autocmd  FileAppendPost		*.gz !gzip <afile>:r
" autoload vimrc
" autoload VIMRC
" augroup myvimrc
"    au!
"    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYVIMRC | endif
" augroup END
" augroup filetype_vim
" :autocmd!
" :autocmd FileType vim setlocal textwidth=0
" augroup END

augroup filetype_cfg
:autocmd!
:autocmd BufNewFile,BufRead,BufEnter *.cfg setf yaml|set syntax=yaml
augroup END

" -------------> Perl programs <-------------
augroup filetype_perl
:autocmd!
:autocmd BufEnter  *.pl		set ai si cin formatoptions=croql|set iskeyword+=_ |set filetype=perl |setlocal comments=b:# |set iskeyword-=:
:autocmd BufEnter  *.pm		set ai si cin formatoptions=croql|set iskeyword+=_ |set filetype=perl |setlocal comments=b:# |set iskeyword-=:
:autocmd BufLeave  *.pl		set nosi nocin formatoptions=tcq |set comments=sr:/*,mb:*,el:*/,://,b:#,:%,:XCOMM,n:>,fb:-
" autocmd! BufReadPost,BufWritePost,FileReadPost,FileWritePost *.pl call ShowCriticisms()
" autocmd! BufReadPost,BufWritePost,FileReadPost,FileWritePost *.pm call ShowCriticisms()
" :au BufNewFile,BufRead *.pl setf perl
" :au BufNewFile,BufRead *.pm setf pod|setlocal syntax=perl
augroup END

" without this crontab does not work
augroup filetype_crontab
:autocmd!
:autocmd FileType crontab set backupcopy=yes
augroup END

augroup filetype_ale
:autocmd!
:autocmd BufNewFile,BufEnter,BufRead *.ale set filetype=cpp | setlocal commentstring=//\ %s 
augroup END
augroup filetype_dj
:autocmd!
:autocmd BufNewFile,BufEnter,BufRead *.dj set filetype=ruby
augroup END
augroup filetype_dv
:autocmd!
:autocmd BufNewFile,BufEnter,BufRead *.dv set filetype=ruby  | setlocal commentstring=//\ %s
augroup END

augroup filetype_snippets
:autocmd!
:autocmd FileType snippets setlocal modeline
augroup END

" -------------> Create tags   <-------------
" cscope
set tags=./tags;
set tags+=$HOME/ctags/vrtl/tags,tags;`depth`
set tags+=~/tags
let g:easytags_dynamic_files = 1
set cscopequickfix=s-,c-,d-,i-,t-,e-,g-
" set cscopequickfix=s-,c-,d-,i-,t-,e-

" -------------> C programs and header files <-------------
augroup filetype_java
:autocmd!
:autocmd BufEnter *.java,*.l,*.y,*.c,*.cc,*.h,*.r set ai si cin formatoptions=crql
:autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r set nosi nocin formatoptions=tcq
" :autocmd BufEnter *.java,*.l,*.y,*.c,*.cc,*.h,*.r set comments=sr:/*,mb:*,el:*/,://
" :autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r set comments=sr:/*,mb:*,el:*/,://,b:#,:%,:XCOMM,n:>,fb:-
" :autocmd BufEnter *.java,*.l,*.y,*.c,*.cc,*.h,*.r map <F1> :!man -a <cword><CR><CR>
" :autocmd BufEnter *.l,*.y,*.c,*.cc,*.h,*.r map <F2> mpI/* <ESC>A */<ESC>`pj
" :autocmd BufEnter *.l,*.y,*.c,*.cc,*.h,*.r map <F3> mp^3x$xxx`pj
" :autocmd BufEnter *.java                   map <F2> mpI//<ESC>`pj
" :autocmd BufEnter *.java                   map <F3> mp^2x`pj
" :autocmd BufEnter *.java,*.l,*.y,?akefile*,*.c,*.cc,*.h,*.r map <F4> :!ctags -t *.{c,cc,h}<CR>
" :autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r unmap <F1>
" :autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r unmap <F2>
" :autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r unmap <F3>
" :autocmd BufLeave *.java,*.l,*.y,?akefile*,*.c,*.cc,*.h,*.r unmap <F4>
augroup END

augroup filetype_xml
:autocmd!
:autocmd BufEnter *.xml set filetype=xml
:autocmd BufEnter *.xml set foldcolumn=4
let g:xml_syntax_folding=1
:autocmd FileType xml setlocal foldmethod=syntax
:autocmd BufUnload *.xml syntax clear
augroup END

" -------------> Lisp source files <-------------
augroup filetype_lisp
:autocmd!
:autocmd BufEnter  *.l		set lisp sm
:autocmd BufEnter  *.l		source $VIM/syntax/lisp.vim
:autocmd BufEnter  *.l		map <F5> :w<CR>:!akcl < %<CR>
:autocmd BufEnter  *.l		map! <F5> <ESC>:w<CR>:!akcl < %<CR>
:autocmd BufLeave  *.l		set nolisp nosm
:autocmd BufLeave  *.l		unmap <F5>
:autocmd BufLeave  *.l		unmap! <F5>
:autocmd BufLeave  *.l		syntax clear
augroup END

" -------------> TeX & LaTeX source files <-------------
augroup filetype_tex
:autocmd!
:autocmd BufEnter *.tex		map! <F1> }
:autocmd BufEnter *.tex		map! <F2> {\bf
:autocmd BufEnter *.tex		map! <F3> {\em
:autocmd BufEnter *.tex		map! <F4> {\

:autocmd BufEnter *.tex		ab hp hyperplane
:autocmd BufEnter *.tex		ab hps hyperplanes
:autocmd BufEnter *.tex		ab hc hypercube
:autocmd BufEnter *.tex		ab hcs hypercubes
:autocmd BufEnter *.tex		ab nd n-dimensional
:autocmd BufEnter *.tex		ab kd k-dimensional
:autocmd BufEnter *.tex		ab gc graycode
augroup END

" -------------> Haskell source files <-------------
augroup filetype_haskell
:autocmd!
:autocmd BufEnter *.gs		map <F1> :w<CR>:!gofer %<CR>
:autocmd BufLeave *.gs		unmap <F1>
augroup END

augroup filetype_patch
:autocmd!
:autocmd BufEnter patch setlocal filetype=patch |setlocal syntax=diff
:autocmd Bufunload patch syntax clear
augroup END

augroup PatchDiffHighlight
  autocmd!
  autocmd FileType diff syntax enable | setlocal nocursorline
augroup END

let g:committia_use_singlecolumn = 'always'
augroup filetype_make
:autocmd!
:au BufNewFile,BufRead Makeppfile setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead Makeppfile.* setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead *.make setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead rtlmakefile.inc setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead vplmakefile.inc setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead vcsmakefile.inc setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead *.config setf make |setlocal ts=4 sts=4 sw=4 expandtab
" autocmd FileType make NeoCompleteLock
" autocmd FileType gitcommit NeoCompleteLock
" :autocmd BufLeave,FocusLost  Makefile* silent! wall
augroup END
" local make
set makeprg=make
" set makeprg=/home/nv/bin//qsub\ -Is\ -q\ o_submit\ --projectMode\ direct\ -P\ mobile_t186_hw_mmplex_nvcsi\ /home/nv/bin//nvrun\ nvmk\ -c\ .\ NV_BUILD_PLATFORM=Linux_x86_64\ $*
function! SetmakePrg()
  return "cd" . resolve(expand('%:p:h')) . "&& `depth`/bin/nvmk\ -c\ .\ -d\ NV_BUILD_PLATFORM=Linux_x86_64\ $*"
endfunction

augroup filetype_tt2
:autocmd!
  :au BufNewFile,BufRead *.tt setf tt2 |setlocal commentstring=//\ %s
augroup END

" set foldmethod to manual when editing file
function! s:setFoldMarker()
  let b:last_fdm = &foldmethod
  setlocal foldmethod=marker
endfunction
function! s:resFoldMethod()
  let &l:foldmethod = b:last_fdm
  silent! normal zv
endfunction
augroup fold
  autocmd!
  autocmd InsertEnter * call s:setFoldMarker()
  autocmd InsertLeave * call s:resFoldMethod()
augroup END

augroup filetype_verilog
:autocmd!
" :au BufNewFile,BufRead *.sv setf verilog |set foldmethod=indent/syntax|set foldnestmax=12|set shiftwidth=4|set softtabstop=4|set tabstop=4
" :au BufNewFile,BufRead *.sv setf verilog |setlocal foldnestmax=12|setlocal shiftwidth=4|setlocal softtabstop=4|setlocal tabstop=4|setlocal fdc=4|source \~/.vim/cus_fold/folding.vim|call MarkdownSVFolds()
:au BufNewFile,BufEnter,BufRead *.ness setf verilog_systemverilog |setlocal foldnestmax=12|setlocal shiftwidth=4|setlocal softtabstop=4
:au BufNewFile,BufEnter,BufRead *.spp setf verilog
:au BufNewFile,BufEnter,BufRead *.vx setf viva
:au BufNewFile,BufEnter,BufRead *.dpl setf deperl
:au BufNewFile,BufEnter,BufRead *.v setf verilog |setlocal commentstring=//\ %s
:au BufNewFile,BufEnter,BufRead *.vcp setf viva
:au BufNewFile,BufEnter,BufRead *.vcp.err setf viva
:au BufNewFile,BufEnter,BufRead *.vhx setf viva
:au BufNewFile,BufEnter,BufRead *.vxh setf viva
:au BufNewFile,BufEnter,BufRead *.vhxcp.err setf viva
:au BufNewFile,BufEnter,BufRead *.v.exp setf verilog
:au BufNewFile,BufEnter,BufRead *.vtx setf verilog
:au BufNewFile,BufEnter,BufRead *.svx setf verilog_systemverilog
:au BufNewFile,BufEnter,BufRead *.svix setf verilog_systemverilog
:au BufNewFile,BufEnter,BufRead *.svcp setf verilog_systemverilog
:au BufNewFile,BufEnter,BufRead *.svi setf verilog_systemverilog
:au BufNewFile,BufEnter,BufRead *.svixcp setf verilog_systemverilog
:au BufNewFile,BufEnter,BufRead *.gv setf verilog
:au BufNewFile,BufEnter,BufRead *.spec setf verilog
:au BufNewFile,BufEnter,BufRead *.sv setf verilog_systemverilog |setlocal foldnestmax=12|setlocal shiftwidth=4|setlocal softtabstop=4|setlocal commentstring=//\ %s 
:au BufNewFile,BufEnter,BufRead *.vhxcp setf verilog|setlocal commentstring=//\ %s 
:au BufNewFile,BufEnter,BufRead *.svh setf verilog_systemverilog|setlocal foldnestmax=12|setlocal shiftwidth=4|setlocal softtabstop=4|setlocal commentstring=//\ %s 
:au BufNewFile,BufEnter,BufRead *.svhx setf verilog_systemverilog

" :au Filetype *verilog* set softtabstop=2
:au BufReadPost * if exists("b:current_syntax")
:au BufReadPost *   if b:current_syntax == "verilog"
:au BufReadPost *     let b:verilog_indent_modules = 1
:au BufReadPost *   endif
:au BufReadPost * endif
" When editing a file, always jump to the last cursor position
" :autocmd BufReadPost *
"   \ if line("'\"") > 0 && line ("'\"") <= line("$") |
"   \   exe "normal g'\"" |
"   \ endif
 :autocmd BufReadPost,BufNewFile *
  \ let b:match_words = 
  \ '\<\&Always\>:\<\&End\>,' .
  \ '\<case\>\|\<casex\>\|\<casez\>:\<endcase\>,' .
  \ '\<begin\>:\<end\>,'  .
  \ '\<fork\>:\<join\>,' .
  \ '\<if\>.*\<begin\>:\<else\>:\<else\s\+if\>,' .
  \ '\<module\>:\<endmodule\>,' .
  \ '\<\&Module\>:\<\&EndModule\>,' .
  \ '\<task\>:\<endtask\>,' .
  \ '\<function\>:\<endfunction\>,' .
  \ '\<class\>:\<endclass\>,' .
  \ '\<program\>:\<endprogram\>,' .
  \ '\<#ifdef\>:\<#else\>|\<#endif\>,' .
  \ '\<`ifdef\>:\<`else\>:\<`elsif\>:\<`endif\>'
  \ | let b:match_ignorecase=0
  " \ runtime macros/matchit.vim |
augroup END

" -------------> VIVA Files <-------------------------
" :source ~/.vim/syntax/viva.vim
" :au BufNewFile,BufRead *.vx,*.v set ft=bsv
" :au BufNewFile,BufRead *.vhx,*.v set ft=bsv
" :au BufNewFile,BufRead *.vtx,*.v set ft=bsv
" :au BufNewFile,BufRead *.svx,*.svix set ft=bsv
" :au BufNewFile,BufRead *.svcp,*.svi set ft=bsv
" -------------> Html Files <-------------------------
augroup filetype_html
  :autocmd!
  nmap  ,e :e ~/.P/
  map   ,rn :0r ~/.P/txt/New.page.form.html
  nmap  ,p :!chmod 644 %<CR>
  ab Ybr <br>
  ab Yhr <hr>
  ab Yp  <p>
  map ,me yiwi<<ESC>ea></<C-R>"><ESC>
  ab  Ycom  <!--X--><ESC>FXs
  vmap ,com v`<i<!--<ESC>`>i--><ESC>
  ab  Ybl  <blockquote></blockquote><ESC>T>i
  ab  Yb   <b>i</b><ESC>T>
  vmap ,b   "zdi<b><C-R>z</b><ESC>2F>
  ab  Ycen <center></center><ESC>T>i
  vmap ,cen "zdi<center><C-M><C-R>z<C-M></center><ESC>T>i
  ab  Ycod <code></code><ESC>T>i
  vmap ,cod "zdi<code><C-M><C-R>z<C-M></code><C-M><ESC>T>i
  ab  Yi   <i></i><ESC>T>i
  vmap ,i   "zdi<i><C-R>z</i><ESC>T>
  ab  Ytt   <tt></tt><ESC>T>i
  vmap ,tt   "zdi<tt><C-R>z</tt><ESC>T>
  ab  Ypre <pre></pre><ESC>T>i
  vmap ,pre mz:<ESC>'<O<pre><ESC>'>o</pre><ESC>`z
  ab  Yxmp <xmp></xmp><ESC>T>i
  vmap ,xmp mz:<ESC>'<O<xmp><ESC>'>o</xmp><ESC>`z
  ab  Ytd  <td></td><ESC>T>i
  vmap ,td  "zdi<td><C-R>z</td><ESC>T>i
  ab  Ytr  <tr></tr><ESC>T>i
  vmap ,tr  "zdi<tr><C-R>z</tr><ESC>T>i
  ab  Yh1 <h1></h1><ESC>T>i
  vmap ,h1 "zdi<h1><C-R>z</h1><ESC>2F>
  ab  Yh2 <h2></h2><ESC>T>i
  vmap ,h2 "zdi<h2><C-R>z</h2><ESC>2F>
  ab  Yh3 <h3></h3><ESC>T>i
  vmap ,h3 "zdi<h3><C-R>z</h3><ESC>2F>
  ab  Yh4 <h4></h4><ESC>T>i
  vmap ,h4 "zdi<h4><C-R>z</h4><ESC>2F>
  ab  Yh5 <h5></h5><ESC>T>i
  vmap ,h5 "zdi<h5><C-R>z</h5><ESC>2F>
  ab  Yh6 <h6></h6><ESC>T>i
  vmap ,h6 "zdi<h6><C-R>z</h6><ESC>2F>
  ab Yol <ol><CR><li><CR></ol><ESC>k
  ab Yul <ul><CR><li><CR></ul><ESC>k
  ab Ydl <dl><CR><CR><dt><CR><dd><CR><p><CR><CR></dl><CR><ESC>5kA
  ab Yli <li>
  ab Ydt <dt><CR><dd><CR><p><CR><ESC>kA
  ab Ydp <dt><CR><dd><C-M><p><C-M><ESC>kkkA
  ab  Yhref <a href=""></a><ESC>?""<CR>a
  vmap ,href "zdi<a href=""><C-R>z</a><ESC>F"i
  ab  Ylink <a href=""></a><ESC>?""<CR>a
  vmap ,link "zdi<a href="<C-R>z"<C-M><C-I>><C-R>z</a><ESC>F"i
  ab  Yname <a name=""></a><ESC>?""<CR>a
  vmap ,name "zdi<a name="<C-R>z"<C-M><C-I>><C-R>z</a><ESC>2F>
  ab  Yimg  <img alt="[]"<C-M>   align=<C-M>     src=""></a><ESC>?""<CR>a
  ab  Ymail <a href="mailto:"></a><ESC>?:<CR>a
  vmap ,mail "zdi<a href="mailto:<C-R>z"<C-M><C-I><C-I>><C-R>z</a><ESC>2F>
  vmap ,Mail "zdi<a href="mailto:<C-R>z"><C-R>z</a><ESC>2F>
  ab  Ynews <a href="news:"></a><ESC>?:<CR>a
  vmap ,news "zdi<a href="news:<C-R>z"><C-R>z</a><ESC>2F>
  ab  Ypage   <C-M>page:<C-I><C-M>link:<C-I><C-M>text:<C-I><ESC>kkA
  vmap ,Cblu "zdi<FONT COLOR="#0000FF"><C-R>z</FONT>
  vmap ,Cgre "zdi<FONT COLOR="#00FF00"><C-R>z</FONT>
  vmap ,Cred "zdi<FONT COLOR="#FF0000"><C-R>z</FONT>
  imap ;& &amp;
  imap ;" &quot;
  imap ;< &lt;
  imap ;> &gt;
  nmap  ,= :%s/^===\(.*\)$/<h1>\1<\/h1>/c<CR>
  ab  Ycut  \| <a href="#"<C-I>></a><ESC>F#a
  vmap ,cut  "zdi<a href="#<C-R>z"<C-I>><C-R>z</a><ESC>2F>
augroup END

" Colorful tabs"
" highlight TabLine      guifg=#333 guibg=#222 gui=none ctermfg=254 ctermbg=238 cterm=none
" highlight TabLineSel   guifg=#666 guibg=#222 gui=bold ctermfg=231 ctermbg=235 cterm=bold
" hi TabLineFill  guifg=#999 guibg=#222 gui=none ctermfg=254 ctermbg=238 cterm=none
highlight TabLineFill guifg=LightGreen guibg=DarkGreen ctermfg=LightGreen ctermbg=DarkGreen
" set bg=light
if  has("gui_running")
  " tab title"
  set guitablabel=%N:\ %t#\%-10.3n\ %M
  " remove toolbar
  " set lines=40
  set guioptions-=T
  set guioptions+=ebLhgmrti
  set guioptions+=d
  set guioptions-=t
  " set guioptions-=m
  " set guioptions-=e

  " set guioptions+=c "console dialog instead of popup"
  " --------------preferred--------------------------------------------------------
  try
    " colorscheme darkblue
    " colorscheme wombat "Good
    " colorscheme anotherdark
    " colorscheme blacksea "Good
    " colorscheme camo
    " colorscheme candy
    " colorscheme colorer
    " colorscheme darkZ "Good
    " colorscheme darkspectrum "Good
    " colorscheme zenburn
    " colorscheme rdark
    " colorscheme solarized " Good
    " colorscheme molokai
    " colorscheme two2tango " Good
    " colorscheme darkblue
    " colorscheme desertEx
    " colorscheme desertedocean
    " colorscheme koehler
    " colorscheme mayansmoke " Good light
    " colorscheme mickeysoft " Good light
    " colorscheme mophiaSmoke " Good light
    " colorscheme peachpuff
    colorscheme starrynight
    " colorscheme tempus_dawn " not that impressive
    " colorscheme tempus_dusk " TODO is not hilighted
    " colorscheme tempus_past " TODO is not hilighted
    " colorscheme tempus_rift " TODO is not hilighted
    " colorscheme tempus_fugit " TODO is not hilighted
    " colorscheme tempus_totus " TODO is not hilighted
    " colorscheme tempus_autumn
    " colorscheme tempus_spring
    " colorscheme tempus_winter
    " colorscheme ayu
    " colorscheme artesanal
    " colorscheme rusticated
    " colorscheme myob
    " colorscheme evening
    " colorscheme Dev_Delight
    " set bg=light
    " colorscheme DevC++
    " colorscheme developer
    " colorscheme chela_light
    " colorscheme active4d
    " colorscheme gruvbox-material | se bg=dark " Good
    " colorscheme desert
    " colorscheme badwolf
    " colorscheme nocturne
    " colorscheme molokai
    " colorscheme emacs
    " colorscheme vimhut
    " colorscheme scheakur
    " colorscheme summerfruit
    " colorscheme flattened_light
    " colorscheme flattened_dark
    " colorscheme greyhouse
    " colorscheme paradox
    " colorscheme anokha
    " colorscheme simplon
    " colorscheme hemisu
    " colorscheme nuvola
    " colorscheme louver
    " colorscheme sweater
    " colorscheme gravity
    " colorscheme seashell
    " colorscheme visualstudio " Light
    " colorscheme bensday " Dark
    " colorscheme donbass
    " colorscheme kalisi
    " colorscheme pyte " Light
    " colorscheme simpleandfriendly " Light
    " colorscheme greyhouse
    " colorscheme solarized
    " colorscheme peaksea
    " colorscheme grape
    " colorscheme bclear
    " set background=light
    " colorscheme habilight "Good light
    " colorscheme earendel "white Good
    " colorscheme codeblocks_dark "Good
    " colorscheme manuscript "Good
    " colorscheme mint "Good
    " colorscheme mrpink "Good
    " colorscheme mustang "Good
    " colorscheme moria "little dull
    " FIXME
    " TODO
    " NOTE
    " colorscheme jellybeans "Good
    " colorscheme railscasts "Good
    " colorscheme twilight "Good
    " colorscheme molokai "Good
    " colorscheme xoria256 "Good
    " colorscheme symfony
  catch
    colorscheme default
  endtry
  if &diff
    set nocursorline
    set nocursorcolumn
  else
    set cursorline
    set cursorcolumn
  endif
  " Don't try to highlight lines longer than 800 characters.
  set synmaxcol=100000
  " """""""""""""""""""""""""""""
  " => Statusline
  " """""""""""""""""""""""""""""
  let g:Powerline_colorscheme = 'solarized'
  " --------------------------------------------------------------------------------

  " --------------------------------------------------------------------------------
else
    let g:Powerline_colorscheme = 'solarized'
    highlight Normal ctermfg=grey ctermbg=darkblue
    set bg=light
    " set bg=light
    try
      " colorscheme desert
      " colorscheme slate
      " colorscheme aiseered
      " colorscheme manxome
      " colorscheme jellybeans
      " colorscheme candy
      " colorscheme default
      " colorscheme darkblue
      " colorscheme torte
      " colorscheme earendel "Black Good
      " colorscheme default
      " colorscheme murphy "Black
      " colorscheme molokai
      " colorscheme badwolf
      " colorscheme metacosm "Black
      " colorscheme motus "Black
      " colorscheme midnight2 "Blue
    catch
      colorscheme default
    endtry
    " set guifont=-b&h-lucidatypewriter-medium-r-normal-*-*-140-*-*-m-*-iso8859-15
    set mouse=a
    " set t_Co=256
    " FIXING the arrow problem
    imap <ESC>oA <ESC>ki
    imap <ESC>oB <ESC>ji
    imap <ESC>oC <ESC>li
    imap <ESC>oD <ESC>hi
    " Setting light background
endif

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

nnoremap <F1> :BuffergatorToggle<CR>
nnoremap <S-F1> :BufferTree<CR>
let g:BufferListWidth = 25
let g:BufferListMaxWidth = 50
hi BufferSelected term=reverse ctermfg=white ctermbg=red cterm=bold
hi BufferNormal term=NONE ctermfg=black ctermbg=darkcyan cterm=NONE
let g:buffergator_suppress_keymaps=1
inoremap <expr> <F2> fzf#vim#complete({'source': map(complete_info().items, "v:val.word")})
" nnoremap <F2> :TMToggle<CR>
" If there is an issue in Nerdtree
" Cannot browse subdirs
" Make the vim line ends same color
" highlight NonText guifg=fg guibg=bg gui=none cterm=none " ctermbg=bg ctermfg=fg
let g:NERDTreeDirArrows=0
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\~$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
let NERDSpaceDelims=1

" hilight fixme and TODO
syntax match  myTodo   contained   "\<\(TODO\|FIXME\|NOTE\)"
highlight def link myTodo Todo
command! CPWD cd %:p:h
command! LPWD lcd %:p:h
command! TOT lcd `my_depth`
" """""""""""""""""""""""""""""
" => Visual mode related
" """""""""""""""""""""""""""""
" Really useful!
"  In visual mode when you press * or # to search for the current selection
vnoremap  # :call VisualSearch('f')<CR>
vnoremap  * :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
" vnoremap <silent> gv :call VisualSearch('gv')<CR>
" noremap <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

" From an idea by Michael Naumann
function! VisualSearch(direction) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    "execute "normal ?" . l:pattern . "^M"
    execute "normal ?" . l:pattern
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
  elseif a:direction == 'f'
    "execute "normal /" . l:pattern . "^M"
    execute "normal /" . l:pattern
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command mode related
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " Smart mappings on the command line
" " cno $c  <C-U>sp <C-\>eCurrentFile("sp")<cr>
" " cno $p <C-U>sp <C-\>eCurrentFileDir("sp")<cr>
" " cno $P <C-U>tabe <C-\>eCurrentFileDir("tabe")<cr>
" cnoremap #c <C-U>vs <C-\>eMy_Depth("cscope add")<cr>/cscope.out
" cnoremap #C <C-U>tabe <C-\>eMy_DepthNoSpace("set tags\+=")<cr>/tags
" cnoremap #P <C-U>vs <C-\>eCurrentFileDirP4("vs")<cr>
" cnoremap #p <C-U>vs \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !/home/nv/bin//p4print <C-r>=resolve(expand('%'))<CR>
" cnoremap #b <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !`depth`/bin/p4blame <C-r>=resolve(expand('%'))<CR>:<C-R>=line(".")<CR>
" cnoremap #E <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !p4 edit <C-\>eAbsFile()<cr>
cnoremap #E <C-U><C-\>eAbsFile("edit")<cr>
cnoremap #v <C-U>FZF $STEM/src/verif/
cnoremap #g <C-U>FZF $STEM/src/verif/glx
cnoremap #c <C-U>FZF $STEM/src/verif/cmm/sstb
cnoremap #e <C-U>FZF $STEM/src/
cnoremap #t <C-U>FZF $STEM/src/test/suites/block/
cnoremap #o <C-U>FZF $OUT_HOME/
" cnoremap #u <C-U>FZF $UVMKIT_HOME/uvm/src
cnoremap #u <C-U>FZF ~/uvmkit_home/uvm/src/
" " cnoremap $E <C-U>AsyncShell p4 edit <C-r>=resolve(expand('%'))<CR>
cnoremap #R <C-U>!p4 revert <C-r>=resolve(expand('%'))<CR>
cnoremap #r <C-U>!p4 reopen -t text+k <C-r>=resolve(expand('%'))<CR>
" cnoremap #re <C-U>e scp://o-xterm-99/
" cnoremap #rv <C-U>vert scp://o-xterm-99/
" cnoremap #rs <C-U>sp scp://o-xterm-99/
" cnoremap #rt <C-U>tabe scp://o-xterm-99/
cnoremap #A <C-U>!p4 add -t text+k <C-r>=resolve(expand('%'))<CR>
cnoremap #a <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !p4 annotate <C-r>=resolve(expand('%'))<CR>
cnoremap #L <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !p4 filelog <C-r>=resolve(expand('%'))<CR>
" cnoremap #l <C-U>vs \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !/home/nv/bin//p4print <C-r>=resolve(expand('%'))<CR>
cnoremap #l <C-U>vs \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !p4 print -q <C-r>=resolve(expand('%'))<CR>
cnoremap #w <C-U>vs \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !p4 where <C-r>=resolve(expand('%'))<CR>
cnoremap #p <C-U>vs \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !/proj/verif_release_ro/p4w/current/p4pr <C-r>=resolve(expand('%'))<CR>
cnoremap #D <C-U>!p4 diff <C-r>=resolve(expand('%'))<CR> &
cnoremap #d <C-U>sp \| enew \| setlocal bt=nofile bh=delete modifiable \| r !p4 describe -dU <C-r><C-w>
cnoremap #N <C-U>!nedit <C-r>=resolve(expand('%'))<CR>
cnoremap #G <C-U>!gnome-terminal &
" cnoremap #g <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !/home/nv/toolroot/bin/nvgrep <C-r><C-w>
" cnoremap #f <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !/home/nv/toolroot/bin/nvfind <C-r><C-w>
cnoremap #X <C-U>!xterm -e xx &
cnoremap #K <C-U>!konsole &
cnoremap #M <C-U>!pwd \| mutt -s <C-r>=resolve(expand('%'))<CR> -a <C-r>=resolve(expand('%'))<CR> -- Rajdeep.Mondal@amd.com
cnoremap #m <C-U>:setl modifiable!
cnoremap #H <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !p4 have <C-r>=resolve(expand('%'))<CR>
cnoremap #f <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !p4 fstat <C-r>=resolve(expand('%'))<CR>
cnoremap #S <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !p4 sync <C-r>=resolve(expand('%'))<CR>
cnoremap #s <C-U>!p4 submit <C-r>=resolve(expand('%'))<CR>
" cnoremap #T <C-U>sp <C-\>eMy_Depth("tabe")<cr>
" cnoremap #t <C-U>tabe <C-\>eMy_Depth("tabe")<cr>
" cnoremap #e <C-U>vs <C-\>eMy_Depth("e")<cr>
" cnoremap #V <C-U>vs <C-\>eMy_Depth("vs")<cr>
" cnoremap #v <C-U>vs <C-\>eMy_Depth("sp")<cr>
" cnoremap #F <C-U>setl filetype=verilog_systemverilog
cnoremap #x <C-U>.s/\\d\\+/\\=printf("0x%04x", submatch(0))
cnoremap #Z <C-U>!tar cvzf <C-r>=resolve(expand('%'))<CR>.tar.gz <C-r>=resolve(expand('%'))<CR> && mutt -s <C-r>=resolve(expand('%'))<CR> -a <C-r>=resolve(expand('%'))<CR>.tar.gz -- Rajdeep.Mondal@amd.com < /dev/null && \rm -f <C-r>=resolve(expand('%'))<CR>.tar
" map %
cnoremap %% <C-r>=resolve(expand('%'))<CR>
inoremap <silent> <c-r>f <c-r>=printf("%s/%s", resolve(expand('%:p:h:t')), resolve(expand('%:p:t')))<cr>

" $q is super useful when browsing on the command line
" cno $q <C-\>eDeleteTillSlash()<cr>

" Bash like keys for the command line
func! Cwd()
  let cwd = getcwd()
  return "e " . cwd
endfunc

function! AbsFile(cmd)
  let ret_str = "sp \| enew \| setlocal expandtab bt=nofile bh=delete modifiable \| r !p4 " . a:cmd . " " 
  if exists(':VimProcBang')
    return ret_str . trim( vimproc#system( "\\readlink -f " . resolve(expand("%:p:t")) ) )
  else
    return ret_str . trim(system( "\\readlink -f " . resolve(expand("%:p:t")) ))
  endif
endfunc

func! DeleteTillSlash()
  let g:cmd = getcmdline()
  if MySys() == "linux" || MySys() == "mac"
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  endif
  if g:cmd == g:cmd_edited
    if MySys() == "linux" || MySys() == "mac"
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    endif
  endif
  return g:cmd_edited
endfunc

func! CurrentFile(cmd)
  return a:cmd . " ./" . resolve(expand("%:p:t:r")) . "."
endfunc
func! CurrentFileDir(cmd)
  return a:cmd . " " . resolve(expand("%:p:r")) . ""
endfunc
func! CurrentFileDirP4(cmd)
  return a:cmd . " | enew | setlocal bt=nofile |  r !p4 print -q " . resolve(expand("%:p")) . ""
endfunc
function! My_Depth(cmd)
  let output=system("/home/rmondal/bin/scripts/my_depth")
  return a:cmd . " " . output . "/"
endfunction
function! My_DepthNoSpace(cmd)
  let output=system("/home/rmondal/bin/scripts/my_depth")
  return a:cmd . "" . output . ""
endfunction
func! CurrentFileUnite(cmd)
  return "Unite -buffer-name=files -input=" . expand("%:p:t:r") . " file_rec:" . a:cmd
endfunc
" """""""""""""""""""""""""""""
" => Statusline
" """""""""""""""""""""""""""""
" Always hide the statusline
let g:Powerline_symbols = 'compatible'
let g:Powerline_cache_enabled = 0
let g:Powerline_mode_V = 'V-L'
let g:Powerline_mode_cv = 'V-B'
let g:Powerline_mode_n = 'N'
let g:Powerline_mode_i = 'I'
let g:Powerline_mode_R = 'R'
let g:Powerline_mode_v = 'V'
let g:webdevicons_enable_airline_statusline = 0
if has('gui_running')
  " call Pl#Theme#RemoveSegment('fileencoding')
  " call Pl#Theme#RemoveSegment('fileformat')
  " call Pl#Theme#InsertSegment('filesize', 'before', 'filetype')
  " call Pl#Theme#InsertSegment('pwd', 'before', 'filesize')
  " airline settings
  " nice looking fonts
  function! AirlineInit()
    let g:airline_exclude_preview = 1
    let g:airline#extensions#tagbar#enabled = 0
    let g:airline#extensions#syntastic#enabled = 0
    let g:airline#extensions#whitespace#enabled = 0
    let spc = g:airline_symbols.space
    let g:airline_inactive_collapse=1
    let g:airline_powerline_fonts=1
    let g:airline_powerline_symbol=1

    " let g:airline_theme='badwolf'
    " let g:airline_theme='base16'
    " let g:airline_theme='behelit'
    " let g:airline_theme='bubblegum'
    " let g:airline_theme='dark'
    " let g:airline_theme='durant'
    " let g:airline_theme='hybrid'
    " let g:airline_theme='hybridline'
    " let g:airline_theme='jellybeans'
    " let g:airline_theme='kalisi'
    " let g:airline_theme='kolor'
    " let g:airline_theme='laederon'
    " let g:airline_theme='light'
    " let g:airline_theme='lucius'
    " let g:airline_theme='luna'
    " let g:airline_theme='molokai'
    " let g:airline_theme='monochrome'
    " let g:airline_theme='murmur'
    " let g:airline_theme='papercolor'
    " let g:airline_theme='powerlineish'
    " let g:airline_theme='raven'
    " let g:airline_theme='serene'
    " let g:airline_theme='silver'
    " let g:airline_theme='simple'
    " let g:airline_theme='sol'
    " let g:airline_theme='solarized'
    " let g:airline_theme='tomorrow'
    " let g:airline_theme='ubaryd'
    " let g:airline_theme='understated'
    " let g:airline_theme='wombat'
    " let g:airline_theme='zenburn'
    " remove separators
    " let g:airline_left_sep=''
    " let g:airline_right_sep=''
    " remove unused modes
    " let g:airline_enable_fugitive=0
    " let g:airline_enable_syntastic=0
    " put filetype in fifth section
    " let g:airline_section_b = 'File:%t %m'
    let g:airline_section_c = airline#section#create(['%<', 'file', spc, 'readonly'])
    call airline#parts#define_function('cwd', 'getcwd')
    call airline#parts#define_minwidth('cwd', 80) "adjust as necessary, it'll check against windwidth()
    let g:airline_section_b = airline#section#create(['Buf#[%n] ', 'cwd']) "'Buf#[%{bufnr("%")}] Path:%{getcwd()} '
    " let g:airline_section_gutter = ""
    let g:airline_section_x = "" "airline#section#create_right(['tagbar'])
    let g:airline_section_y = "Type:%Y"
    if &encoding == "utf-8"
      let g:airline_section_z = "%3p%% : \ue0a1:%l/%L: Col:%3c"
    else
      let g:airline_section_z = "%3p%% : Line:%l/%L: Col:%3c"
    endif
    let g:airline_section_warning = ""
    let g:airline#extensions#tabline#enabled=0
    let g:airline#extensions#tabline#show_buffers = 1
    let g:airline#extensions#tabline#buffer_nr_show = 1
    let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
    let g:airline#extensions#tagbar#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline_mode_map = {
          \ '__' : '-',
          \ 'n'  : 'N',
          \ 'i'  : 'I',
          \ 'R'  : 'R',
          \ 'c'  : 'C',
          \ 'v'  : 'V',
          \ 'V'  : 'V',
          \ '' : 'V',
          \ 's'  : 'S',
          \ 'S'  : 'S',
          \ '' : 'S',
          \ }
  endfunction
endif
" autocmd VimEnter * call AirlineInit()

" Format the statusline
" %= is to right align
" if !has('gui_running')
       " set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
      set statusline=%{HasPaste()}%F%m%r%h\ %w
      set statusline+=%=Line:\ %l/%L(%p%%):%c
      " set statusline+=\
      set statusline+=\ Ftype:
      set statusline+=%y
      set statusline=%F%m%r%h%w\ [%l/%L,\ %v]\ [%p%%]\ %=[#%n][TYPE=%Y]\ [FMT=%{&ff}]\ %{\"[ENC=\".(&fenc==\"\"?&enc:&fenc).\"]\"}

" Add status line support, for integration with other plugin, checkout `:h coc-status`
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" let g:coc_global_extensions = [
"   \ 'coc-snippets',
"   \ 'coc-tsserver',
"   \ 'coc-lists',
"   \ 'coc-marketplace',
"   \ 'coc-python',
"   \ 'coc-eslint',
"   \ 'coc-prettier',
"   \ 'coc-json',
"   \ 'coc-yaml',
"   \ 'coc-git',
"   \ 'coc-dictionary',
"   \ 'coc-word',
"   \ 'coc-omni',
"   \ 'coc-syntax',
"   \ 'coc-solargraph',
"   \ 'https://github.com/gvekony/sv-1800-2012',
"   \ ]

" let g:coc_global_extensions = [
"   \ 'coc-snippets',
"   \ 'coc-tsserver',
"   \ 'coc-python',
"   \ 'coc-prettier',
"   \ 'coc-git',
"   \ 'coc-dictionary',
"   \ 'coc-word',
"   \ 'coc-omni',
"   \ 'coc-json',
"   \ 'coc-ultisnips',
"   \ 'coc-pairs',
"   \ 'coc-syntax',
"   \ 'https://github.com/gvekony/sv-1800-2012'
"   \ ]
"
" nnoremap <silent> <space>a  :<C-u>CocFzfList diagnostics<CR>
" nnoremap <silent> <space>b  :<C-u>CocFzfList diagnostics --current-buf<CR>
" nnoremap <silent> <space>c  :<C-u>CocFzfList commands<CR>
" nnoremap <silent> <space>e  :<C-u>CocFzfList extensions<CR>
" nnoremap <silent> <space>l  :<C-u>CocFzfList location<CR>
" nnoremap <silent> <space>o  :<C-u>CocFzfList outline<CR>
" nnoremap <silent> <space>s  :<C-u>CocFzfList symbols<CR>
" nnoremap <silent> <space>S  :<C-u>CocFzfList services<CR>
" nnoremap <silent> <space>p  :<C-u>CocFzfListResume<CR>

" else
  " set rtp+=~/.local/lib/python2.7/site-packages/powerline/bindings/vim/
" endif
" set rtp+=~/scripts/bin/fzf
" let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
" " Border color
" let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Todo' } }
" let g:fzf_layout = { 'down': '40%'}
" " Border style
" Floating
" let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Todo', 'rounded': v:false } }
" Bottom
let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.4, 'yoffset': 1, 'border': 'none' } }
let g:fzf_preview_window = ''
let g:fzf_history_dir = '~/.local/share/fzf-history'
" ======[ Magically build interim directories if necessary ]===================
" preview window
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse', '--info=inline', '--preview', 'cat {}']}, <bang>0)

function g:TitleRefresh(...)
" nothing happens
endfunction

augroup TitleRefresh
autocmd!
autocmd BufLeave *
  \  if has('gui_running') && &ft == 'fzf'
  \|   call timer_start(100, function('g:TitleRefresh'), {'repeat': -1})
  \| endif
augroup END
" "Raw" version of ag; arguments directly passed to ag
"
" e.g.
"   " Search 'foo bar' in ~/projects
"   :Ag "foo bar" ~/projects
"
"   " Start in fullscreen mode
"   :Ag! "foo bar"
command! -bang -nargs=+ -complete=file Ag call fzf#vim#ag_raw(<q-args>, <bang>0)

" Raw version with preview
" command! -bang -nargs=+ -complete=file Ag call fzf#vim#ag_raw(<q-args>, fzf#vim#with_preview(), <bang>0)
command! -bang -nargs=+ -complete=file Ag call fzf#vim#ag_raw(<q-args>, <bang>0)


" AgIn: Start ag in the specified directory
"
" e.g.
"   :AgIn .. foo
function! s:ag_in(bang, ...)
  if !isdirectory(a:1)
    throw 'not a valid directory: ' .. a:1
  endif
  " Press `?' to enable preview window.
  " call fzf#vim#ag(join(a:000[1:], ' '), fzf#vim#with_preview({'dir': a:1}, 'up:50%:hidden', '?'), a:bang)

  " If you don't want preview option, use this
  call fzf#vim#ag(join(a:000[1:], ' '), {'dir': a:1}, a:bang)
endfunction

command! -bang -nargs=+ -complete=dir AgIn call s:ag_in(<bang>0, <f-args>)

" function! SortLines() range abort
"   execute a:fisrstline . "," . a:lastline . 's/^\s*\(.\{-}\)\s*$/\=strdisplaywidth(submatch(1)) . " " . submatch(0)/'
" endfunction

" Mapping selecting mappings
" nmap <leader><tab> <plug>(fzf-maps-n)
" xmap <leader><tab> <plug>(fzf-maps-x)
" omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
" let mapleader=" "
nnoremap <silent> <leader><leader>b :Buffers<CR>
" nnoremap <silent> <leader><leader>b :Clap buffers<CR>
nnoremap <silent> <leader><leader>c :Commands<CR>
nnoremap <silent> <leader><leader>cc :Clap colors<CR>
nnoremap <silent> <leader><leader>r :Clap registers<CR>
nnoremap <silent> <leader><leader>bb :BLines<CR>
nnoremap <silent> <leader><leader>l :Lines<CR>
nnoremap <leader><leader>f :FZF <c-r>=resolve(expand('%:p:h'))<cr>/
nnoremap <silent> <leader><leader>w :Windows<CR>
nnoremap <silent> <leader><leader>h :History:<CR>
nnoremap <silent> <leader><leader>s :History/<CR>
nnoremap <silent> <leader><leader>sn :Snippets<CR>
nnoremap <silent> <leader><leader>m :Maps<CR>
nnoremap <silent> <leader><leader>hh :Helptags<CR>
nnoremap <silent> <leader><leader>ff :Filetypes<CR>
if !has('nvim')
  imap <c-x><c-k> <plug>(fzf-complete-word)
  inoremap <expr> <plug>(fzf-complete-file-ag-full)     fzf#vim#complete#path("fd . --type file -E '.git' -E '.keep' --follow --color=never $PWD")
  imap <c-x><c-f> <plug>(fzf-complete-file-ag-full)
  inoremap <expr> <plug>(fzf-complete-path-full)     fzf#vim#complete#path("fd . --type directory -E '.git' -E '.keep' --color=never --follow $PWD")
  imap <c-x><c-j> <plug>(fzf-complete-path-full)
  imap <c-x><c-l> <plug>(fzf-complete-line)
  imap <c-x><c-b> <plug>(fzf-complete-buffer-line)
endif
let FZF_DEFAULT_COMMAND="fd -E '.git' -E '.keep' --type file --follow --color=never"
let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'
" Add FZF results to quickfix list
" CTRL-A to select all
" CTRL-Q to build quickfix list
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

function! AskQuit (msg, options, quit_option)
    if confirm(a:msg, a:options) == a:quit_option
        exit
    endif
endfunction

function! EnsureDirExists ()
    let required_dir = expand("%:h")
    if !isdirectory(required_dir)
        call AskQuit("Parent directory '" . required_dir . "' doesn't exist.",
             \       "&Create it\nor &Quit?", 2)
        try
            call mkdir( required_dir, 'p' )
        catch
            call AskQuit("Can't create '" . required_dir . "'",
            \            "&Quit\nor &Continue anyway?", 1)
        endtry
    endif
endfunction
augroup AutoMkdir
    autocmd!
    autocmd  BufNewFile  *  :call EnsureDirExists()
augroup END

function! CurDir()
  let curdir = substitute(getcwd(), $HOME, "~/", "g")
  return curdir
endfunction

function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  else
    return ''
  endif
endfunction

" set the color of the cursor line
" hi Cursorline
let g:cursorcross_disable = 0
let g:cursorcross_dynamic = 'clw'
" hi Cursorline cterm=bold ctermbg=None ctermfg=None guibg=#555555
" autocmd InsertEnter * hi Cursorline cterm=Bold ctermbg=None ctermfg=None guibg=black
" autocmd InsertLeave * hi Cursorline cterm=Bold ctermbg=None ctermfg=None guibg=#555555
" highlight cCursor guifg=white guibg=steelblue ctermfg=Black ctermbg=blue

" line number highlight
" hi LineNr guifg=black

" *** Search Highlighting ***
" highlight Search ctermbg=DarkCyan
" guibg=blue
" guifg=red
highlight clear Folded
nnoremap zj :<C-u>silent! normal! zc<CR>zjzo
nnoremap zk :<C-u>silent! normal! zc<CR>zkzo[z
highlight Folded term=bold gui=bold
set foldopen-=search
set foldopen-=mark
" set foldclose=all " Close folds if you leave them in any way
set foldcolumn=1 " Show the foldcolumn
set foldenable " Turn on folding
set foldlevel=0 " Autofold everything by default
set foldnestmax=1 " I only like to fold outer functions
" search and replace
" Make a simple "search" text object. gn replaces this so no need
" vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
"    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
" onoremap s :normal vs<CR>
" call AutoHighlightToggle()
" function AutoHighlightToggle()
"        augroup auto_highlight
"        au!
"        au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
"        augroup end
"        setl updatetime=200
" endfunction

" so that i can move out of the terminal
let g:ConqueTerm_ReadUnfocused = 1
" make explore and like commands behave
command! -nargs=* -bar -bang -count=0 -complete=dir E e. <args>
command! -nargs=* -bar -bang -count=0 -complete=dir B EasyBuffer
command! -nargs=* -bar -bang -count=0 -complete=dir S sp. <args>
command! -nargs=* -bar -bang -count=0 -complete=dir V vs. <args>
command! -nargs=* -bar -bang -count=0 -complete=dir T tabe. <args>

" copen command
command! -nargs=* Cexpr cexpr system(expand(<q-args>))

" Filter out the greppings
command! -nargs=? Filter let @i='' | execute 'g/<args>/y I' | redraw | new | setlocal bt=nofile bh=delete | put! I
nnoremap <silent> <leader>/ :execute 'vimgrep! /'.@/.'/g %'<CR>:copen<CR>
command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=delete noswapfile | r !<args>
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction
" command! -complete=file -nargs=* Git call s:RunShellCommand('git '.<q-args>)

" bind K to grep word under cursor
" nnoremap K :execute "vimgrep /" . expand("<cword>") . "/j " . expand("%")
function! GrepQuickFix(pat)
  let all = getqflist()
  for d in all
    if bufname(d['bufnr']) !~ a:pat && d['text'] !~ a:pat
        call remove(all, index(all,d))
    endif
  endfor
  call setqflist(all)
endfunction
command! -nargs=* GrepQF call GrepQuickFix(<q-args>)
" nnoremap <C-n> :cnext<CR>
" nnoremap <C-p> :cprev<CR>
" " Use this setting to override the default mapping (<c-m>) for going back in the history
" let g:history_back_map = '<c-p>'
" " Use this setting to override the default mapping (<c-n>) for going forward in the history
" let g:history_forward_map = '<c-P>'
" " Set filetypes to pass over putting in the history. Defaults to ['netrw']
" let g:history_ft_ignore = ['pyc', 'netrw']
" " Set the maximum length of each buffers history. Defaults to 100
" let g:history_max_len = 1000

command! -nargs=0 Blame :call P4blame()
function! P4blame()
  exec "!`my_depth`/bin/p4blame %:" . line(".")
endfunction
" MRU CONFIG
let MRU_Exclude_Files = '^/tmp/.*\|^/var/tmp/.*'  " For Unix
let MRU_Max_Entries = 100
" FuzzyFinder
" let g:fuf_keyOpen='<CR>'
" let g:fuf_keyOpenSplit='<C-s>'
" let g:fuf_keyOpenVsplit='<C-v>'
" let g:fuf_keyOpenTabpage='<C-t'

noremap <F4> :FufFile<CR>
noremap <F3> :FufBuffer<CR>
" noremap <F5> :BufExplorerVerticalSplit<CR>
" redir => current_colorscheme
" silent colorscheme
" redir END
" Break undo sequence on Space, Tab, Enter, specific characters
inoremap <Space> <Space><C-g>u
inoremap <Tab> <Tab><C-g>u
inoremap <CR> <CR><C-g>u
inoremap , ,<C-g>u
inoremap . .<C-g>u
inoremap ! !<C-g>u
inoremap ? ?<C-g>u
noremap <F5> :<C-u>MundoToggle<CR>:set background&<CR>
noremap <F6> :<C-u>UndotreeToggle<CR>:set background&<CR>
" let g:tagbar_usearrows = 1
noremap <F7> :TlistToggle<CR>
" noremap <F7> :YRShow<CR>
" settings for anzu
" nnoremap n <Plug>(anzu-n-with-echo)
" nnoremap N <Plug>(anzu-N-with-echo)
" nnoremap * <Plug>(anzu-star-with-echo)
" nnoremap # <Plug>(anzu-sharp-with-echo)
" nnoremap * *''zzzv
" nnoremap g* g*''zzzv
" nnoremap # #''zzzv
" nnoremap g# g#''zzzv
" nnoremap <S-LeftMouse> <LeftMouse>:<C-U>let @/='\<'.expand("<cword>").'\>'<CR>:set hlsearch<CR>
nnoremap * *<C-o>
nnoremap g* g*<C-o>
nnoremap # #<C-o>
nnoremap g# g#<C-o>
" make n N more consistent
" nnoremap <silent> n /<CR>zzzv
" nnoremap <silent> N ?<CR>zzzv
" noremap <expr> n 'Nn'[v:searchforward]
" noremap <expr> N 'nN'[v:searchforward]
" vnoremap <silent> n /<CR>zzzv
" vnoremap <silent> N ?<CR>zzzv
" vnoremap <expr> n 'Nn'[v:searchforward]
" vnoremap <expr> N 'nN'[v:searchforward]
let g:indexed_search_mappings = 0 " disable index search mappings
let g:indexed_search_line_info = 1
" nmap / <Plug>(indexed-search-/)
" nmap ? <Plug>(indexed-search-?)
" nnoremap <silent>* *N:ShowSearchIndex<CR>
" nnoremap <silent># #N:ShowSearchIndex<CR>
" nnoremap <expr> n (v:searchforward ? 'n' : 'N') . ":ShowSearchIndex<CR>"
" nnoremap <expr> N (v:searchforward ? 'N' : 'n') . ":ShowSearchIndex<CR>"
" vnoremap <expr> n (v:searchforward ? 'n' : 'N') . ":<C-u>ShowSearchIndex<CR>gv"
" vnoremap <expr> N (v:searchforward ? 'N' : 'n') . ":<C-u>ShowSearchIndex<CR>gv"
nnoremap <silent>* *N
nnoremap <silent># #N
nnoremap <expr> n (v:searchforward ? 'n' : 'N')
nnoremap <expr> N (v:searchforward ? 'N' : 'n')
vnoremap <expr> n (v:searchforward ? 'n' : 'N')
vnoremap <expr> N (v:searchforward ? 'N' : 'n')

nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz
nnoremap <c-i> <c-i>zz
" Folding
nnoremap <tab> za
" interestingWords {{{1 "
" nnoremap <silent> M         :call InterestingWords()<cr>
" nnoremap <silent> <leader>m :call UncolorAllWords()<cr>
" }}}1 " interestingWords

" nnoremap <silent> n n:call HLNext(0.2)<cr>
" nnoremap <silent> N N:call HLNext(0.2)<cr>
" hex dec conversion
" Return hex string equivalent to given decimal string or number.
" function! Dec2hex(arg)
"   return printf('%x', a:arg + 0)
" endfunction
" " Return number equivalent to given hex string ('0x' is optional).
" function! Hex2dec(arg)
"   return (a:arg =~? '^0x') ? a:arg + 0 : ('0x'.a:arg) + 0
" endfunction

command! -nargs=? -range Dec2hex call s:Dec2hex(<line1>, <line2>, '<args>')
function! s:Dec2hex(line1, line2, arg) range
  if empty(a:arg)
    if histget(':', -1) =~# "^'<,'>" && visualmode() !=# 'V'
      let cmd = 's/\%V\<\d\+\>/\=printf("0x%x",submatch(0)+0)/g'
    else
      let cmd = 's/\<\d\+\>/\=printf("0x%x",submatch(0)+0)/g'
    endif
    try
      execute a:line1 . ',' . a:line2 . cmd
    catch
      echo 'Error: No decimal number found'
    endtry
  else
    echo printf('%x', a:arg + 0)
  endif
endfunction

command! -nargs=? -range Hex2dec call s:Hex2dec(<line1>, <line2>, '<args>')
function! s:Hex2dec(line1, line2, arg) range
  if empty(a:arg)
    if histget(':', -1) =~# "^'<,'>" && visualmode() !=# 'V'
      let cmd = 's/\%V0x\x\+/\=submatch(0)+0/g'
    else
      let cmd = 's/0x\x\+/\=submatch(0)+0/g'
    endif
    try
      execute a:line1 . ',' . a:line2 . cmd
    catch
      echo 'Error: No hex number starting "0x" found'
    endtry
  else
    echo (a:arg =~? '^0x') ? a:arg + 0 : ('0x'.a:arg) + 0
  endif
endfunction

" blink search results
" EITHER blink the line containing the match...
function! HLNext (blinktime)
  set invcursorline
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  set invcursorline
  redraw
endfunction

" OR ELSE ring the match in red...
" function! HLNext (blinktime)
"  highlight RedOnRed ctermfg=red ctermbg=red
"  let [bufnum, lnum, col, off] = getpos('.')
"  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"  echo matchlen
"  let ring_pat = (lnum > 1 ? '\%'.(lnum-1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.\|' : '')
"        \ . '\%'.lnum.'l\%>'.max([col-4,1]) .'v\%<'.col.'v.'
"        \ . '\|'
"        \ . '\%'.lnum.'l\%>'.max([col+matchlen-1,1]) .'v\%<'.(col+matchlen+3).'v.'
"        \ . '\|'
"        \ . '\%'.(lnum+1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.'
"  let ring = matchadd('RedOnRed', ring_pat, 101)
"  redraw
"  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"  call matchdelete(ring)
"  redraw
" endfunction

" OR ELSE briefly hide everything except the match...
" function! HLNext (blinktime)
"  highlight BlackOnBlack ctermfg=black ctermbg=black
"  let [bufnum, lnum, col, off] = getpos('.')
"  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"  let hide_pat = '\%<'.lnum.'l.'
"        \ . '\|'
"        \ . '\%'.lnum.'l\%<'.col.'v.'
"        \ . '\|'
"        \ . '\%'.lnum.'l\%>'.(col+matchlen-1).'v.'
"        \ . '\|'
"        \ . '\%>'.lnum.'l.'
"  let ring = matchadd('BlackOnBlack', hide_pat, 101)
"  redraw
"  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"  call matchdelete(ring)
"  redraw
" endfunction
highlight WHITE_ON_RED    ctermfg=white  ctermbg=red
" OR ELSE just highlight the match in red...
" function! HLNext (blinktime)
"  let [bufnum, lnum, col, off] = getpos('.')
"  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"  let target_pat = '\c\%#'.@/
"  let ring = matchadd('WHITE_ON_RED', target_pat, 101)
"  redraw
"  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"  call matchdelete(ring)
"  redraw
" endfunction

" map so that ctrl-g shows the full path"
nnoremap <C-g>  11<C-g>
" Yank from the cursor to the end of the line, to be consistentwith C and D.
" nnoremap y <Plug>(operator-flashy)
" nnoremap Y <Plug>(operator-flashy)$
nnoremap Y y$
" visual mapping not to move the cursor
vnoremap <expr>y "my\"" . v:register . "y`y"
inoremap <c-s> <esc>ddi
" cmap Tabe tabe
" visual shifting (does not exit Visual mode)
" vnoremap < <gv
" vnoremap > >gv
" visual drag
" vnoremap  <expr>  <S-LEFT>   DVB_Drag('left')
" vnoremap  <expr>  <S-RIGHT>  DVB_Drag('right')
" vnoremap  <expr>  <S-DOWN>   DVB_Drag('down')
" vnoremap  <expr>  <S-UP>     DVB_Drag('up')
" vnoremap  <expr>  D          DVB_Duplicate()
" drag move visual selections NOTE: works
" vnoremap <S-Right>  xpgvlolo
" vnoremap <S-left>   xhPgvhoho
" vnoremap <S-Down>   xjPgvjojo
" vnoremap <S-Up>     xkPgvkoko

vmap <unique> <C-S-down> <Plug>(textmanip-duplicate-down)
nmap <unique> <C-S-down> <Plug>(textmanip-duplicate-down)
vmap <unique> <C-S-up> <Plug>(textmanip-duplicate-up)
nmap <unique> <C-S-up> <Plug>(textmanip-duplicate-up)
vmap <unique> <C-S-left> <Plug>(textmanip-duplicate-left)
" nmap <unique> <C-S-left> <Plug>(textmanip-duplicate-left)
vmap <unique> <C-S-right> <Plug>(textmanip-duplicate-right)
" nmap <unique> <C-S-right> <Plug>(textmanip-duplicate-right)

vmap <unique> <S-down> <Plug>(textmanip-move-down)
vmap <unique> <S-up> <Plug>(textmanip-move-up)
vmap <unique> <S-left> <Plug>(textmanip-move-left)
vmap <unique> <S-right> <Plug>(textmanip-move-right)


" vmap <unique> <S-up>    <Plug>SchleppUp
" vmap <unique> <S-down>  <Plug>SchleppDown
" vmap <unique> <S-left>  <Plug>SchleppLeft
" vmap <unique> <S-right> <Plug>SchleppRight
" vmap <unique> <C-S-up>   <Plug>SchleppIndentUp
" vmap <unique> <C-S-down> <Plug>SchleppIndentDown
" vmap <unique> <S-k> <Plug>SchleppDupUp
" vmap <unique> <S-j> <Plug>SchleppDupDown
" vmap <unique> <S-h> <Plug>SchleppDupLeft
" vmap <unique> <S-l> <Plug>SchleppDupRight

" before a ctrl-v insert we should align
" vnoremap I =gvI

" math "
" vmap <expr>  ++  VMATH_YankAndAnalyse()
" Temporarily add a column indicator when inserting or appending in visual mode...
" (Should use <C-O> instead, but it doesn't seem to work)
let g:cursorcolumn_visible = 1
" vnoremap <silent>  I  I<C-R>=TemporaryColumnMarkerOn()<CR>
" vnoremap <silent>  A  A<C-R>=TemporaryColumnMarkerOn()<CR>

" function! TemporaryColumnMarkerOn ()
"   let g:prev_cursorcolumn_state = g:cursorcolumn_visible ? 'on' : 'off'
"   call Toggle_CursorColumn('on')
"   inoremap <silent>  <ESC>  <ESC>:call TemporaryColumnMarkerOff(g:prev_cursorcolumn_state)<CR>
"   return ""
" endfunction

" function! TemporaryColumnMarkerOff (newstate)
"   call Toggle_CursorColumn(a:newstate)
"   iunmap <ESC>
" endfunction

" Implement cursor toggle...
" let g:cursorcolumn_visible = 0
" function! Toggle_CursorColumn (requested_state)
"  if a:requested_state == 'off' || g:cursorcolumn_visible && a:requested_state == 'flip'
"    let g:cursorcolumn_visible = 0
"    highlight clear CursorColumn
"    highlight CursorColumn term=none cterm=none
"  else
"    let g:cursorcolumn_visible = 1
"    highlight CursorColumn term=bold ctermfg=black ctermbg=cyan cterm=bold
"  endif
" endfunction

" CoVim settings"
let CoVim_default_name = "rmondal"
let CoVim_default_port = "3456"

let g:Perl_AuthorName      = 'Rajdeep'
let g:Perl_AuthorRef       = ''
let g:Perl_Email           = '$Rajdeep.Mondal@amd'
let g:Perl_Company         = 'AMD'
" disable boilter plate code insertion"
let g:Perl_TemplateOverwrittenMsg= 'no'

" SnipMate {
" Setting the author var
" If forking, please overwrite in your .vimrc.local file
let g:snips_author = 'Rajdeep <[[Rajdeep.Mondal@amd.com]](mailto:Rajdeep.Mondal@amd.com)>'

" this is only for me
" nnoremap <left> <nop>
" nnoremap <right> <nop>
" nnoremap <up> <nop>
" nnoremap <down> <nop>
if has('win32')
  " Avoid mswin.vim making Ctrl-v as paste
  noremap <C-V> <C-V>
  " make arrow keys extend visual
  set keymodel-=stopsel
  behave win32
  " colorscheme lettuce
  set guifont=Lucida\ Console:h11
  " set guifont=*
  " :FontList
  " :Font Dingbats
  " :FontSize 14
  " :FontStyle bold italic
else
  " set guifont=Courier\ New\ 12
  " set guifont=Droid\ Sans\ Mono\ 12
  " set guifont=Bitstream\ Charter\ 12
  " set guifont=Century\ Schoolbook\ L\ 12
  " set guifont=DejaVu\ Sans\ Mono\ 12

  " set guifont=Monaco\ 10 " favourite
  " set guifont=Monoisome\ 9 " super thin
  " set guifont=Monofur\ 13 " unique
  " set guifont=Liberation\ Mono\ 11
  " set guifont=Inconsolata\ for\ Powerline\ 12
  " set guifont=Ubuntu\ Mono\ 14 " beautiful
  " set guifont=Menlo\ 11 " favourite
  " set guifont=CamingoCode\ 11
  " set guifont=cousine\ 11
  " set guifont=Fira\ Mono\ 10 " beautiful
  " set guifont=Menlo\ 9 "beautiful
  " set guifont=Fantasque\ Sans\ Mono\ 12 " good
  " set guifont=Hack\ 10 " good
  " set guifont=LispM\ 12 " dont like
  " set guifont=Monoid\ 10 " thin
  " set guifont=mononoki\ 11.5 " clean
  set guifont=agave\ 15 "fun
  " set guifont=Envy\ Code\ R\ 12 " clean
  " set guifont=Fira\ Code\ iScript\ 11.5
  " set guifont=Iosevka\ 10
  " set guifont=PragmataPro\ 10
  " set guifont=PFDin\ 8\ 10
  " set guifont=M+\ 1mn\ medium\ 10

  " set guifont=Consolas\ for\ Powerline\ 11
  " set guifont=BPmono\ 14
  " set guifont=PT\ Mono\ 13

  " set guifont=DejaVu\ LGC\ Sans\ Mono\ 12
  " set guifont=Andale\ Mono\ 14
  " set guifont=Consolas\ 13
  " set guifont=Monospace\ 14
  " set guifont=*
  " :FontList
  " :Font Dingbats
  " :FontSize 14
  " :FontStyle bold italic
endif

" Use local vimrc if available {
" if filereadable(expand("\~/.vimrc.local"))
"    source \~/.vimrc.local
" endif
" }
" custom files to source
" if filereadable(expand("\~/.vim/cus_fold/folding.vim"))
"    source \~/.vim/cus_fold/folding.vim
" endif
" fold --> check if file has folding then show foldcolum"
" function HasFoldedLine()
"    let lnum=1
"    while lnum <= line("$")
"        if (foldclosed(lnum) > -1)
"            return 1
"        endif
"        let lnum+=1
"    endwhile
"    return 0
" endfu
" :au CursorHold * if HasFoldedLine() == 1 | set fdc=1 | else |set fdc=0 | endif
"
let g:ale_fixers = {
\   'javascript': ['eslint'],
\}
" Enable completion where available.
let g:ale_completion_enabled = 1

" Multicursor "
let g:multi_cursor_exit_from_visual_mode=0
let g:multi_cursor_exit_from_insert_mode=0
" Unite configurations"
let g:unite_source_history_yank_enable = 1
let g:unite_source_history_yank_limit=1000
let g:yankring_max_history = 1000
let g:yankring_manage_numbered_reg = 1
let g:unite_enable_start_insert=1
let g:unite_source_rec_max_cache_files=100000
" let g:unite_source_grep_command='ack'
" let g:unite_source_grep_default_opts='--no-heading --no-color -a -C4'
" let g:unite_source_grep_recursive_opt=''
" let g:unite_source_find_command =
"    \ 'find `depth` -type f -o \( -name .git -o -name tmp -o -name .hg -name .svn \) -prune -type f | head -100 | grep -v -E "\.(jpe?g|png|gif|[ot]tf|ico)$"'
" let g:unite_source_rec_async_command=
"  \ 'find `depth` -type f -o \( -name .git -o -name tmp -o -name .hg -name .svn \) -prune -type f | head -100 | grep -v -E "\.(jpe?g|png|gif|[ot]tf|ico)$"'
" if exists(':Unite')
  " call unite#filters#matcher_default#use(['matcher_fuzzy'])
  " call unite#custom#source('file_rec', 'ignore_pattern', '\.abc$')
  " call unite#custom#source('file_rec', 'max_candidates', '0')
  " call unite#custom#source('file', 'max_candidates', '0')
  " nnoremap <leader>t :<C-u>Unite -buffer-name=files   file_rec:<C-\>eMy_DepthNoSpace("Unite -buffer-name=files   file_rec:")<cr>/
  " nnoremap <leader>d :<C-u>Unite -buffer-name=files   file_rec:<C-\>eMy_DepthNoSpace("Unite -buffer-name=dir   directory:")<cr>/
  " "nnoremap <leader>f :<C-u>Unite -buffer-name=files   file<cr>
  " nnoremap <leader>fr :<C-u>Unite -buffer-name=files   file_rec:../../
  " nnoremap <leader>ft :<C-u><C-\>eCurrentFileUnite("../..")<cr>
  " nnoremap <leader>o :<C-u>Unite -buffer-name=outline outline<cr>
  " nnoremap <leader>c :<C-u>Unite -buffer-name=output output<cr>
  " nnoremap <leader>y :<C-u>Unite -buffer-name=yank    history/yank<cr>
  " nnoremap <leader>h :<C-u>Unite -buffer-name=yank    history/yank<cr>
  " nnoremap <leader>r :<C-u>Unite -buffer-name=yank    register<cr>
  " nnoremap <leader>b :<C-u>Unite -buffer-name=buffer  buffer<cr>
  " nnoremap <leader>q :<C-u>Unite -buffer-name=quickfix qflist<cr>
  " nnoremap <leader>g :<C-u>Unite -buffer-name=grep  vimgrep:%<cr>
  " nnoremap <leader>gb :<C-u>Unite -buffer-name=grep  vimgrep:##<cr>
  " nnoremap <leader>l :<C-u>Unite -buffer-name=search  line<cr>
  " autocmd FileType unite call s:unite_my_settings()
  " nnoremap <Space>b  :Unite -buffer-name=buffer buffer<CR>
" endif
function! s:unite_my_settings()
  " set paste
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Overwrite settings.
  inoremap <silent><buffer><expr> <C-s>     unite#do_action('split')
  inoremap <silent><buffer><expr> <C-v>     unite#do_action('vsplit')
  " imap <buffer> <esc> <plug>(unite_exit)
  nnoremap <buffer> <esc> <plug>(unite_exit)
  nnoremap <buffer> <C-j> <plug>(unite_toggle_auto_preview)
  inoremap <buffer> <TAB> <plug>(unite_select_next_line)
  inoremap <buffer> <S-TAB> <plug>(unite_select_previous_line)
  inoremap <buffer> <BS> <BS>
endfunction

" NarrowRegion Writeback "
let g:nrrw_rgn_protect = 'n'
" map <Leader>ff :call FoldFocus('vnew')<CR>

" UltiSnips "
let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]
" let g:ycm_cache_omnifunc = 1
let g:UltiSnipsRemoveSelectModeMappings=0
let g:UltiSnipsExpandTrigger="<C-Space>"
let g:UltiSnipsJumpForwardTrigger="<C-Space>"
let g:UltiSnipsListSnippets="<C-S-Space>"
let g:UltiSnipsJumpBackwardTrigger="<C-S-Space>"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" , ~/.vim/bundle/snippets/UltiSnips, ~/.vim/mysnippets/'
" let enter select the selction
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" " neosnippet {{{ "
" " neosnippet"
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)
" " SuperTab like snippets behavior.
" " imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" " \ "\<Plug>(neosnippet_expand_or_jump)"
" " \: pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \ : "\<TAB>"
" " For conceal markers.
" if has('conceal')
"   set conceallevel=2 concealcursor=niv
" endif
" " Enable snipMate compatibility feature.
" let g:neosnippet#enable_snipmate_compatibility = 1

" " Tell Neosnippet about the other snippets
" let g:neosnippet#snippets_directory='~/.vim/bundle/snippets/snippets'

" " let g:neosnippet#snippets_directory='~/.vim/bundle/snippets/snippets, ~/.vim/mysnippets/'
" " let g:neosnippet#enable_preview=1
" " let g:neosnippet#enable_snipmate_compatibility = 1
" " }}} " neosnippet

let g:matchparen_insert_timeout=5
" Underline the current line with various symbols (such that the number of
" underline matches line length and indendation)
nnoremap <Leader>= yypv$r=
nnoremap <Leader>- yypv$r-
" nnoremap <Leader># yypv$r#
nnoremap <Leader>" yypv$r"
" A fancy unicode underline
nnoremap <Leader>U yypv$r-
" get back space behaviour
" Pydiction path
let g:pydiction_location = '~/.vim/bundle/Pydiction/complete-dict'

" load filetype detection last"
set iskeyword+=_
set iskeyword-='
set iskeyword-=:
set iskeyword-=/
set iskeyword+="TODO"
set iskeyword+="FIXME"
syntax on
syntax sync fromstart
filetype on
set autoindent
filetype plugin on
filetype indent on
" set omnifunc=syntaxcomplete#Complete

" DO NOT DELETE BELLOW "
if ($TAGS != "")
    set tags=${TAGS}
endif

if ($INCPATH != "")
    set path=${INCPATH}
endif

" hi link ClapSpinner PmenuSel
" hi ClapDisplay2 guibg=#003f66 guifg=white
" hi default link ClapDisplay ClapDisplay2

" hi ClapInput2 guibg=white
" hi link ClapInput ClapInput2
" let g:clap_theme = 'material_design_dark'
" let g:clap_theme = 'solarized_dark'
let g:clap_theme = 'solarized_light'
" let g:clap_theme = 'atom_dark'
" let g:clap_theme = 'nord'

" hi YellowAndBlack gui=bold guibg=#7a804d guifg=white
" hi link ClapCurrentSelection YellowAndBlack
" hi link ClapNoMatchesFound YellowAndBlack
hi ClapInput2 guibg=#003f66  guifg=white
" hi link ClapInput ClapInput2
" hi link ClapPreview ClapInput2
" hi link ClapDisplay ClapInput2
" hi link ClapSelected ClapInput2
" hi link ClapCurrentSelection ClapInput2
" hi link ClapMatches ClapInput2
" hi link ClapNClapNoMatchesFound ClapInput2
function! MyHighLights() abort
  hi StatusLine ctermbg=red ctermfg=green guifg=#ffd7d7 guibg=#073642
  hi StatusLine ctermbg=red ctermfg=green guifg=#003f66 guibg=white
  hi StatusLine guifg=black guibg=#d7afff gui=NONE ctermfg=black ctermbg=magenta
  hi StatusLineNC guifg=black guibg=#8fbfdc gui=NONE ctermfg=black ctermbg=cyan
endfunction
augroup MyColors
  autocmd!
  autocmd ColorScheme * call MyHighLights()
augroup END

if has('nvim')
  colorscheme default
endif


" DO NOT DELETE ABOVE "
" vim: filetype=vim:sw=2:tw=0:expandtab:norl:foldmethod=marker:
" set runtimepath+=~/vim_perforce
